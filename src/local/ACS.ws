// Created and designed by error_noaccess, exclusive to the Wolven Workshop discord server and Github. 
// Not authorized to be distributed elsewhere, unless you ask me nicely.

statemachine abstract class W3ACSWatcher extends CEntity
{
	private var lastACSMovementDoubleTapName 																								: name;
	private var playerAttacker, playerVictim																								: CPlayer;
	private var movementAdjustor, victimMovementAdjustor, movementAdjustorNPC																: CMovementAdjustor; 
	private var ticket, victimTicket, ticketNPC 																							: SMovementAdjustmentRequestTicket; 
	private var actor, pActor, npcactor_ANIMATION_CANCEL																					: CActor; 
	private var npc_ANIMATION_CANCEL																										: CNewNPC; 
	private var targetDistance, dist, distJump, distVampSpecialDash, distClawWhirl, sword_dmg												: float; 
	private var animatedComponent, animatedComponent_NPC_ANIMATION_CANCEL, animatedComponentA, NPCanimatedComponent, bowAnimatedComponent	: CAnimatedComponent;
	private var vACS_Shield_Summon 																											: cACS_Shield_Summon;
	private const var DOUBLE_TAP_WINDOW, DOUBLE_TAP_WINDOW_DODGE, DOUBLE_TAP_WINDOW_CAMPFIRE 												: float;
	private var weapontype 																													: EPlayerWeapon;
	private var res 																														: bool;
	
	default DOUBLE_TAP_WINDOW 																												= 0.4;

	default DOUBLE_TAP_WINDOW_DODGE 																										= 0.2;

	default DOUBLE_TAP_WINDOW_CAMPFIRE																										= 0.4;
	
	//Fist Attack Vars
	private var claw_fist_attack_index_1																									: int;
	default claw_fist_attack_index_1 																										= -1;

	private var claw_fist_attack_index_2																									: int;
	default claw_fist_attack_index_2 																										= -1;

	private var claw_fist_attack_index_3																									: int;
	default claw_fist_attack_index_2 																										= -1;

	private var previous_claw_fist_attack_index_1																							: int;
	default previous_claw_fist_attack_index_1 																								= -1;

	private var previous_claw_fist_attack_index_2																							: int;
	default previous_claw_fist_attack_index_2 																								= -1;

	private var previous_claw_fist_attack_index_3																							: int;
	default previous_claw_fist_attack_index_3 																								= -1;

	private var combo_counter_claw_fist_light 																								: int;
	default combo_counter_claw_fist_light 																									= 0;

	private var heavy_fist_attack_index_1																									: int;
	default heavy_fist_attack_index_1 																										= -1;
	private var heavy_fist_attack_index_2																									: int;
	default heavy_fist_attack_index_2 																										= -1;
	private var heavy_fist_attack_index_3																									: int;
	default heavy_fist_attack_index_3 																										= -1;

	private var previous_heavy_fist_attack_index_1																							: int;
	default previous_heavy_fist_attack_index_1 																								= -1;
	private var previous_heavy_fist_attack_index_2																							: int;
	default previous_heavy_fist_attack_index_2 																								= -1;
	private var previous_heavy_fist_attack_index_3																							: int;
	default previous_heavy_fist_attack_index_3 																								= -1;

	private var combo_counter_claw_fist_heavy																								: int;
	default combo_counter_claw_fist_heavy 																									= 0;
	
	private var fist_attack_index_1																											: int;
	default fist_attack_index_1 																											= -1;														
	private var fist_attack_index_2																											: int;
	default fist_attack_index_2 																											= -1;
	private var fist_attack_index_3																											: int;
	default fist_attack_index_3 																											= -1;
															
	private var previous_fist_attack_index_1																								: int;
	default previous_fist_attack_index_1 																									= -1;
	private var previous_fist_attack_index_2																								: int;
	default previous_fist_attack_index_2 																									= -1;
	private var previous_fist_attack_index_3																								: int;
	default previous_fist_attack_index_3 																									= -1;

	private var combo_counter_fist_attack																									: int;
	default combo_counter_fist_attack 																										= 0;

	private var combo_counter_fist_attack_heavy																								: int;
	default combo_counter_fist_attack_heavy 																										= 0;
	
	//Guard Attack Vars
	private var GuardAttackCallTime																											: float;
	private var GuardAttackDoubleTap 																										: bool;
	
	private var kick_index_1																												: int;
	default kick_index_1 																													= -1;
	private var kick_index_2																												: int;
	default kick_index_2 																													= -1;
	private var previous_kick_index_1																										: int;
	default previous_kick_index_1 																											= -1;
	private var previous_kick_index_2																										: int;
	default previous_kick_index_2 																											= -1;

	private var combo_counter_kick																											: int;
	default combo_counter_kick 																												= 0;
	
	private var push_index_1																												: int;
	default push_index_1 																													= -1;
	private var push_index_2																												: int;
	default push_index_2 																													= -1;
	private var previous_push_index_1																										: int;
	default previous_push_index_1 																											= -1;
	private var previous_push_index_2																										: int;
	default previous_push_index_2 																											= -1;

	private var combo_counter_push																											: int;
	default combo_counter_push																												= 0;
	
	private var punch_index_1																												: int;
	default punch_index_1 																													= -1;
	private var punch_index_2																												: int;
	default punch_index_2 																													= -1;
	private var previous_punch_index_1																										: int;
	default previous_punch_index_1 																											= -1;
	private var previous_punch_index_2																										: int;
	default previous_punch_index_2 																											= -1;

	private var combo_counter_punch																											: int;
	default combo_counter_punch																												= 0;
	
	private var igni_counter_index_1																										: int;
	default igni_counter_index_1 																											= -1;
	private var igni_counter_index_2																										: int;
	default igni_counter_index_2 																											= -1;
	private var igni_counter_index_3																										: int;
	default igni_counter_index_3 																											= -1;
	private var previous_igni_counter_index_1																								: int;
	default previous_igni_counter_index_1 																									= -1;
	private var previous_igni_counter_index_2																								: int;
	default previous_igni_counter_index_2 																									= -1;
	private var previous_igni_counter_index_3																								: int;
	default previous_igni_counter_index_3 																									= -1;

	private var combo_counter_igni_counter																									: int;
	default combo_counter_igni_counter																										= 0;
	
	private var aard_counter_index_1																										: int;
	default aard_counter_index_1 																											= -1;
	private var aard_counter_index_2																										: int;
	default aard_counter_index_2 																											= -1;
	private var previous_aard_counter_index_1																								: int;
	default previous_aard_counter_index_1 																									= -1;
	private var previous_aard_counter_index_2																								: int;
	default previous_aard_counter_index_2 																									= -1;

	private var combo_counter_aard_counter																									: int;
	default combo_counter_aard_counter																										= 0;
	
	private var quen_counter_index_1																										: int;
	default quen_counter_index_1 																											= -1;
	private var quen_counter_index_2																										: int;
	default quen_counter_index_2 																											= -1;
	private var previous_quen_counter_index_1																								: int;
	default previous_quen_counter_index_1 																									= -1;
	private var previous_quen_counter_index_2																								: int;
	default previous_quen_counter_index_2 																									= -1;

	private var combo_counter_quen_counter																									: int;
	default combo_counter_quen_counter																										= 0;
	
	private var yrden_counter_index_1																										: int;
	default yrden_counter_index_1 																											= -1;
	private var yrden_counter_index_2																										: int;
	default yrden_counter_index_2 																											= -1;
	private var previous_yrden_counter_index_1																								: int;
	default previous_yrden_counter_index_1 																									= -1;
	private var previous_yrden_counter_index_2																								: int;
	default previous_yrden_counter_index_2 																									= -1;

	private var combo_counter_yrden_counter																									: int;
	default combo_counter_yrden_counter																										= 0;
	
	private var axii_counter_index_1																										: int;
	default axii_counter_index_1 																											= -1;
	private var axii_counter_index_2																										: int;
	default axii_counter_index_2 																											= -1;
	private var previous_axii_counter_index_1																								: int;
	default previous_axii_counter_index_1 																									= -1;
	private var previous_axii_counter_index_2																								: int;
	default previous_axii_counter_index_2 																									= -1;

	private var combo_counter_axii_counter																									: int;
	default combo_counter_axii_counter																										= 0;

	private var combo_counter_spear_counter																									: int;
	default combo_counter_spear_counter																										= 0;

	private var combo_counter_greg_counter																									: int;
	default combo_counter_greg_counter																										= 0;

	private var combo_counter_hammer_counter																								: int;
	default combo_counter_hammer_counter																									= 0;

	private var combo_counter_axe_counter																									: int;
	default combo_counter_axe_counter																										= 0;

	//Jump Attack Vars
	private var jump_attack_index_1 																										: int;
	default jump_attack_index_1 																											= -1;

	private var previous_jump_attack_index_1																								: int;
	default previous_jump_attack_index_1 																									= -1;

	//Claw Attack Vars
	private var vamp_sound_names																											: array< string >;

	private var heavy_claw_attack_index																										: int;
	private var previous_heavy_claw_attack_index																							: int;

	default heavy_claw_attack_index 																										= -1;
	default previous_heavy_claw_attack_index 																								= -1;

	private var combo_counter_heavy_claw_attack																								: int;
	default combo_counter_heavy_claw_attack																									= 0;
	
	private var claw_attack_index_1																											: int;
	default claw_attack_index_1 																											= -1;
	private var claw_attack_index_2																											: int;
	default claw_attack_index_2 																											= -1;
	private var claw_attack_index_3																											: int;
	default claw_attack_index_3 																											= -1;
	
	private var previous_claw_attack_index_1																								: int;
	default previous_claw_attack_index_1 																									= -1;
	private var previous_claw_attack_index_2																								: int;
	default previous_claw_attack_index_2 																									= -1;
	private var previous_claw_attack_index_3																								: int;
	default previous_claw_attack_index_3 																									= -1;

	private var combo_counter_claw_attack																									: int;
	default combo_counter_claw_attack																										= 0;
	
	private var claw_attack_alt_index_1																										: int;
	default claw_attack_alt_index_1 																										= -1;
	private var claw_attack_alt_index_2																										: int;
	default claw_attack_alt_index_2 																										= -1;
	private var claw_attack_alt_index_3																										: int;
	default claw_attack_alt_index_3 																										= -1;
	
	private var previous_claw_attack_alt_index_1																							: int;
	default previous_claw_attack_alt_index_1 																								= -1;
	private var previous_claw_attack_alt_index_2																							: int;
	default previous_claw_attack_alt_index_2 																								= -1;
	private var previous_claw_attack_alt_index_3																							: int;
	default previous_claw_attack_alt_index_3 																								= -1;

	private var combo_counter_claw_attack_alt																								: int;
	default combo_counter_claw_attack_alt																									= 0;
	
	private var attack_special_dash_index_1																									: int;
	default attack_special_dash_index_1 																									= -1;
	
	private var previous_attack_special_dash_index_1																						: int;
	default previous_attack_special_dash_index_1																							= -1;

	private var combo_counter_attack_special_dash																							: int;
	default combo_counter_attack_special_dash																								= 0;

	private var combo_counter_claw_heavy_attack																								: int;
	default combo_counter_eredin_heavy_attack																								= 0;

	private var combo_counter_claw_heavy_attack_alt																							: int;
	default combo_counter_eredin_heavy_attack_alt																							= 0;

	private var combo_counter_claw_light_attack																								: int;
	default combo_counter_eredin_light_attack																								= 0;

	private var combo_counter_claw_light_attack_alt																							: int;
	default combo_counter_eredin_light_attack_alt																							= 0;

	private var combo_counter_claw_special_attack																							: int;
	default combo_counter_eredin_special_attack																								= 0;

	private var combo_counter_claw_special_attack_alt																						: int;
	default combo_counter_eredin_special_attack_alt																							= 0;

	//Geralt Attack Vars

	private var geralt_light_attack_index_1																									: int;
	default geralt_light_attack_index_1 																									= -1;

	private var geralt_light_attack_index_3																									: int;
	default geralt_light_attack_index_3 																									= -1;

	private var geralt_heavy_attack_index_1																									: int;
	default geralt_heavy_attack_index_1 																									= -1;

	private var geralt_heavy_attack_index_3																									: int;
	default geralt_heavy_attack_index_3 																									= -1;

	private var geralt_special_attack_index_3																								: int;
	default geralt_special_attack_index_3 																									= -1;

	private var geralt_light_attack_forward_index_1																							: int;
	default geralt_light_attack_forward_index_1 																							= -1;

	private var geralt_light_attack_forward_index_3																							: int;
	default geralt_light_attack_forward_index_3 																							= -1;

	private var geralt_heavy_attack_forward_index_1																							: int;
	default geralt_heavy_attack_forward_index_1 																							= -1;

	private var geralt_heavy_attack_forward_index_3																							: int;
	default geralt_heavy_attack_forward_index_3 																							= -1;

	private var previous_geralt_light_attack_index_1																						: int;
	default previous_geralt_light_attack_index_1 																							= -1;

	private var previous_geralt_light_attack_index_3																						: int;
	default previous_geralt_light_attack_index_3 																							= -1;

	private var previous_geralt_heavy_attack_index_1																						: int;
	default previous_geralt_heavy_attack_index_1 																							= -1;

	private var previous_geralt_heavy_attack_index_3																						: int;
	default previous_geralt_heavy_attack_index_3 																							= -1;

	private var previous_geralt_light_attack_forward_index_1																				: int;
	default previous_geralt_light_attack_forward_index_1 																					= -1;

	private var previous_geralt_light_attack_forward_index_3																				: int;
	default previous_geralt_light_attack_forward_index_3 																					= -1;

	private var previous_geralt_heavy_attack_forward_index_1																				: int;
	default previous_geralt_heavy_attack_forward_index_1 																					= -1;

	private var previous_geralt_heavy_attack_forward_index_3																				: int;
	default previous_geralt_heavy_attack_forward_index_3 																					= -1;

	private var previous_geralt_special_attack_index_3																						: int;
	default previous_geralt_special_attack_index_3 																							= -1;

	private var combo_counter_geralt_light_attack 																							: int;
	default combo_counter_geralt_light_attack 																								= 0;

	private var combo_counter_geralt_light_attack_forward 																					: int;
	default combo_counter_geralt_light_attack_forward 																						= 0;

	private var combo_counter_geralt_heavy_attack 																							: int;
	default combo_counter_geralt_heavy_attack 																								= 0;

	private var combo_counter_geralt_heavy_attack_forward 																					: int;
	default combo_counter_geralt_heavy_attack_forward 																						= 0;

	private var combo_counter_geralt_special_attack 																						: int;
	default combo_counter_geralt_special_attack 																							= 0;

	//Bear School
	private var combo_counter_geralt_light_attack_bear																						: int;
	default combo_counter_geralt_light_attack_bear 																							= 0;

	private var combo_counter_geralt_light_attack_forward_bear 																				: int;
	default combo_counter_geralt_light_attack_forward_bear 																					= 0;

	private var combo_counter_geralt_heavy_attack_bear																						: int;
	default combo_counter_geralt_heavy_attack_bear 																							= 0;

	private var combo_counter_geralt_heavy_attack_forward_bear 																				: int;
	default combo_counter_geralt_heavy_attack_forward_bear 																					= 0;

	private var combo_counter_geralt_special_attack_bear 																					: int;
	default combo_counter_geralt_special_attack_bear 																						= 0;

	//Cat School
	private var combo_counter_geralt_light_attack_cat																						: int;
	default combo_counter_geralt_light_attack_cat 																							= 0;

	private var combo_counter_geralt_light_attack_forward_cat 																				: int;
	default combo_counter_geralt_light_attack_forward_cat 																					= 0;

	private var combo_counter_geralt_heavy_attack_cat																						: int;
	default combo_counter_geralt_heavy_attack_cat 																							= 0;

	private var combo_counter_geralt_heavy_attack_forward_cat 																				: int;
	default combo_counter_geralt_heavy_attack_forward_cat 																					= 0;

	private var combo_counter_geralt_special_attack_cat 																					: int;
	default combo_counter_geralt_special_attack_cat 																						= 0;

	//Griffin School
	private var combo_counter_geralt_light_attack_griffin 																					: int;
	default combo_counter_geralt_light_attack_griffin 																						= 0;

	private var combo_counter_geralt_light_attack_forward_griffin 																			: int;
	default combo_counter_geralt_light_attack_forward_griffin 																				= 0;

	private var combo_counter_geralt_heavy_attack_griffin 																					: int;
	default combo_counter_geralt_heavy_attack_griffin 																						= 0;

	private var combo_counter_geralt_heavy_attack_forward_griffin 																			: int;
	default combo_counter_geralt_heavy_attack_forward_griffin 																				= 0;

	private var combo_counter_geralt_special_attack_griffin 																				: int;
	default combo_counter_geralt_special_attack_griffin 																					= 0;

	//Manticore School
	private var combo_counter_geralt_light_attack_manticore 																				: int;
	default combo_counter_geralt_light_attack_manticore 																					= 0;

	private var combo_counter_geralt_light_attack_forward_manticore 																		: int;
	default combo_counter_geralt_light_attack_forward_manticore 																			= 0;

	private var combo_counter_geralt_heavy_attack_manticore 																				: int;
	default combo_counter_geralt_heavy_attack_manticore 																					= 0;

	private var combo_counter_geralt_heavy_attack_forward_manticore 																		: int;
	default combo_counter_geralt_heavy_attack_forward_manticore 																			= 0;

	private var combo_counter_geralt_special_attack_manticore 																				: int;
	default combo_counter_geralt_special_attack_manticore 																					= 0;

	//Viper School
	private var combo_counter_geralt_light_attack_viper 																					: int;
	default combo_counter_geralt_light_attack_viper 																						= 0;

	private var combo_counter_geralt_light_attack_forward_viper 																			: int;
	default combo_counter_geralt_light_attack_forward_viper 																				= 0;

	private var combo_counter_geralt_heavy_attack_viper 																					: int;
	default combo_counter_geralt_heavy_attack_viper 																						= 0;

	private var combo_counter_geralt_heavy_attack_forward_viper 																			: int;
	default combo_counter_geralt_heavy_attack_forward_viper 																				= 0;

	private var combo_counter_geralt_special_attack_viper 																					: int;
	default combo_counter_geralt_special_attack_viper 																						= 0;
	
	//Olgierd Attack Vars
	private var olgierd_attack_index_1																										: int;
	default olgierd_attack_index_1 																											= -1;
	private var olgierd_attack_index_2																										: int;
	default olgierd_attack_index_2 																											= -1;
	private var olgierd_attack_index_3																										: int;
	default olgierd_attack_index_3 																											= -1;
	private var previous_olgierd_attack_index_1																								: int;
	default previous_olgierd_attack_index_1 																								= -1;
	private var previous_olgierd_attack_index_2																								: int;
	default previous_olgierd_attack_index_2 																								= -1;
	private var previous_olgierd_attack_index_3																								: int;
	default previous_olgierd_attack_index_3 																								= -1;

	private var combo_counter_olgierd_attack																								: int;
	default combo_counter_olgierd_attack																									= 0;

	private var olgierd_heavy_attack_index_1																								: int;
	default olgierd_heavy_attack_index_1 																									= -1;
	private var olgierd_heavy_attack_index_2																								: int;
	default olgierd_heavy_attack_index_2 																									= -1;
	private var olgierd_heavy_attack_index_3																								: int;
	default olgierd_heavy_attack_index_3 																									= -1;
	private var previous_olgierd_heavy_attack_index_1																						: int;
	default previous_olgierd_heavy_attack_index_1 																							= -1;
	private var previous_olgierd_heavy_attack_index_2																						: int;
	default previous_olgierd_heavy_attack_index_2 																							= -1;
	private var previous_olgierd_heavy_attack_index_3																						: int;
	default previous_olgierd_heavy_attack_index_3 																							= -1;

	private var combo_counter_olgierd_heavy_attack																							: int;
	default combo_counter_olgierd_heavy_attack																								= 0;

	private var olgierd_heavy_attack_alt_index_1																							: int;
	default olgierd_heavy_attack_alt_index_1 																								= -1;
	private var olgierd_heavy_attack_alt_index_2																							: int;
	default olgierd_heavy_attack_alt_index_2 																								= -1;
	private var olgierd_heavy_attack_alt_index_3																							: int;
	default olgierd_heavy_attack_alt_index_3 																								= -1;
	private var previous_olgierd_heavy_attack_alt_index_1																					: int;
	default previous_olgierd_heavy_attack_alt_index_1 																						= -1;
	private var previous_olgierd_heavy_attack_alt_index_2																					: int;
	default previous_olgierd_heavy_attack_alt_index_2 																						= -1;
	private var previous_olgierd_heavy_attack_alt_index_3																					: int;
	default previous_olgierd_heavy_attack_alt_index_3 																						= -1;

	private var combo_counter_olgierd_heavy_attack_alt																						: int;
	default combo_counter_olgierd_heavy_attack_alt																							= 0;

	private var olgierd_light_attack_index_1																								: int;
	default olgierd_light_attack_index_1 																									= -1;
	private var olgierd_light_attack_index_2																								: int;
	default olgierd_light_attack_index_2 																									= -1;
	private var olgierd_light_attack_index_3																								: int;
	default olgierd_light_attack_index_3 																									= -1;
	private var previous_olgierd_light_attack_index_1																						: int;
	default previous_olgierd_light_attack_index_1 																							= -1;
	private var previous_olgierd_light_attack_index_2																						: int;
	default previous_olgierd_light_attack_index_2 																							= -1;
	private var previous_olgierd_light_attack_index_3																						: int;
	default previous_olgierd_light_attack_index_3 																							= -1;

	private var combo_counter_olgierd_light_attack																							: int;
	default combo_counter_olgierd_light_attack																								= 0;

	private var olgierd_light_attack_alt_index_1																							: int;
	default olgierd_light_attack_alt_index_1 																								= -1;
	private var olgierd_light_attack_alt_index_2																							: int;
	default olgierd_light_attack_alt_index_2 																								= -1;
	private var olgierd_light_attack_alt_index_3																							: int;
	default olgierd_light_attack_alt_index_3 																								= -1;
	private var previous_olgierd_light_attack_alt_index_1																					: int;
	default previous_olgierd_light_attack_alt_index_1 																						= -1;
	private var previous_olgierd_light_attack_alt_index_2																					: int;
	default previous_olgierd_light_attack_alt_index_2 																						= -1;
	private var previous_olgierd_light_attack_alt_index_3																					: int;
	default previous_olgierd_light_attack_alt_index_3 																						= -1;

	private var combo_counter_olgierd_light_attack_alt																						: int;
	default combo_counter_olgierd_light_attack_alt																							= 0;
	
	private var olgierd_pirouette_index_1																									: int;
	default olgierd_pirouette_index_1 																										= -1;
	private var olgierd_pirouette_index_2																									: int;
	default olgierd_pirouette_index_2 																										= -1;
	private var previous_olgierd_pirouette_index_1																							: int;
	default previous_olgierd_pirouette_index_1 																								= -1;
	private var previous_olgierd_pirouette_index_2																							: int;
	default previous_olgierd_pirouette_index_2 																								= -1;

	private var combo_counter_olgierd_pirouette																								: int;
	default combo_counter_olgierd_pirouette																									= 0;
	
	private var olgierd_shadow_attack_index_1																								: int;	
	default olgierd_shadow_attack_index_1 																									= -1;
	private var olgierd_shadow_attack_index_2																								: int;
	default olgierd_shadow_attack_index_2 																									= -1;
	private var previous_olgierd_shadow_attack_index_1																						: int;	
	default previous_olgierd_shadow_attack_index_1 																							= -1;
	private var previous_olgierd_shadow_attack_index_2																						: int;
	default previous_olgierd_shadow_attack_index_2 																							= -1;

	private var olgierd_shadow_attack_part_2_index_1																						: int;	
	default olgierd_shadow_attack_part_2_index_1 																							= -1;
	private var olgierd_shadow_attack_part_2_index_2																						: int;
	default olgierd_shadow_attack_part_2_index_2 																							= -1;
	private var previous_olgierd_shadow_attack_part_2_index_1																				: int;	
	default previous_olgierd_shadow_attack_part_2_index_1 																					= -1;
	private var previous_olgierd_shadow_attack_part_2_index_2																				: int;
	default previous_olgierd_shadow_attack_part_2_index_2 																					= -1;
	
	private var olgierd_combo_attack_index_1																								: int;	
	default olgierd_combo_attack_index_1 																									= -1;
	private var olgierd_combo_attack_index_2																								: int;	
	default olgierd_combo_attack_index_2 																									= -1;
	private var previous_olgierd_combo_attack_index_1																						: int;	
	default previous_olgierd_combo_attack_index_1 																							= -1;
	private var previous_olgierd_combo_attack_index_2																						: int;	
	default previous_olgierd_combo_attack_index_2 																							= -1;

	private var combo_counter_olgierd_combo_attack																							: int;
	default combo_counter_olgierd_combo_attack																								= 0;
	
	//Eredin Attack Vars
	private var eredin_attack_index_1																										: int;
	default eredin_attack_index_1 																											= -1;
	private var eredin_attack_index_2																										: int;
	default eredin_attack_index_2 																											= -1;
	private var eredin_attack_index_3																										: int;
	default eredin_attack_index_3 																											= -1;
	private var previous_eredin_attack_index_1																								: int;
	default previous_eredin_attack_index_1 																									= -1;
	private var previous_eredin_attack_index_2																								: int;
	default previous_eredin_attack_index_2 																									= -1;
	private var previous_eredin_attack_index_3																								: int;
	default previous_eredin_attack_index_3 																									= -1;

	private var combo_counter_eredin_attack																									: int;
	default combo_counter_eredin_attack																										= 0;
	
	private var eredin_combo_attack_index_1																									: int;
	default eredin_combo_attack_index_1 																									= -1;
	private var eredin_combo_attack_index_2																									: int;
	default eredin_combo_attack_index_2 																									= -1;
	private var eredin_combo_attack_index_3																									: int;
	default eredin_combo_attack_index_3 																									= -1;
	private var previous_eredin_combo_attack_index_1																						: int;
	default previous_eredin_combo_attack_index_1 																							= -1;
	private var previous_eredin_combo_attack_index_2																						: int;
	default previous_eredin_combo_attack_index_2 																							= -1;
	private var previous_eredin_combo_attack_index_3																						: int;
	default previous_eredin_combo_attack_index_3 																							= -1;

	private var combo_counter_eredin_combo_attack																							: int;
	default combo_counter_eredin_combo_attack																								= 0;

	private var combo_counter_eredin_combo_attack_alt																						: int;
	default combo_counter_eredin_combo_attack_alt																							= 0;
	
	private var eredin_stab_index																											: int;
	default eredin_stab_index 																												= -1;
	private var previous_eredin_stab_index																									: int;
	default previous_eredin_stab_index 																										= -1;

	private var combo_counter_eredin_heavy_attack																							: int;
	default combo_counter_eredin_heavy_attack																								= 0;

	private var combo_counter_eredin_heavy_attack_alt																						: int;
	default combo_counter_eredin_heavy_attack_alt																							= 0;

	private var combo_counter_eredin_light_attack																							: int;
	default combo_counter_eredin_light_attack																								= 0;

	private var combo_counter_eredin_light_attack_alt																						: int;
	default combo_counter_eredin_light_attack_alt																							= 0;

	private var combo_counter_eredin_special_attack																							: int;
	default combo_counter_eredin_special_attack																								= 0;

	private var combo_counter_eredin_special_attack_alt																						: int;
	default combo_counter_eredin_special_attack_alt																							= 0;

	private var combo_counter_shield_attack																									: int;
	default combo_counter_shield_attack																										= 0;

	private var combo_counter_shield_attack_alt																								: int;
	default combo_counter_shield_attack_alt																									= 0;

	private var combo_counter_shield_attack_special_alt																						: int;
	default combo_counter_shield_attack_special_alt																							= 0;

	private var combo_counter_shield_heavy_attack																							: int;
	default combo_counter_shield_heavy_attack																								= 0;

	private var combo_counter_shield_heavy_attack_alt																						: int;
	default combo_counter_shield_heavy_attack_alt																							= 0;

	private var combo_counter_shield_light_attack																							: int;
	default combo_counter_shield_light_attack																								= 0;

	private var combo_counter_shield_light_attack_alt																						: int;
	default combo_counter_shield_light_attack_alt																							= 0;

	private var combo_counter_shield_special_attack																							: int;
	default combo_counter_shield_special_attack																								= 0;

	private var combo_counter_shield_special_attack_alt																						: int;
	default combo_counter_shield_special_attack_alt																							= 0;
	
	//Imlerith Attack Vars
	private var imlerith_attack_index_1																										: int;
	private var imlerith_attack_index_2																										: int;
	private var imlerith_attack_index_3																										: int;
	private var previous_imlerith_attack_index_1																							: int;
	private var previous_imlerith_attack_index_2																							: int;
	private var previous_imlerith_attack_index_3																							: int;

	default imlerith_attack_index_1 																										= -1;
	default imlerith_attack_index_2 																										= -1;
	default imlerith_attack_index_3 																										= -1;
	default previous_imlerith_attack_index_1 																								= -1;
	default previous_imlerith_attack_index_2 																								= -1;
	default previous_imlerith_attack_index_3 																								= -1;

	private var combo_counter_imlerith_attack																								: int;
	default combo_counter_imlerith_attack																									= 0;
	
	private var imlerith_berserk_attack_index_1																								: int;
	private var imlerith_berserk_attack_index_2																								: int;
	private var imlerith_berserk_attack_index_3																								: int;
	private var previous_imlerith_berserk_attack_index_1																					: int;
	private var previous_imlerith_berserk_attack_index_2																					: int;
	private var previous_imlerith_berserk_attack_index_3																					: int;

	default imlerith_berserk_attack_index_1 																								= -1;
	default imlerith_berserk_attack_index_2 																								= -1;
	default imlerith_berserk_attack_index_3 																								= -1;
	default previous_imlerith_berserk_attack_index_1 																						= -1;
	default previous_imlerith_berserk_attack_index_2 																						= -1;
	default previous_imlerith_berserk_attack_index_3 																						= -1;

	private var combo_counter_imlerith_berserk_attack																						: int;
	default combo_counter_imlerith_berserk_attack																							= 0;
	
	private var imlerith_walk_attack_index_1																								: int;
	private var imlerith_walk_attack_index_2																								: int;
	private var previous_imlerith_walk_attack_index_1																						: int;
	private var previous_imlerith_walk_attack_index_2																						: int;

	default imlerith_walk_attack_index_1 																									= -1;
	default imlerith_walk_attack_index_2 																									= -1;
	default previous_imlerith_walk_attack_index_1 																							= -1;
	default previous_imlerith_walk_attack_index_2 																							= -1;

	private var combo_counter_imlerith_walk_attack																							: int;
	default combo_counter_imlerith_walk_attack																								= 0;
	
	private var imlerith_combo_attack_index_1																								: int;
	private var imlerith_combo_attack_index_2																								: int;
	private var previous_imlerith_combo_attack_index_1																						: int;
	private var previous_imlerith_combo_attack_index_2																						: int;

	default imlerith_combo_attack_index_1 																									= -1;
	default imlerith_combo_attack_index_2 																									= -1;
	default previous_imlerith_combo_attack_index_1 																							= -1;
	default previous_imlerith_combo_attack_index_2 																							= -1;

	private var combo_counter_imlerith_combo_attack																							: int;
	default combo_counter_imlerith_combo_attack																								= 0;

	private var combo_counter_imlerith_heavy_attack																							: int;
	default combo_counter_imlerith_heavy_attack																								= 0;

	private var combo_counter_imlerith_heavy_attack_alt																						: int;
	default combo_counter_imlerith_heavy_attack_alt																							= 0;

	private var combo_counter_imlerith_light_attack																							: int;
	default combo_counter_imlerith_light_attack																								= 0;

	private var combo_counter_imlerith_light_attack_alt																						: int;
	default combo_counter_imlerith_light_attack_alt																							= 0;

	private var combo_counter_imlerith_special_attack																						: int;
	default combo_counter_imlerith_special_attack																							= 0;

	private var combo_counter_imlerith_special_attack_alt																					: int;
	default combo_counter_imlerith_special_attack_alt																						= 0;
	
	//Spear Attack Vars
	
	private var spear_attack_index_1																										: int;
	private var spear_attack_index_2																										: int;
	private var spear_attack_index_3																										: int;
	private var previous_spear_attack_index_1																								: int;
	private var previous_spear_attack_index_2																								: int;
	private var previous_spear_attack_index_3																								: int;

	default spear_attack_index_1 																											= -1;
	default spear_attack_index_2 																											= -1;
	default spear_attack_index_3 																											= -1;
	default previous_spear_attack_index_1 																									= -1;
	default previous_spear_attack_index_2 																									= -1;
	default previous_spear_attack_index_3 																									= -1;

	private var combo_counter_spear_attack																									: int;
	default combo_counter_spear_attack																										= 0;
	
	private var spear_attack_alt_index_1																									: int;
	private var spear_attack_alt_index_2																									: int;
	private var spear_attack_alt_index_3																									: int;
	private var previous_spear_attack_alt_index_1																							: int;
	private var previous_spear_attack_alt_index_2																							: int;
	private var previous_spear_attack_alt_index_3																							: int;

	default spear_attack_alt_index_1 																										= -1;
	default spear_attack_alt_index_2 																										= -1;
	default spear_attack_alt_index_3 																										= -1;
	default previous_spear_attack_alt_index_1 																								= -1;
	default previous_spear_attack_alt_index_2 																								= -1;
	default previous_spear_attack_alt_index_3 																								= -1;

	private var combo_counter_spear_attack_alt																								: int;
	default combo_counter_spear_attack_alt																									= 0;


	private var combo_counter_spear_heavy_attack																							: int;
	default combo_counter_spear_heavy_attack																								= 0;

	private var combo_counter_spear_heavy_attack_alt																						: int;
	default combo_counter_spear_heavy_attack_alt																							= 0;

	private var combo_counter_spear_light_attack																							: int;
	default combo_counter_spear_light_attack																								= 0;

	private var combo_counter_spear_light_attack_alt																						: int;
	default combo_counter_spear_light_attack_alt																							= 0;

	private var combo_counter_spear_special_attack																							: int;
	default combo_counter_spear_special_attack																								= 0;

	private var combo_counter_spear_special_attack_alt																						: int;
	default combo_counter_spear_special_attack_alt																							= 0;
	
	//Hammer Attack Vars
	
	private var hammer_attack_index_1																										: int;
	private var hammer_attack_index_2																										: int;
	private var previous_hammer_attack_index_1																								: int;
	private var previous_hammer_attack_index_2																								: int;

	default hammer_attack_index_1 																											= -1;
	default hammer_attack_index_2 																											= -1;
	default previous_hammer_attack_index_1 																									= -1;
	default previous_hammer_attack_index_2 																									= -1;
	
	private var hammer_attack_alt_index_1																									: int;
	private var hammer_attack_alt_index_2																									: int;
	private var previous_hammer_attack_alt_index_1																							: int;	
	private var previous_hammer_attack_alt_index_2																							: int;

	default hammer_attack_alt_index_1 																										= -1;
	default hammer_attack_alt_index_2 																										= -1;
	default previous_hammer_attack_alt_index_1 																								= -1;
	default previous_hammer_attack_alt_index_2 																								= -1;

	private var combo_counter_hammer_attack																									: int;
	default combo_counter_hammer_attack																										= 0;

	private var combo_counter_hammer_attack_alt																								: int;
	default combo_counter_hammer_attack_alt																									= 0;


	private var combo_counter_hammer_heavy_attack																							: int;
	default combo_counter_hammer_heavy_attack																								= 0;

	private var combo_counter_hammer_heavy_attack_alt																						: int;
	default combo_counter_hammer_heavy_attack_alt																							= 0;

	private var combo_counter_hammer_light_attack																							: int;
	default combo_counter_hammer_light_attack																								= 0;

	private var combo_counter_hammer_light_attack_alt																						: int;
	default combo_counter_hammer_light_attack_alt																							= 0;

	private var combo_counter_hammer_special_attack																							: int;
	default combo_counter_hammer_special_attack																								= 0;

	private var combo_counter_hammer_special_attack_alt																						: int;
	default combo_counter_hammer_special_attack_alt																							= 0;
	
	//Axe Attack Vars
	private var axe_attack_index_1																											: int;
	private var axe_attack_index_2																											: int;
	private var previous_axe_attack_index_1																									: int;
	private var previous_axe_attack_index_2																									: int;

	default axe_attack_index_1 																												= -1;
	default axe_attack_index_2 																												= -1;
	default previous_axe_attack_index_1 																									= -1;
	default previous_axe_attack_index_2 																									= -1;
	
	private var axe_attack_alt_index_1																										: int;
	private var axe_attack_alt_index_2																										: int;
	private var previous_axe_attack_alt_index_1																								: int;
	private var previous_axe_attack_alt_index_2																								: int;

	default axe_attack_alt_index_1 																											= -1;
	default axe_attack_alt_index_2 																											= -1;
	default previous_axe_attack_alt_index_1 																								= -1;
	default previous_axe_attack_alt_index_2 																								= -1;


	private var combo_counter_axe_attack																									: int;
	default combo_counter_axe_attack																										= 0;

	private var combo_counter_axe_attack_alt																								: int;
	default combo_counter_axe_attack_alt																									= 0;


	private var combo_counter_axe_heavy_attack																								: int;
	default combo_counter_axe_heavy_attack																									= 0;

	private var combo_counter_axe_heavy_attack_alt																							: int;
	default combo_counter_axe_heavy_attack_alt																								= 0;

	private var combo_counter_axe_light_attack																								: int;
	default combo_counter_axe_light_attack																									= 0;

	private var combo_counter_axe_light_attack_alt																							: int;
	default combo_counter_axe_light_attack_alt																								= 0;

	private var combo_counter_axe_special_attack																							: int;
	default combo_counter_axe_special_attack																								= 0;

	private var combo_counter_axe_special_attack_alt																						: int;
	default combo_counter_axe_special_attack_alt																							= 0;
	
	//Greg Attack Vars
	private var greg_attack_index_1																											: int;
	private var greg_attack_index_2																											: int;
	private var previous_greg_attack_index_1																								: int;
	private var previous_greg_attack_index_2																								: int;

	default greg_attack_index_1 																											= -1;
	default greg_attack_index_2 																											= -1;
	default previous_greg_attack_index_1 																									= -1;
	default previous_greg_attack_index_2 																									= -1;
	
	private var greg_attack_alt_index_1																										: int;
	private var greg_attack_alt_index_2																										: int;
	private var previous_greg_attack_alt_index_1																							: int;
	private var previous_greg_attack_alt_index_2																							: int;

	default greg_attack_alt_index_1 																										= -1;
	default greg_attack_alt_index_2 																										= -1;
	default previous_greg_attack_alt_index_1 																								= -1;
	default previous_greg_attack_alt_index_2 																								= -1;

	private var combo_counter_greg_attack																									: int;
	default combo_counter_greg_attack																										= 0;

	private var combo_counter_greg_attack_alt																								: int;
	default combo_counter_greg_attack_alt																									= 0;


	private var combo_counter_greg_heavy_attack																								: int;
	default combo_counter_greg_heavy_attack																									= 0;

	private var combo_counter_greg_heavy_attack_alt																							: int;
	default combo_counter_greg_heavy_attack_alt																								= 0;

	private var combo_counter_greg_light_attack																								: int;
	default combo_counter_greg_light_attack																									= 0;

	private var combo_counter_greg_light_attack_alt																							: int;
	default combo_counter_greg_light_attack_alt																								= 0;

	private var combo_counter_greg_special_attack																							: int;
	default combo_counter_greg_special_attack																								= 0;

	private var combo_counter_greg_special_attack_alt																						: int;
	default combo_counter_greg_special_attack_alt																							= 0;
	
	//Bruxa Bite Vars
	private var bruxa_bite_index_1																											: int; 
	private var previous_bruxa_bite_index_1																									: int;

	default bruxa_bite_index_1 																												= -1;
	default previous_bruxa_bite_index_1 																									= -1;
	
	private var bruxa_bite_repeat_index_1																									: int;
	private var previous_bruxa_bite_repeat_index_1																							: int;

	default bruxa_bite_repeat_index_1 																										= -1;
	default previous_bruxa_bite_repeat_index_1 																								= -1;
	
	private var victimPos, newVictimPos																										: Vector;
	private var victimRot 																													: EulerAngles;
	private var playerPos																													: Vector;
	private var playerRot 																													: EulerAngles;
	
	//Movement Vars
	private var BruxaDashCallTime																											: float;
	private var BruxaDashDoubleTap 																											: bool;
	
	private var bruxa_dash_index_1																											: int;	
	private var bruxa_dash_index_2																											: int;
	private var previous_bruxa_dash_index_1																									: int;	
	private var previous_bruxa_dash_index_2																									: int;

	default bruxa_dash_index_1 																												= -1;
	default bruxa_dash_index_2 																												= -1;
	default previous_bruxa_dash_index_1 																									= -1;
	default previous_bruxa_dash_index_2 																									= -1;

	private var TeleportCallTime																											: float;
	private var TeleportDoubleTap 																											: bool;
	
	//On-hit Vars
	private var heal, playerVitality 																										: float;
	private var maxAdrenaline																												: float;
	private var curAdrenaline																												: float;
	private var marks, marks_2 																												: array< CEntity >;
	private var mark       																													: CEntity;
	private var targetRotationNPC, npcRot																									: EulerAngles;
	private var npcPos																														: Vector;
	private var npc 																														: CActor;
	private var actors, deathactors		    																								: array<CActor>;
	private var i         																													: int;
	private var actortarget					       																							: CActor;
	private var damage_action			 																									: W3Action_Attack;
	private var dmg																															: W3DamageAction;
	
	//Shield Anim Stuff
	private var shieldAnimatedComponent 																									: CAnimatedComponent;
	private var shieldMovementAdjustor																										: CMovementAdjustor; 
	private var shieldTicket 																												: SMovementAdjustmentRequestTicket; 

	private var acs_shield_attack_index_1																									: int;
	private var previous_acs_shield_attack_index_1																							: int;

	default acs_shield_attack_index_1 																										= -1;
	default previous_acs_shield_attack_index_1 																								= -1;

	private var curTargetVitality, maxTargetVitality, curTargetEssence, maxTargetEssence, damageMax, damageMin								: float;
	
	private var blood_fx, forest_god_fx, forest_god_demonic_fx																				: array<CName>;

	private var previous_player_comment_index_COMBAT_END																					: int;	
	private var player_comment_index_COMBAT_END																								: int;

	default previous_player_comment_index_COMBAT_END 																						= -1;
	default player_comment_index_COMBAT_END 																								= -1;

	// Fear Vars
	private var fear_index_1																												: int;
	private var previous_fear_index_1																										: int;

	default fear_index_1 																													= -1;
	default previous_fear_index_1 																											= -1;

	private var death_fear_index_1																											: int;
	private var previous_death_fear_index_1																									: int;

	default death_fear_index_1 																												= -1;
	default previous_death_fear_index_1 																									= -1;

	private var action 																														: W3DamageAction;
	private var curVitality, damage																											: float;
	
	// Wraith Vars
	private var dest1																														: Vector;	
	private var pRot 																														: EulerAngles;

	private var attach_vec, bone_vec																										: Vector;
	private var attach_rot, bone_rot																										: EulerAngles;

	// Camera Vars
	private var camera 																														: CCustomCamera;

	var previous_weapon_cutscene_index																										: int;
	var weapon_cutscene_index																												: int;

	default previous_weapon_cutscene_index 																									= -1;
	default weapon_cutscene_index 																											= -1;

	var previous_player_comment_index_EQUIP_TAUNT																							: int;	
	var player_comment_index_EQUIP_TAUNT																									: int;
	var previous_player_comment_index_COMBAT_TAUNT																							: int;	
	var player_comment_index_COMBAT_TAUNT																									: int;

	default previous_player_comment_index_EQUIP_TAUNT 																						= -1;
	default player_comment_index_EQUIP_TAUNT 																								= -1;
	default previous_player_comment_index_COMBAT_TAUNT 																						= -1;
	default player_comment_index_COMBAT_TAUNT 																								= -1;

	var previous_claw_taunt_index																											: int;	
	var claw_taunt_index																													: int;

	var previous_olgierd_taunt_index																										: int;	
	var olgierd_taunt_index																													: int;

	var previous_regular_taunt_index																										: int;	
	var regular_taunt_index																													: int;

	var previous_imlerith_taunt_index																										: int;	
	var imlerith_taunt_index																												: int;

	var previous_eredin_taunt_index																											: int;	
	var eredin_taunt_index																													: int;

	var previous_olgierd_combat_taunt_index_1																								: int;
	var previous_olgierd_combat_taunt_index_2																								: int;

	var olgierd_combat_taunt_index_1																										: int;
	var olgierd_combat_taunt_index_2																										: int;

	var previous_eredin_combat_taunt_index_1																								: int;
	var previous_eredin_combat_taunt_index_2																								: int;

	var eredin_combat_taunt_index_1																											: int;
	var eredin_combat_taunt_index_2																											: int;

	var previous_imlerith_combat_taunt_index_1																								: int;
	var previous_imlerith_combat_taunt_index_2																								: int;

	var imlerith_combat_taunt_index_1																										: int;
	var imlerith_combat_taunt_index_2																										: int;

	var previous_normal_combat_taunt_index_1																								: int;
	var previous_normal_combat_taunt_index_2																								: int;

	var normal_combat_taunt_index_1																											: int;
	var normal_combat_taunt_index_2																											: int;

	default previous_claw_taunt_index 																										= -1;
	default claw_taunt_index 																												= -1;
	default previous_olgierd_taunt_index 																									= -1;
	default olgierd_taunt_index 																											= -1;
	default previous_regular_taunt_index 																									= -1;
	default regular_taunt_index 																											= -1;
	default previous_imlerith_taunt_index 																									= -1;
	default imlerith_taunt_index 																											= -1;
	default previous_eredin_taunt_index 																									= -1;
	default eredin_taunt_index 																												= -1;
	default previous_olgierd_combat_taunt_index_1 																							= -1;
	default previous_olgierd_combat_taunt_index_2 																							= -1;
	default olgierd_combat_taunt_index_1 																									= -1;
	default olgierd_combat_taunt_index_2 																									= -1;
	default previous_eredin_combat_taunt_index_1 																							= -1;
	default previous_eredin_combat_taunt_index_2 																							= -1;
	default eredin_combat_taunt_index_1 																									= -1;
	default eredin_combat_taunt_index_2 																									= -1;
	default previous_imlerith_combat_taunt_index_1 																							= -1;
	default previous_imlerith_combat_taunt_index_2 																							= -1;
	default imlerith_combat_taunt_index_1 																									= -1;
	default imlerith_combat_taunt_index_2 																									= -1;
	default previous_normal_combat_taunt_index_1																							= -1;
	default previous_normal_combat_taunt_index_2 																							= -1;
	default normal_combat_taunt_index_1 																									= -1;
	default normal_combat_taunt_index_2 																									= -1;

	var vACS_Cooldown_Manager																												: ACS_Cooldown_Manager; 
	var vACS_Manual_Sword_Drawing_Check																										: ACS_Manual_Sword_Drawing_Check;

	private var forcedFinisherVictim 																										: CActor;

	private var combatTarget 																												: CActor;

	private var moveTargets, moveTargets_ACS_INIT 																							: array<CActor>;

	private var environment 																												: CEnvironmentDefinition;	

	private var envID 																														: int;

	private var umbral_slash_index																											: int;
	private var previous_umbral_slash_index																									: int;

	private var sparagmos_index																												: int;
	private var previous_sparagmos_index																									: int;

	private var storm_spear_index																											: int;
	private var previous_storm_spear_index																									: int;

	private var eff_names																													: array<CName>;

	private var dismembermentComp, playerDismembermentComp 																					: CDismembermentComponent;
	private var wounds, playerWounds																										: array< name >;
	private var usedWound, usedPlayerWound																									: name;

	private var playerMeshcomp																												: CComponent;
	private var playerAnimcomp 																												: CComponent;
	private var size 																														: float;
	default size 																															= 1;

	private var playersize																													: float;

	public var combo_counter_damage																											: int;

	default combo_counter_damage 																											= 0;

	public var dodge_counter																												: int;

	default dodge_counter 																													= 0;

	private var steel_weapon_names, silver_weapon_names																						: array<CName>;

	private var finisherDist 																												: float;

	private var evadeTarget 																												: CActor;

	public var rage_counter_dodge																											: int;

	default rage_counter_dodge 																												= 0;

	public var rage_counter_light_attack																									: int;

	default rage_counter_light_attack 																										= 0;

	public var rage_counter_heavy_attack																									: int;

	default rage_counter_heavy_attack 																										= 0;

	public var rage_counter_special_attack																									: int;

	default rage_counter_special_attack 																									= 0;

	private var lookTarget																													: CActor;
	private var savedTarget																													: CEntity;
	private var lookDistance																												: float;
	private var lastlooktime																												: float;
	private var headtarget																													: CEntity;
	private var lookTargetentity																											: CEntity;

	private var nekkerGuardianTargetDistance																								: float;

	private var altSignCasting 																												: bool;

	private var scene																														: CStoryScene;

	private var actors_in_rage																												: array<CActor>;

	private var unseen_blade_summon_countdown																								: float;

	default unseen_blade_summon_countdown																									= 305;

	var unseen_blade_death_count																											: int;

	default unseen_blade_death_count																										= 0;

	private var number_of_bruxae_slain																										: int;

	default number_of_bruxae_slain																											= 0;

	var ACS_Rage_Process																													: bool;

	default ACS_Rage_Process 																												= false;

	var ACS_Fire_Bear_FlameOn_Process																										: bool;

	default ACS_Fire_Bear_FlameOn_Process 																									= false;

	var ACS_Fire_Bear_Fireball_Process																										: bool;

	default ACS_Fire_Bear_Fireball_Process 																									= false;

	var ACS_Fire_Bear_FireLine_Process																										: bool;

	default ACS_Fire_Bear_FireLine_Process 																									= false;

	var ACS_Fire_Bear_Meteor_Process																										: bool;

	default ACS_Fire_Bear_Meteor_Process 																									= false;

	var ACS_SpearWhirlProcess																												: bool;

	default ACS_SpearWhirlProcess 																											= false;

	var ACS_Knightmare_Shout_Process																										: bool;

	default ACS_Knightmare_Shout_Process 																									= false;

	var ACS_Knightmare_Igni_Process																											: bool;

	default ACS_Knightmare_Igni_Process 																									= false;

	var ACS_She_Who_Knows_Throw_Projectile_Process																							: bool;

	default ACS_She_Who_Knows_Throw_Projectile_Process 																						= false;

	var ACS_Vampire_Monster_Spawn_Process																									: bool;

	default ACS_Vampire_Monster_Spawn_Process 																								= false;

	var ACS_Vampire_Monster_Flying_Process																									: bool;

	default ACS_Vampire_Monster_Flying_Process 																								= false;

	var weapon 																																: CItemEntity;

	var temp 																																: CEntityTemplate;
	var pos 																																: Vector;
	var rot 																																: EulerAngles;

	var lastPressedWithNostamina 																											: bool;
	default lastPressedWithNostamina 																										= false;

	private var fear_anim_names, finisher_fear_anim_names																					: array< name >;

	private var finisherActorTarget																											: CActor;
	private var ccomp																														: CComponent;
	private var ccompEnabled																												: bool;
	
	private var vACS_Ciri_Special_Attack 																									: cACS_Ciri_Special_Attack;

	private var vACS_Setup_Combat_Action_Light 																								: cACS_Setup_Combat_Action_Light;
	
	private var vACS_Setup_Combat_Action_Heavy 																								: cACS_Setup_Combat_Action_Heavy;
	
	private var movementAdjustorWerewolf																									: CMovementAdjustor; 
	private var ticketWerewolf 																												: SMovementAdjustmentRequestTicket; 

	private var movementAdjustorWerewolfWitcher																								: CMovementAdjustor; 
	private var ticketWerewolfWitcher 																										: SMovementAdjustmentRequestTicket; 

	private var snow_ent																													: CEntity;

	private var facemasktoggle 																												: bool;

	private var helmtoggle 																													: bool;
	
	public var ACS_Transformation_Savelock_ID																								: int;

	public var ACS_Meditation_Savelock_ID																									: int;

	public var ACS_Glide_Savelock_ID																										: int;

	private var MeditateCallTime																											: float;
	private var MeditateDoubleTap 																											: bool;

	event OnSpawned( spawnData : SEntitySpawnData )
	{
		this.CreateAttachment( thePlayer );	
		
		ACS_INIT_FUNCTION();

		ACS_Addon_States();

		this.PushState('ACS_BARADDUR');
	}

	function ACS_INIT_FUNCTION()
	{
		if(!thePlayer.IsCiri())
		{
			ACS_Init_Attempt();
			
			if(ACS_Enabled())
			{
				LookatSpawn();

				SnowSpawn();

				ACS_BehSwitchINIT();

				ACS_Player_RemoveTags();

				ACS_Init_Timers();

				register_extra_inputs();

				thePlayer.SetWalkToggle( true );	
			}
		}
	}

	function ACS_Init_Timers()
	{
		AddTimer( 'ACS_Spawn_Delay', 3, false );
		AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
		AddTimer('ACS_Human_Death_Fear', 2, true);
		AddTimer('Ice_Breathe_Reset', 60, true);

		if ( ACS_MS_Enabled() && ACS_MS_Installed() )
		{
			AddTimer('ACS_ENFORCE_INPUTS', 1.5, false);
		}
		else
		{
			AddTimer('ACS_ENFORCE_INPUTS', 1.5, true);
		}
	}

	function ACS_Addon_States()
	{
		this.PushState('ACS_No_Glow');
		this.PushState('ACS_Facts');
	}

	function ACS_Player_RemoveTags()
	{
		GetWitcherPlayer().RemoveTag('ACS_BackSwords_Equipped');

		GetWitcherPlayer().RemoveTag('ACS_Armor_Equipped_Hit_Effects');

		GetWitcherPlayer().RemoveTag('ACS_Crach_Cape_Equipped');

		GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Sprinting');

		GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Running');

		GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Walking');

		if (FactsQuerySum("ACS_Helm_Equipped") > 0)
		{
			FactsRemove("ACS_Helm_Equipped");
		}

		if (FactsQuerySum("ACS_Armor_Equipped") > 0)
		{
			FactsRemove("ACS_Armor_Equipped");
		}
	}

	public timer function ACS_Spawn_Delay ( dt : float, id : int){ SpawnManager(); } 

	public timer function ACS_Set_Player_Scale ( dt : float, id : int){ ACS_Set_Player_Scale_Actual(); } 

	public timer function Remove_Player_Grow_Immediate ( dt : float, id : int){ RemoveTimer('Grow_Geralt_Immediate_Repeat'); AddTimer( 'ACS_Set_Player_Scale', 0.01, true );} 

	public timer function ACS_DetachBehaviorTimer ( dt : float, id : int){ ACS_EnemyBehDetach(); } 

	public timer function ACS_ENFORCE_INPUTS ( dt : float, id : int){ register_extra_inputs(); } 

	public timer function ACS_Shield_Spawn_Delay ( dt : float, id : int){ vACS_Shield_Summon = new cACS_Shield_Summon in this; action_interrupt(); if (thePlayer.HasTag('ACS_Size_Adjusted')) {Grow_Geralt_Immediate_Fast(); thePlayer.RemoveTag('ACS_Size_Adjusted'); }vACS_Shield_Summon.Axii_Persistent_Shield_Summon(); } 

	public timer function ACS_Embers_Timer ( dt : float, id : int){ EmbersIndicator(); } 

	public timer function ACS_Embers_Particles_Timer ( dt : float, id : int){ EmbersParticlesIndicator(); } 

	public timer function ACS_ResetAnimation ( dt: float, id : int){ if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();} } 

	public timer function ACS_ResetAnimation_On_Death ( dt: float, id : int){ thePlayer.ClearAnimationSpeedMultipliers(); } 
	
	public timer function ACS_dodge_timer ( dt : float, id : int) { dodge_timer_actual(); } 
	
	public timer function ACS_dodge_timer_slideback ( dt : float, id : int) { dodge_timer_slideback_actual();} 
	
	public timer function ACS_dodge_timer_wildhunt ( dt : float, id : int) { dodge_timer_wildhunt_actual(); } 

	public timer function ACS_dodge_timer_fire ( dt : float, id : int) { dodge_timer_fire_actual(); } 

	public timer function ACS_dodge_timer_mage ( dt : float, id : int) { dodge_timer_mage_actual(); } 

	public timer function ACS_dodge_timer_dolphin ( dt : float, id : int) { dodge_timer_dolphin_actual(); } 

	public timer function ACS_dodge_timer_explosion ( dt : float, id : int) { dodge_timer_explosion_actual(); } 

	public timer function ACS_dodge_timer_fountain_portal ( dt : float, id : int) { dodge_timer_fountain_portal_actual(); } 

	public timer function ACS_dodge_timer_iris ( dt : float, id : int) { dodge_timer_iris_actual(); } 

	public timer function ACS_dodge_timer_lightning ( dt : float, id : int) { dodge_timer_lightning_actual(); } 
	
	public timer function ACS_hide_timer ( dt : float, id : int) { thePlayer.SetVisibility( false ); } 

	public timer function ACS_reveal_timer ( dt : float, id : int) { thePlayer.SetVisibility( true ); } 

	public timer function ACS_jump_attack_reveal_timer ( dt : float, id : int) { Jump_Attack_Reveal_Actual(); } 
	
	public timer function ACS_dodge_timer_attack ( dt : float, id : int) { dodge_timer_attack_actual(); } 
	
	public timer function ACS_dodge_timer_end ( dt : float, id : int) { dodge_timer_end_actual();} 
	
	public timer function ACS_bruxa_bite_delay ( dt : float, id : int) { bruxa_bite(); } 
	
	public timer function ACS_blood_suck_victim_paralyze ( dt : float, id : int) {blood_suck_victim_paralyze_actual();} 
	
	public timer function ACS_bruxa_blood_suck_repeat ( dt : float, id : int) {bruxa_blood_suck_repeat_actual();} 
	
	public timer function ACS_bruxa_tackle ( dt : float, id : int) { bruxa_tackle_actual(); } 

	public timer function ACS_Umbral_Slash_End ( dt : float, id : int) { Umbral_Slash_End_Actual(); } 

	public timer function ACS_Umbral_Slash_End_Effect_Repeat ( dt : float, id : int) { ACS_Umbral_Slash_End_Effect(); } 

	public timer function ACS_Umbral_Slash_End_Effect_Repeat_Stop ( dt : float, id : int) { RemoveTimer('ACS_Umbral_Slash_End_Effect_Repeat'); } 

	public timer function ACS_Revert_Env ( dt : float, id : int) { for (i = 0; i < 10000; i+=1) {DeactivateEnvironment(i, 1.f);} DeactivateEnvironment(envID, 1.f); } 

	public timer function ACS_Umbral_Slash_End_Damage ( dt : float, id : int) { ACS_Umbral_Slash_End_Damage_Actual(); } 
	
	public timer function ACS_alive_check ( dt : float, id : int) {alive_check_actual();} 
	
	public timer function ACS_Shout ( dt: float, id : int) { thePlayer.PlayEffectSingle('shout'); thePlayer.StopEffect('shout'); } 

	public timer function ACS_Shout_Stop ( dt: float, id : int) { thePlayer.StopEffect('shout'); } 

	public timer function ACS_Blood_Spray ( dt: float, id : int) { ACS_Blood_Spray_Actual(); } 

	public timer function ACS_ACS_Blood_Spray_Stop ( dt: float, id : int) { ACS_Stop_Blood_Spray_Actual(); } 
	
	public timer function ACS_portable_aard ( dt : float, id : int){ACS_Giant_Shockwave();} 
	
	public timer function ACS_wraith ( dt : float, id : int){ wraith_actual(); } 

	public timer function ACS_Gliding(deltaTime : float , id : int){ gliding_actual(); }
	
	public timer function ACS_collision_delay ( dt : float, id : int){ thePlayer.EnableCollisions(true); } 
	
	public timer function ACS_bruxa_camo_npc_reaction ( dt : float, id : int){ NPC_Fear_Reaction_Geralt(); } 
	
	public timer function ACS_npc_fear_reaction ( dt : float, id : int){ NPC_Fear_Reaction(); } 

	public timer function ACS_Human_Death_Fear ( dt : float, id : int){ NPC_Death_Fear_Reaction(); } 

	public timer function ACS_Bruxa_Camo_Sonar_Timer ( dt : float, id : int){ ACS_Bruxa_Camo_Sonar_Timer_Actual(); } 

	public timer function ACS_ShootBowMoving ( dt : float, id : int){ geraltShootBowMoving(); } 

	public timer function ACS_ShootBowStationary ( dt : float, id : int){ geraltShootBowStationary(); } 

	public timer function ACS_Arrow_Create_Delay ( dt : float, id : int){ ACS_Arrow_Create(); PlayBowAnim_Reset();} 

	public timer function ACS_Arrow_Shoot_Delay ( dt : float, id : int){ ACS_Shoot_Bow(); } 

	public timer function ACS_ShootBowToIdle ( dt : float, id : int){ PlayBowAnim_ShootToIdle(); } 

	public timer function ACS_ShootCrossbowToIdle ( dt : float, id : int){ PlayCrossbowAnim_ShootToIdle(); } 

	public timer function ACS_ShootCrossbowToAim ( dt : float, id : int){ PlayCrossbowAnim_ShootToAim(); } 
	
	public timer function ACS_HijackMoveForward(deltaTime : float , id : int){HijackMoveForwardActual();}
	
	public timer function ACS_Weapon_Summon_Delay(deltaTime : float , id : int){sword_summon_effect();}

	public timer function ACS_Dagger_Summon_Delay(deltaTime : float , id : int){dagger_summon_effect();}

	public timer function ACS_Yrden_Sidearm_Summon_Delay(deltaTime : float , id : int){yrden_sidearm_summon_effect();}
	
	public timer function ACS_ExplorationDelay(deltaTime : float , id : int){ACS_ExplorationDelay_actual();}

	public timer function ACS_WeaponEquipDelay(deltaTime : float , id : int){ACS_RandomWeaponEquipInit();}

	public timer function ACS_HeadbuttDamage(deltaTime : float , id : int){HeadbuttDamageActual();}

	public timer function ACS_PushDamage(deltaTime : float , id : int){PushDamageActual();}

	public timer function ACS_KickDamage(deltaTime : float , id : int){KickDamageActual();}

	public timer function ACS_ShieldEntityDamage(deltaTime : float , id : int){ShieldEntityDamageActual();}

	public timer function ACS_ShieldEntityDamage_2(deltaTime : float , id : int){ShieldEntityDamageActual();}

	public timer function ACS_ShieldEntityDamageShort(deltaTime : float , id : int){ShieldEntityDamageShortActual();}

	public timer function ACS_Forest_God_Spikes(deltaTime : float , id : int){ACS_Forest_God_Spikes_Actual();}

	public timer function ACS_Forest_God_Demonic_Effect(deltaTime : float , id : int){forest_god_demonic_effect_actual();}

	public timer function ACS_Bruxa_Scream_Release_Delay(deltaTime : float , id : int){ACS_Bruxa_Scream_Release();}

	public timer function ACS_Water_Aard_Release_Repeat(deltaTime : float , id : int){ACS_Water_Aard_Release();}

	public timer function ACS_Water_Aard_Release_Stop(deltaTime : float , id : int){RemoveTimer('ACS_Water_Aard_Release_Repeat');}

	public timer function ACS_Finisher_Unblock_Action(deltaTime : float , id : int){finisherUnblockAction();}

	public timer function ACS_Death_Delay_Animation(deltaTime : float , id : int){Death_Delay_Animation_Actual();}

	public timer function ACS_Dagger_Destroy_Timer(deltaTime : float , id : int){ACS_Dagger_Destroy();}

	public timer function ACS_Yrden_Sidearm_Destroy_Timer(deltaTime : float , id : int){ACS_Yrden_Sidearm_Destroy();}

	public timer function ACS_Yrden_Sidearm_Destroy_Actual_Timer(deltaTime : float , id : int){ACS_Yrden_Sidearm_DestroyActual();}

	public timer function Gerry_Death_Scene( deltaTime : float , id : int){Gerry_Death_Scene_Actual();}

	public timer function KillGerry(deltaTime : float , id : int){thePlayer.Kill( 'ACS_Debug', true );theSound.EnterGameState(ESGS_Movie);}

	public timer function ACSFireBearFlameOnDelay(deltaTime : float , id : int){SetFireBearFlameOnProcess(false);}

	public timer function ACSFireBearFireLineDelay(deltaTime : float , id : int){ACS_Bear_FireLines();}

	public timer function ACSFireBearFireballLeftDelay(deltaTime : float , id : int){ACS_Bear_FireballLeft();}

	public timer function ACSFireBearFireballRightDelay(deltaTime : float , id : int){ACS_Bear_FireballRight();}

	public timer function DropBearSummon(deltaTime : float , id : int){ACS_dropbearsummon();}

	public timer function DropBearMeteor(deltaTime : float , id : int){ACS_dropbearmeteor();}

	public timer function DropBearMeteorAscend(deltaTime : float , id : int){ACS_FireBearMeteorAscend();}

	public timer function DropBearMeteorStart(deltaTime : float , id : int){SetFireBearFireLineProcess(false); SetFireBearFireballProcess(false); ACS_dropbearmeteorstart();}

	public timer function KnightmareEternumShout(deltaTime : float , id : int){ACS_KnightmareEternumShoutActual();}

	public timer function KnightmareEternumIgni(deltaTime : float , id : int){ACS_KnightmareEternumIgniActual();}

	public timer function ResetKnightmareEternumShoutProcess(deltaTime : float , id : int){SetKnightmareShoutProcess(false);}

	public timer function ResetKnightmareEternumIgniProcess(deltaTime : float , id : int){SetKnightmareIgniProcess(false);}

	public timer function Manual_Combat_Control_Remove(deltaTime : float , id : int){thePlayer.RemoveTag('ACS_Manual_Combat_Control');}

	public timer function SheWhoKnowsTeleportStart(deltaTime : float , id : int){ACS_SheWhoKnowsTeleportStartActual();}

	public timer function SheWhoKnowsTeleport(deltaTime : float , id : int){ACS_SheWhoKnowsTeleportActual();}

	public timer function SheWhoKnowsHide(deltaTime : float , id : int){ACS_SheWhoKnowsHideActual();}

	public timer function SheWhoKnowsShow(deltaTime : float , id : int){ACS_SheWhoKnowsShowActual();}

	public timer function SheWhoKnowsProjectileVolley1(deltaTime : float , id : int){ACS_SheWhoKnowsProjectileLaunch();}

	public timer function SheWhoKnowsProjectileVolley2(deltaTime : float , id : int){ACS_SheWhoKnowsProjectileLaunch();}

	public timer function SheWhoKnowsProjectileVolley3(deltaTime : float , id : int){ACS_SheWhoKnowsProjectileLaunch();}

	public timer function SheWhoKnowsProjectileSingle(deltaTime : float , id : int){ACS_SheWhoKnowsProjectileLaunchSingle();}

	public timer function SheWhoKnowsProjectileSingleStop(deltaTime : float , id : int){ACS_SheWhoKnowsProjectileLaunchSingleStop();}

	public timer function VampireMonsterDiveCancel(deltaTime : float , id : int){ACS_VampireMonsterDiveCancelActual();}

	public timer function VampireMonsterFlyAttack(deltaTime : float , id : int){ACS_VampireMonsterFlyAttackActual();}

	public timer function VampireMonsterDive(deltaTime : float , id : int){ACS_VampireMonsterDiveActual();}

	public timer function VampireMonsterSetFlyingProcessFalse(deltaTime : float , id : int){SetVampireMonsterFlyingProcess(false);}

	public timer function VampireMonsterSetSpawnProcessFalse(deltaTime : float , id : int){SetVampireMonsterSpawnProcess(false);}

	public timer function VampireMonsterSwarmAttackDamage(deltaTime : float , id : int){ACS_VampireMonsterSwarmAttackDamage();}

	public timer function VampireMonsterFlyAttackDamage(deltaTime : float , id : int){ACS_VampireMonsterFlyAttackDamage();}

	public timer function VampireMonsterCancel(deltaTime : float , id : int){ACS_VampireMonsterCancelActual();}

	public timer function VampireMonsterTeleport(deltaTime : float , id : int){ACS_VampireMonsterTeleportActual();}

	public timer function ACS_Flying_Anim(deltaTime : float , id : int){ACSFlyingAnimActual();}

	public timer function ACS_Flying_Anim_Stop(deltaTime : float , id : int){RemoveTimer('ACS_Flying_Anim');}

	public timer function Witch_Hunter_Throw_Bomb_Delay_Timer(deltaTime : float , id : int){Witch_Hunter_Throw_Bomb_Delay();}

	public timer function Witch_Hunter_Dimeritium_Sign_Restore(deltaTime : float , id : int){thePlayer.StopEffect('dimeritium_hit_electricity'); thePlayer.StopEffect('dimeritium_hit'); thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Dimeritium');}

	public timer function Centipede_Green_Glow(deltaTime : float , id : int){GetACSEnemy().StopEffect('death_glow'); GetACSEnemy().PlayEffect('death_glow');}

	public timer function Ice_Breathe_Reset(deltaTime : float , id : int){ACS_Ice_Breathe_Destroy();ACS_Ice_Breathe_Entity_RemoveTag();}

	public timer function ACS_WildHuntRiders_DeactivateFrostEffect(deltaTime : float , id : int){ACSWildHuntRiders_DeactivateFrostEffect_Actual();}

	public timer function ACS_WildHuntRiders_Destroy(deltaTime : float , id : int){ACSWildHuntRiders_Destroy();}

	public timer function RatMageSummonRats(deltaTime : float , id : int){ACS_RatMageSummonRatsActual();}

	public timer function RatMageProjectile(deltaTime : float , id : int){ACS_RatMageProjectileActual();}

	public timer function ACS_Eredin_Bossfight_Spawn_Delay(deltaTime : float , id : int){ACS_spawneredin();}

	public timer function ACS_Eredin_SetVisibility(deltaTime : float , id : int){GetACSEredin().SetVisibility( true ); GetACSEredin().PlayEffectSingle('disappear'); GetACSEredin().StopEffect('disappear');}

	public timer function ACS_Eredin_Kill_Timer(deltaTime : float , id : int){GetACSEredin().Kill( 'ACSEredinGoodBye', false, GetACSEredin());}

	public timer function ACS_NightStalker_Kill_Timer(deltaTime : float , id : int){GetACSNightStalker().Kill( 'ACSNightStalkerGoodBye', false, GetACSNightStalker());}

	function SpawnManager()
	{
		ACS_Forest_God_Static_Spawner();
		
		ACS_Ice_Titans_Static_Spawner(); 
		
		ACS_Fire_Bear_Altar_Static_Spawner(); 
		
		ACS_Knightmare_Static_Spawner();

		ACS_SheWhoKnows_Static_Spawner();

		ACS_BigLizard_Static_Spawner();

		ACS_Rat_Mage_Static_Spawner();

		ACS_Mage_Static_Spawner();

		ACS_Cloak_Vamp_Static_Spawner();

		ACS_XenoTyrantEgg_Static_Spawner();
	}

	function altSignCastingThing()
	{
		if(theGame.GetInGameConfigWrapper().GetVarValue('Gameplay', 'EnableAlternateSignCasting') == "1")
		{
			altSignCasting = true;
		}	
		else
		{
			altSignCasting = false;
		}
	}

	function GetIsAltSignCasting() : bool
	{
		return altSignCasting;
	}

	function GetIsAltSignCastingPressed() : bool
	{
		return altSignCasting  &&  theInput.IsActionPressed('CastSign');
	}

	function SnowSpawn()
	{
		temp = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\fx\acs_ice_breathe.w2ent", true);

		snow_ent = theGame.CreateEntity(temp, thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation());

		snow_ent.CreateAttachment( thePlayer, 'blood_point', Vector( 0, 0, 0 ), EulerAngles(0,0,90) );

		((CActor)snow_ent).SetImmortalityMode( AIM_Invulnerable, AIC_Default ); 
		((CActor)snow_ent).SetCanPlayHitAnim(false); 
		((CActor)snow_ent).AddBuffImmunity_AllNegative('acs_snow_entity_buff_all_negative', true); 
		((CActor)snow_ent).AddBuffImmunity_AllCritical('acs_snow_entity_buff_all_critical', true); 

		snow_ent.AddTag('acs_snow_entity');
	}

	function LookatSpawn()
	{
		temp = (CEntityTemplate) LoadResource( "fx_dummy_entity" );
		pos = theCamera.GetCameraPosition() + VecFromHeading(theCamera.GetCameraHeading()) * 7;
		rot = VecToRotation(thePlayer.GetWorldPosition() - pos);
		headtarget = theGame.CreateEntity(temp, pos, rot);

		((CActor)headtarget).SetImmortalityMode( AIM_Invulnerable, AIC_Default ); 
		((CActor)headtarget).SetCanPlayHitAnim(false); 
		((CActor)headtarget).AddBuffImmunity_AllNegative('acs_lookat_entity_buff', true); 

		headtarget.AddTag('acs_lookat_entity');

		((CActor)thePlayer).DisableLookAt();
		((CActor)thePlayer).EnableDynamicLookAt(GetACSLookatEntity(), 65535);
	}

	function LookatLoop()
	{
		var lookatactors 									: array<CActor>;
		var lookatents										: array<CGameplayEntity>;
		var i												: int;
		var curtime 										: float;
		var npccount 										: int;
		var targetpos 										: Vector;
		var camerapos 										: Vector;
		var camhead 										: Vector;
		var playerpos										: Vector;
		var interactionTarget								: CInteractionComponent;
		var tempTarget										: CGameplayEntity;
		var gameLightComp, gameInteractComp 				: CComponent;
		var ents											: array<CGameplayEntity>;

		if(
		!thePlayer.IsUsingVehicle() 
		&& !thePlayer.IsUsingHorse() 
		)
		{
			if (
			thePlayer.IsInCombat()
			)
			{
				if (!thePlayer.HasTag('ACS_Is_In_Combat_Lookat'))
				{
					((CActor)thePlayer).DisableLookAt();

					thePlayer.RemoveTag('ACS_Is_Out_Of_Combat_Lookat');

					thePlayer.AddTag('ACS_Is_In_Combat_Lookat');
				}

				lookDistance = 4.5;

				curtime = theGame.GetEngineTimeAsSeconds();

				lookatactors.Clear();

				lookatactors = thePlayer.GetNPCsAndPlayersInRange( lookDistance, 50, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

				for(i = 0; i < lookatactors.Size(); i += 1)
				{
					if (lookatactors.Size() > 0)
					{
						if(
						lookatactors[i]
						&& lookatactors[i].IsAlive()
						//&& ACS_AttitudeCheck ( (CActor)lookatactors[i] )
						&& (lookatactors[i] == (CActor)( thePlayer.GetTarget() ) || lookatactors[i] == (CActor)( thePlayer.moveTarget ))
						)
						{
							if(curtime > lastlooktime + 1 )
							{
								lookTargetentity = lookatactors[i];
								lastlooktime = theGame.GetEngineTimeAsSeconds();
								break;
							}
						}

						if(lookTargetentity != savedTarget)
						{
							((CActor)thePlayer).DisableLookAt();
							((CActor)thePlayer).EnableDynamicLookAt(lookTargetentity, 999);
						}
					
						savedTarget = lookTargetentity;
					}
					else if (lookatactors.Size() == 0)
					{
						((CActor)thePlayer).DisableLookAt();
						/*
						if(GetACSLookatEntity() != savedTarget)
						{
							((CActor)thePlayer).DisableLookAt();
							((CActor)thePlayer).EnableDynamicLookAt(GetACSLookatEntity(), 999);
						}
					
						savedTarget = GetACSLookatEntity();
						*/
					}
				}
			}
			else
			{
				if (!thePlayer.HasTag('ACS_Is_Out_Of_Combat_Lookat'))
				{
					((CActor)thePlayer).DisableLookAt();

					thePlayer.RemoveTag('ACS_Is_In_Combat_Lookat');

					thePlayer.AddTag('ACS_Is_Out_Of_Combat_Lookat');
				}

				if (thePlayer.IsInInterior())
				{
					if (!thePlayer.HasTag('ACS_Is_Inside_Disable_Lookat'))
					{
						((CActor)thePlayer).DisableLookAt();

						thePlayer.RemoveTag('ACS_Is_Outside_Disable_Lookat');

						thePlayer.AddTag('ACS_Is_Inside_Disable_Lookat');
					}

					lookDistance = 4.5;

					curtime = theGame.GetEngineTimeAsSeconds();

					lookatents.Clear();

					FindGameplayEntitiesInRange(lookatents, thePlayer, lookDistance, 50, ,FLAG_ExcludePlayer, ,);

					for(i = 0; i < lookatents.Size(); i += 1)
					{
						if (lookatents.Size() > 0)
						{
							gameLightComp = lookatents[i].GetComponentByClassName('CGameplayLightComponent');

							gameInteractComp = lookatents[i].GetComponentByClassName('CInteractionComponent');

							if(
							(CNewNPC)lookatents[i]
							|| (COilBarrelEntity)lookatents[i]
							|| gameLightComp
							|| gameInteractComp
							|| (W3AnimationInteractionEntity)lookatents[i]
							|| (CInteractiveEntity)lookatents[i]
							|| (W3NoticeBoard)lookatents[i]
							|| (W3FastTravelEntity)lookatents[i]
							|| (W3SmartObject)lookatents[i]
							|| (W3ItemRepairObject)lookatents[i]
							|| (W3AlchemyTable)lookatents[i]
							|| (W3Stables)lookatents[i]
							|| (W3LockableEntity)lookatents[i] 
							|| (W3Poster)lookatents[i]
							|| (W3LadderInteraction)lookatents[i]
							)
							{
								if(curtime > lastlooktime + 1 )
								{
									lookTargetentity = lookatents[i];
									lastlooktime = theGame.GetEngineTimeAsSeconds();
									break;
								}
							}

							if(lookTargetentity != savedTarget)
							{
								((CActor)thePlayer).DisableLookAt();
								((CActor)thePlayer).EnableDynamicLookAt(lookTargetentity, 999);
							}
						
							savedTarget = lookTargetentity;
						}
						else if (lookatents.Size() == 0)
						{
							if(GetACSLookatEntity() != savedTarget)
							{
								((CActor)thePlayer).EnableDynamicLookAt(GetACSLookatEntity(), 999);
							}
						
							savedTarget = GetACSLookatEntity();
						}
					}
				}
				else
				{
					savedTarget = GetACSLookatEntity();

					if (!thePlayer.HasTag('ACS_Is_Outside_Disable_Lookat'))
					{
						((CActor)thePlayer).DisableLookAt();

						thePlayer.RemoveTag('ACS_Is_Inside_Disable_Lookat');

						thePlayer.AddTag('ACS_Is_Outside_Disable_Lookat');
					}

					((CActor)thePlayer).EnableDynamicLookAt(GetACSLookatEntity(), 999);
				}
			}		
		}
		else
		{
			((CActor)thePlayer).DisableLookAt();
		}

		camerapos = theCamera.GetCameraPosition();
		camhead = VecFromHeading(theCamera.GetCameraHeading());
		playerpos = GetWorldPosition();
		targetpos = camerapos + camhead * 10;
	
		if(camerapos.Z > playerpos.Z + 1.85)
		{
			targetpos.Z = camerapos.Z - 4;
		}
		if(camerapos.Z < playerpos.Z + 1.3)
		{
			targetpos.Z = camerapos.Z + 4;
		}

		(GetACSLookatEntity()).TeleportWithRotation(targetpos, thePlayer.GetWorldRotation());
	}

	function register_extra_inputs()
	{
		if (!thePlayer.IsCiri())
		{
			if ( !theGame.IsDialogOrCutscenePlaying() 
			&& !thePlayer.IsInNonGameplayCutscene() 
			&& !thePlayer.IsInGameplayScene() 
			&& !theGame.IsCurrentlyPlayingNonGameplayScene()
			&& !theGame.IsFading()
			&& !theGame.IsBlackscreen()
			&& !theGame.IsPaused() 
			&& !theGame.GetPhotomodeEnabled() 
			&& !thePlayer.IsInCutsceneIntro() 
			)
			{
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'MovementDoubleTapW' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'MovementDoubleTapS' ); 

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'MovementDoubleTapA' ); 

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'MovementDoubleTapD' ); 

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Dodge' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'CastSign' );

				theInput.RegisterListener( this, 'OnCastSign', 'CastSign' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'AltQuenCasting' );

				theInput.RegisterListener( this, 'OnAltQuen', 'AltQuenCasting' );

				theInput.RegisterListener( this, 'OnMovementDoubleTapW', 'MovementDoubleTapW' );

				theInput.RegisterListener( this, 'OnMovementDoubleTapS', 'MovementDoubleTapS' ); 

				theInput.RegisterListener( this, 'OnMovementDoubleTapA', 'MovementDoubleTapA' ); 

				theInput.RegisterListener( this, 'OnMovementDoubleTapD', 'MovementDoubleTapD' ); 

				theInput.RegisterListener( this, 'OnMoveForward', 'GI_AxisLeftY' );

				//theInput.RegisterListener( this, 'OnMoveBackward', 'GI_AxisRightY' );

				theInput.RegisterListener( this, 'OnMoveSide', 'GI_AxisLeftX' );

				theInput.RegisterListener( this, 'OnJump', 'Jump' );

				//theInput.RegisterListener( this, 'OnMoveSideLeft', 'GI_AxisRightX' );

				theInput.RegisterListener( this, 'OnCbtDodge', 'Dodge' );

				theInput.RegisterListener(this, 'OnBruxaBite', 'BruxaBite');

				theInput.RegisterListener(this, 'OnACSFacemaskToggle', 'ACSFacemaskToggle');

				theInput.RegisterListener(this, 'OnACSHelmToggle', 'ACSHelmToggle');

				theInput.RegisterListener(this, 'OnACSShoulderToggle', 'ACSShoulderToggle');

				///////////////////////////////////////////////////////////////////////////////////////////////////////////

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'AttackHeavy' );

				theInput.RegisterListener( this, 'OnCbtAttackHeavy', 'AttackHeavy' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'AttackWithAlternateLight' );

				theInput.RegisterListener( this, 'OnCbtAttackWithAlternateLight', 'AttackWithAlternateLight' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'AttackWithAlternateHeavy' );

				theInput.RegisterListener( this, 'OnCbtAttackWithAlternateHeavy', 'AttackWithAlternateHeavy' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'AttackLight' );

				theInput.RegisterListener( this, 'OnCbtAttackLight', 'AttackLight' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SpecialAttackLight' );

				theInput.RegisterListener( this, 'OnCbtSpecialAttackLight', 'SpecialAttackLight' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SpecialAttackWithAlternateLight' );

				theInput.RegisterListener( this, 'OnCbtSpecialAttackWithAlternateLight', 'SpecialAttackWithAlternateLight' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SpecialAttackWithAlternateHeavy' );

				theInput.RegisterListener( this, 'OnCbtSpecialAttackWithAlternateHeavy', 'SpecialAttackWithAlternateHeavy' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'ToggleSigns' );

				theInput.RegisterListener( this, 'OnToggleSigns', 'ToggleSigns' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'SpecialAttackHeavy' );

				theInput.RegisterListener( this, 'OnCbtSpecialAttackHeavy', 'SpecialAttackHeavy' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'CbtRoll' );

				theInput.RegisterListener( this, 'OnCbtRoll', 'CbtRoll' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'LockAndGuard' );

				theInput.RegisterListener( this, 'OnCbtLockAndGuard', 'LockAndGuard' );

				//theInput.UnregisterListener( thePlayer.GetInputHandler(), 'Guard' );

				//theInput.RegisterListener( this, 'OnCommGuard', 'Guard' );
			}
		}
	}

	private function AltCastSign(signType : ESignType)
	{
		var signSkill : ESkill;	
		
		if( !thePlayer.GetBIsInputAllowed() )
		{	
			return;
		}
	
		if( !thePlayer.IsActionAllowed(EIAB_Signs) || GetWitcherPlayer().IsSignBlocked(signType) )
		{				
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_Signs);
			return;
		}
		if ( thePlayer.IsHoldingItemInLHand() && thePlayer.IsUsableItemLBlocked() )
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_Undefined, false, false, true);
			return;
		}

		signSkill = SignEnumToSkillEnum(signType);
		if( signSkill != S_SUndefined )
		{
			if(!thePlayer.CanUseSkill(signSkill))
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_Signs, false, false, true);
				return;
			}
		
			if( thePlayer.HasStaminaToUseSkill( signSkill, false ) )
			{
				GetWitcherPlayer().SetEquippedSign(signType);				
				//thePlayer.SetupCombatAction( EBAT_CastSign, BS_Pressed );
				if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
				{
					Grow_Geralt_Immediate_Fast(); //ACS

					thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
				}

				ACS_Setup_Combat_Action_CastSign();
			}
			else
			{
				thePlayer.SoundEvent("gui_no_stamina");
			}
		}
	}
	
	/*
	public function ApplyCastSettings()
	{
		ApplyGamepadTriggerEffect( thePlayer.GetEquippedSign() );
	}

	private function ApplyGamepadTriggerEffect( type : ESignType )
	{
		var mode : int;
		var param : array<Vector>;
		var cur_sign : W3SignEntity;
		var sign_skill : ESkill;

		sign_skill = SignEnumToSkillEnum( type );

		if( !thePlayer.CanUseSkill(sign_skill)  ||  !thePlayer.HasStaminaToUseSkill(sign_skill,false) )
		{
			theGame.SetTriggerEffect( 1, GTFX_Off, param );
			theGame.SetTriggerEffect( 0, GTFX_Off, param );
			if(theInput.IsActionPressed('CastSign'))
			{
				lastPressedWithNostamina = true;
			}
			return;
		}
		if(lastPressedWithNostamina && !theInput.IsActionPressed('CastSign'))
		{
			lastPressedWithNostamina = false;
		}

		if(lastPressedWithNostamina)
		{
			return;
		}

		if( type == ST_Igni  &&  thePlayer.IsCurrentSignChanneled() )
		{
			mode = GTFX_MultiVibration;
			
			param.Resize( 10 );
			param[0].Y = 0.3; 
			param[0].X = 0.0;
			param[1].X = 0.0;
			param[2].X = 0.0;
			param[3].X = 0.0;
			param[4].X = 0.0;
			param[5].X = 0.0;
			param[6].X = 0.8;
			param[7].X = 0.8;
			param[8].X = 0.8;
			param[9].X = 0.9;

			theGame.SetTriggerEffect( 1, mode, param );
			return;
		}

		if( type == ST_Quen  &&  thePlayer.HasBuff( EET_BasicQuen ) )
		{
			mode = GTFX_MultiVibration;
			
			param.Resize( 10 );
			param[0].Y = 0.5; 
			param[0].X = 0.0;
			param[1].X = 0.0;
			param[2].X = 0.0;
			param[3].X = 0.0;
			param[4].X = 0.0;
			param[5].X = 0.0;
			param[6].X = 0.8;
			param[7].X = 0.8;
			param[8].X = 0.99;
			param[9].X = 0.99;

			theGame.SetTriggerEffect( 1, mode, param );
			return;
		}

		if( 	
			theGame.IsPaused() 
			|| theGame.GetPhotomodeEnabled() 
			|| theGame.IsDialogOrCutscenePlaying() 
			|| thePlayer.IsInCutsceneIntro() 
			|| theGame.IsCurrentlyPlayingNonGameplayScene()
			)
		{
			theGame.SetTriggerEffect( 1, GTFX_Off, param );
			theGame.SetTriggerEffect( 0, GTFX_Off, param );

			return;
		}

		mode = GTFX_Off;
		
		if( GetIsAltSignCasting() )
		{
			mode = GTFX_Vibration;
			
			param.Resize( 1 );
			param[0].X = 0.9; 
			param[0].Y = 0.1; 
			param[0].Z = 0.15; 

			theGame.SetTriggerEffect( 1, mode, param );
			
			if( GetIsAltSignCastingPressed() )
			{
				mode = GTFX_Weapon;

				param.Resize( 1 );
				param[0].X = 0.1; 
				param[0].Y = 0.5; 
				param[0].Z = 1.0; 
				
				theGame.SetTriggerEffect( 0, mode, param );
			}
			else
			{
				theGame.SetTriggerEffect( 0, GTFX_Off, param );
			}
		}
		else
		{
			if( type == ST_Aard )
			{
				mode = GTFX_MultiFeedback;
				
				param.Resize( 10 );
				param[0].X = 0.0;
				param[1].X = 0.0;
				param[2].X = 0.0;
				param[3].X = 0.1;
				param[4].X = 0.2;
				param[5].X = 0.2;
				param[6].X = 0.0;
				param[7].X = 0.0;
				param[8].X = 0.4;
				param[9].X = 0.4;
			}
			else if( type == ST_Axii )
			{
				mode = GTFX_Vibration;
				
				param.Resize( 1 );
				param[0].X = 0.8; 
				param[0].Y = 0.15; 
				param[0].Z = 0.2; 
			}
			else if( type == ST_Igni )
			{
				mode = GTFX_Weapon;

				param.Resize( 1 );
				param[0].X = 0.5; 
				param[0].Y = 0.7; 
				param[0].Z = 1.0; 
			}
			else if( type == ST_Quen )
			{
				mode = GTFX_Vibration;
				
				param.Resize( 1 );
				param[0].X = 0.8; 
				param[0].Y = 0.25; 
				param[0].Z = 0.7; 
			}
			else if( type == ST_Yrden )
			{
				mode = GTFX_Vibration;
				
				param.Resize( 1 );
				param[0].X = 0.9; 
				param[0].Y = 0.5; 
				param[0].Z = 0.99; 
			}
			
			theGame.SetTriggerEffect( 1, mode, param );
			theGame.SetTriggerEffect( 0, GTFX_Off, param );
		}		

	}
	*/

	var restoreItemLAtEnd 		: bool;

	public timer function ACS_LightFiresTimer(deltaTime : float , id : int)
	{
		ACS_LightFires();
		//ACS_LightFireSources();
	}

	public timer function ACS_ExtinguishFiresTimer(deltaTime : float , id : int)
	{
		ACS_ExtinguishFires();
		//ACS_ExtinguishFireSources();
	}

	function ACS_LightFires()
	{
		var i : int;
		var ents : array<CGameplayEntity>;
		var gameplayLightComp, pointLightComp : CComponent;

		ents.Clear();
		
		FindGameplayEntitiesInRange(ents,thePlayer,15,2147483647,,FLAG_ExcludePlayer,, );
		
		for ( i = 0; i < ents.Size(); i+=1 )
		{
			gameplayLightComp = ents[i].GetComponentByClassName('CGameplayLightComponent');

			pointLightComp = ents[i].GetComponentByClassName('CPointLightComponent');

			if(gameplayLightComp)
			{
				if (((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(false);
				}
				else if (!((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(true);
				}
				

				if (!((CGameplayLightComponent)gameplayLightComp).IsLightOn())
				{
					((CGameplayLightComponent)gameplayLightComp).SetFadeLight(true);
				}
			}

			if (pointLightComp)
			{
				if (!ents[i].IsEffectActive('fire', false))
				{
					ents[i].PlayEffectSingle('fire');
				}

				if (!ents[i].IsEffectActive('light_on', false))
				{
					ents[i].PlayEffectSingle('light_on');
				}

				if (!ents[i].IsEffectActive('light_on_bob', false))
				{
					ents[i].PlayEffectSingle('light_on_bob');
				}
				
				((CPointLightComponent)pointLightComp).SetEnabled(true);
			}
		}
		
		if ( restoreItemLAtEnd )
		{
			thePlayer.OnUseSelectedItem();
			restoreItemLAtEnd = false;
		}
	}

	function ACS_LightFireSources()
	{
		var i : int;
		var ents : array<CGameplayEntity>;
		var gameplayLightComp, pointLightComp : CComponent;
		
		ents.Clear();
		
		FindGameplayEntitiesInRange(ents,thePlayer,100,999,,FLAG_ExcludePlayer,,'W3FireSource' );
		
		for ( i = 0; i < ents.Size(); i+=1 )
		{
			gameplayLightComp = ents[i].GetComponentByClassName('CGameplayLightComponent');

			if(gameplayLightComp)
			{
				if (((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(false);
				}
				else if (!((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(true);
				}
				

				if (!((CGameplayLightComponent)gameplayLightComp).IsLightOn())
				{
					((CGameplayLightComponent)gameplayLightComp).SetLight(true);
				}
			}
		}
		
		if ( restoreItemLAtEnd )
		{
			thePlayer.OnUseSelectedItem();
			restoreItemLAtEnd = false;
		}
	}

	function ACS_ExtinguishFires()
	{
		var i 										: int;
		var ents 									: array<CGameplayEntity>;
		var gameplayLightComp, pointLightComp 		: CComponent;
		var npcAnimatedComponent 					: CAnimatedComponent;
		
		ents.Clear();
		
		FindGameplayEntitiesInRange(ents,thePlayer,15,2147483647,,FLAG_ExcludePlayer,, );
		
		for ( i = 0; i < ents.Size(); i+=1 )
		{
			if (StrContains( ((CActor)(ents[i])).GetReadableName(), "torch" ) )
			{
				if (
					((CActor)(ents[i])).GetInventory().IsIdValid( ((CActor)(ents[i])).GetInventory().GetItemFromSlot('r_weapon') )
					|| ((CActor)(ents[i])).GetInventory().IsIdValid( ((CActor)(ents[i])).GetInventory().GetItemFromSlot('l_weapon') )
				)
				{
					npcAnimatedComponent = (CAnimatedComponent)((CActor)(ents[i])).GetComponentByClassName( 'CAnimatedComponent' );

					npcAnimatedComponent.PlaySlotAnimationAsync ( 'reaction_surprise_fwd', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );

					((CActor)(ents[i])).DropItemFromSlot('r_weapon');

					((CActor)(ents[i])).DropItemFromSlot('l_weapon');

					//((CActor)(ents[i])).SignalGameplayEvent( 'AI_GetOutOfTheWay' ); 
			
					//((CActor)(ents[i])).SignalGameplayEventParamObject( 'CollideWithPlayer', ((CActor)(ents[i])) ); 

					//theGame.GetBehTreeReactionManager().CreateReactionEvent( ((CActor)(ents[i])), 'BumpAction', 1, 1, 1, 1, false );
				}
			}

			gameplayLightComp = ents[i].GetComponentByClassName('CGameplayLightComponent');

			pointLightComp = ents[i].GetComponentByClassName('CPointLightComponent');

			if(gameplayLightComp)
			{
				if (((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(false);
				}
				else if (!((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(true);
				}

				if (((CGameplayLightComponent)gameplayLightComp).IsLightOn())
				{
					((CGameplayLightComponent)gameplayLightComp).SetFadeLight(false);
				}
			}

			if (pointLightComp)
			{
				if (ents[i].IsEffectActive('fire', false))
				{
					ents[i].StopEffect('fire');
				}

				if (ents[i].IsEffectActive('light_on', false))
				{
					ents[i].StopEffect('light_on');
				}

				if (ents[i].IsEffectActive('light_on_bob', false))
				{
					ents[i].StopEffect('light_on_bob');
				}

				((CPointLightComponent)pointLightComp).SetEnabled(false);
			}
		}
		
		if ( restoreItemLAtEnd )
		{
			thePlayer.OnUseSelectedItem();
			restoreItemLAtEnd = false;
		}
	}

	function ACS_ExtinguishFireSources()
	{
		var i : int;
		var ents : array<CGameplayEntity>;
		var gameplayLightComp, pointLightComp : CComponent;
		
		ents.Clear();
		
		FindGameplayEntitiesInRange(ents,thePlayer,15,999,,FLAG_ExcludePlayer,,'W3FireSource' );
		
		for ( i = 0; i < ents.Size(); i+=1 )
		{
			gameplayLightComp = ents[i].GetComponentByClassName('CGameplayLightComponent');

			if(gameplayLightComp)
			{
				if (((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(false);
				}
				else if (!((CGameplayLightComponent)gameplayLightComp).IsInteractive())
				{
					((CGameplayLightComponent)gameplayLightComp).SetInteractive(true);
				}

				if (((CGameplayLightComponent)gameplayLightComp).IsLightOn())
				{
					((CGameplayLightComponent)gameplayLightComp).SetLight(false);
				}
			}
		}

		if ( restoreItemLAtEnd )
		{
			thePlayer.OnUseSelectedItem();
			restoreItemLAtEnd = false;
		}
	}

	public timer function ACS_KillHorsesTimer(deltaTime : float , id : int)
	{
		ACS_KillHorses();
	}

	function ACS_KillHorses()
	{
		var actors    																																						: array<CActor>;
		var i         																																						: int;
		var actortarget																																						: CActor;
		var rev_ent																																							: CEntity;
	
		actors.Clear();

		actors = GetWitcherPlayer().GetNPCsAndPlayersInCone(6, VecHeading(GetWitcherPlayer().GetHeadingVector()), 60, 50, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (((CNewNPC)actortarget).GetNPCType() == ENGT_Quest)
				{
					return;
				}

				if (((CNewNPC)actortarget).IsHorse() && actortarget != thePlayer.GetHorseWithInventory())
				{
					actortarget.PlayEffectSingle('demonic_cast');
					actortarget.StopEffect('demonic_cast');

					((CActor)actortarget).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
					((CNewNPC)actortarget).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

					//((CNewNPC)actortarget).KillHorseAfter(0.1);

					((CNewNPC)actortarget).SetKinematic( false );
					//((CNewNPC)actortarget).SetAlive( false );
					//((CNewNPC)actortarget).GetComponentByClassName( 'CInteractionComponent' ).SetEnabled( false );
					((CNewNPC)actortarget).PlayEffectSingle( 'hit_ground' );
					((CNewNPC)actortarget).StopEffect('hit_ground');

					//((CNewNPC)actortarget).AddEffectDefault(EET_Ragdoll, thePlayer, "ACS_Ragdoll_Horse" );
					actortarget.EnableCharacterCollisions(false);

					actortarget.AddTag('ACS_GTFO_Horse');

					//rev_ent = (CEntity)theGame.CreateEntity( (CEntityTemplate)LoadResource(actortarget.GetReadableName(), true ), actortarget.GetWorldPosition(), actortarget.GetWorldRotation() );

					//((CActor)rev_ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );
					//((CNewNPC)rev_ent).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );

					//rev_ent.PlayEffectSingle('demonic_cast');
					//rev_ent.StopEffect('demonic_cast');

					//((CNewNPC)rev_ent).KillHorseAfter(0.01);
					//((CActor)rev_ent).EnableCharacterCollisions(false);

					RemoveTimer('ACS_TeleportHorsesTimer');
					AddTimer('ACS_TeleportHorsesTimer', 3, false);
				}
				else
				{
					if (actortarget.IsUsingVehicle()) 
					{
						actortarget.SignalGameplayEventParamInt( 'RidingManagerDismountHorse', DT_shakeOff | DT_fromScript);
					}
				}
			}
		}
	}

	public timer function ACS_TeleportHorsesTimer(deltaTime : float , id : int)
	{
		HorseTeleportation();
	}

	function HorseTeleportation()
	{	
		var i												: int;
		var ents 											: array<CActor>;

		ents.Clear();

		theGame.GetActorsByTag( 'ACS_GTFO_Horse', ents );	
		
		for( i = 0; i < ents.Size(); i += 1 )
		{
			((CNewNPC)ents[i]).SetVisibility( false );
			((CNewNPC)ents[i]).SetGameplayVisibility( false );
			((CNewNPC)ents[i]).SetKinematic( true );
			ents[i].Teleport(thePlayer.GetWorldPosition() + Vector(0,0,-200));
			//ents[i].DestroyAfter(1);
		}
	}

	function ACS_Setup_Combat_Action_CastSign()
	{
		var vACS_Setup_Combat_Action_CastSign : cACS_Setup_Combat_Action_CastSign;
		vACS_Setup_Combat_Action_CastSign = new cACS_Setup_Combat_Action_CastSign in this;

		vACS_Setup_Combat_Action_CastSign.Setup_Combat_Action_CastSign_Engage();

		if (
		(GetWitcherPlayer().GetEquippedSign() == ST_Igni
		|| GetWitcherPlayer().GetEquippedSign() == ST_Aard)
		&& thePlayer.HasStaminaToUseAction(ESAT_Ability, SkillEnumToName( SignEnumToSkillEnum( thePlayer.GetEquippedSign() ) ))
		)
		{
			RemoveTimer('ACS_KillHorsesTimer');
			AddTimer('ACS_KillHorsesTimer', 0.5, false);
		}
		else if (
		(GetWitcherPlayer().GetEquippedSign() == ST_Quen)
		&& thePlayer.HasStaminaToUseAction(ESAT_Ability, SkillEnumToName( SignEnumToSkillEnum( thePlayer.GetEquippedSign() ) ))
		)
		{
			if (ACS_Armor_Equipped_Check())
			{
				thePlayer.SoundEvent("magic_eredin_appear_disappear");
				thePlayer.PlayEffectSingle('eredin_disappear');
				thePlayer.StopEffect('eredin_disappear');
			}
		}
	}
	
	event OnCastSign( action : SInputAction )
	{
		var signSkill : ESkill;

		if (ACS_Transformation_Activated_Check())
		{
			if (ACS_Transformation_Werewolf_Check())
			{
				DisableWerewolf();
			}

			return false;
		}

		if ( theGame.IsFocusModeActive() 
		&& 
		(GetWitcherPlayer().GetEquippedSign() == ST_Igni
		|| GetWitcherPlayer().GetEquippedSign() == ST_Aard)
		)
		{
			if (ACS_can_fire_source())
			{
				ACS_Lights_Tutorial();

				ACS_refresh_fire_source_cooldown();

				if (GetWitcherPlayer().IsAnyWeaponHeld() && !GetWitcherPlayer().IsWeaponHeld('fist'))
				{
					thePlayer.OnMeleeForceHolster( true );
					thePlayer.OnRangedForceHolster( true );
				}

				theGame.GetBehTreeReactionManager().CreateReactionEventIfPossible( thePlayer, 'CastSignAction', 1, 1.75f, -1.f, -1, true );

				if (GetWitcherPlayer().GetEquippedSign() == ST_Igni)
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_ger_idle_sign_igni_light', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.875f) );

					if ( thePlayer.IsHoldingItemInLHand() )
					{
						thePlayer.OnUseSelectedItem( true );
						restoreItemLAtEnd = true;
					}

					RemoveTimer('ACS_LightFiresTimer');
					RemoveTimer('ACS_ExtinguishFiresTimer');

					AddTimer('ACS_LightFiresTimer', 1, false);
				}
				else if (GetWitcherPlayer().GetEquippedSign() == ST_Aard)
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'man_ger_idle_sign_aard_light', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.875f) );

					if ( thePlayer.IsHoldingItemInLHand() )
					{
						thePlayer.OnUseSelectedItem( true );
						restoreItemLAtEnd = true;
					}

					RemoveTimer('ACS_LightFiresTimer');
					RemoveTimer('ACS_ExtinguishFiresTimer');

					AddTimer('ACS_ExtinguishFiresTimer', 1, false);
				}
			}
			
			return false;
		}

		altSignCastingThing();

		if( altSignCasting )
		{
			//ApplyCastSettings(); 
		}
		
		if(altSignCasting && !theInput.LastUsedPCInput())
		{
			if(IsPressed( action ) && (theInput.GetActionValue( 'LockAndGuard' ) > 0) && !GetWitcherPlayer().IsCurrentSignChanneled()) 
			{
				AltCastSign(ST_Igni);
			}
			else if(IsPressed( action ))
			{
				thePlayer.BlockAction(EIAB_Interactions, 'NGE_CastSign_Block');
				thePlayer.BlockAction(EIAB_InteractionAction, 'NGE_CastSign_Block');
				thePlayer.BlockAction(EIAB_InteractionContainers, 'NGE_CastSign_Block');
			}
			else if(IsReleased( action ))
			{
				thePlayer.UnblockAction(EIAB_Interactions, 'NGE_CastSign_Block');
				thePlayer.UnblockAction(EIAB_InteractionAction, 'NGE_CastSign_Block');
				thePlayer.UnblockAction(EIAB_InteractionContainers, 'NGE_CastSign_Block');
			}
			
			return false;
		}
		
		
		if( !thePlayer.GetBIsInputAllowed() )
		{	
			return false;
		}
		
		if( IsPressed(action) )
		{
			if( !thePlayer.IsActionAllowed(EIAB_Signs) )
			{				
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_Signs);
				return false;
			}

 			if ( thePlayer.IsHoldingItemInLHand() && thePlayer.IsUsableItemLBlocked() )
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_Undefined, false, false, true);
				return false;
			}
			
			signSkill = SignEnumToSkillEnum( thePlayer.GetEquippedSign() );
			if( signSkill != S_SUndefined )
			{
				if(!thePlayer.CanUseSkill(signSkill))
				{
					thePlayer.DisplayActionDisallowedHudMessage(EIAB_Signs, false, false, true);
					return false;
				}
			
				if( thePlayer.HasStaminaToUseSkill( signSkill, false ) )
				{
					if( GetInvalidUniqueId() != thePlayer.inv.GetItemFromSlot( 'l_weapon' ) && !thePlayer.IsUsableItemLBlocked())
					{

						
						
					}
					//thePlayer.SetupCombatAction( EBAT_CastSign, BS_Pressed );

					if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
					{
						Grow_Geralt_Immediate_Fast(); //ACS

						thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
					}

					ACS_Setup_Combat_Action_CastSign();
				}
				else
				{
					thePlayer.SoundEvent("gui_no_stamina");
				}
			}			
		}
	}

	event OnAltQuen( action : SInputAction )
	{	
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if(altSignCasting && !theInput.LastUsedPCInput() && IsPressed( action ) && theInput.IsActionPressed('CastSign') && !GetWitcherPlayer().IsCurrentSignChanneled())
		{
			AltCastSign(ST_Quen);
		}
	}
	
	event OnCbtAttackWithAlternateLight( action : SInputAction )
	{
		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		{
			return false;
		}
	
		CbtAttackPC( action, false);
	}
	
	event OnCbtAttackWithAlternateHeavy( action : SInputAction )
	{
		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;

		if( theInput.IsActionPressed('Focus') )
		return false;
		
		CbtAttackPC( action, true);
	}
	
	function CbtAttackPC( action : SInputAction, isHeavy : bool )
	{
		var switchAttackType : bool;
		
		switchAttackType = ShouldSwitchAttackType();
		
		if ( !theInput.LastUsedPCInput() )
		{
			return;
		}
		
		if ( thePlayer.IsCiri() )
		{
			if ( switchAttackType != isHeavy) 
			{
				thePlayer.GetInputHandler().OnCbtCiriAttackHeavy(action);
			}
			else
			{
				OnCbtAttackLight(action);
			}
		}
		else
		{
			if ( switchAttackType != isHeavy) 
			{
				OnCbtAttackHeavy(action);
			}
			else
			{
				OnCbtAttackLight(action);
			}
		}
	}

	private function ShouldSwitchAttackType():bool
	{
		var outKeys : array<EInputKey>;	
		
		if ( theInput.LastUsedPCInput() )
		{		
			theInput.GetPCKeysForAction('PCAlternate',outKeys);
			if ( outKeys.Size() > 0 )
			{
				if ( theInput.IsActionPressed('PCAlternate') )
				{
					return true;
				}
			}
		}
		return false;
	}

	event OnCommSprint( action : SInputAction )
	{
		if( IsPressed( action ) )
		{
			thePlayer.SetSprintActionPressed(true);
			
			if ( thePlayer.rangedWeapon )
				thePlayer.rangedWeapon.OnSprintHolster();
		}
	}

	event OnCbtAttackLight( action : SInputAction )
	{
		var allowed, checkedFists 			: bool;

		if (ACS_Transformation_Activated_Check())
		{
			if( IsPressed(action) )
			{
				if( thePlayer.IsActionAllowed(EIAB_LightAttacks)  )
				{
					if (ACS_Transformation_Werewolf_Check())
					{
						ACS_Transformation_Werewolf_Light_Attacks();
					}
				}
			}

			return false;
		}
		
		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;

		if ( IsReleased( action )  )
		{
			RemoveTimer('SpearAttackRepeatWhirl');
			thePlayer.CancelHoldAttacks();
			return true;
		}
		
		if( IsPressed(action) )
		{
			altSignCastingThing();

			if(altSignCasting 
			&& !theInput.LastUsedPCInput() && theInput.IsActionPressed('CastSign' ) && !GetWitcherPlayer().IsCurrentSignChanneled())
			{
				AltCastSign(ST_Axii);
				return false;
			}


			if( thePlayer.IsActionAllowed(EIAB_LightAttacks)  )
			{
				if (thePlayer.GetBIsInputAllowed())
				{
					allowed = false;					
					
					if( thePlayer.GetCurrentMeleeWeaponType() == PW_Fists || thePlayer.GetCurrentMeleeWeaponType() == PW_None )
					{
						//if ( ACS_Enabled() ) { checkedFists = true; if(thePlayer.IsActionAllowed(EIAB_Fists)) {allowed = true;} ClawFistLightAttack(); return true; } //ACS
						checkedFists = true;
						if(thePlayer.IsActionAllowed(EIAB_Fists))
							allowed = true;
					}
					else if(thePlayer.IsActionAllowed(EIAB_SwordAttack))
					{
						checkedFists = false;
						allowed = true;
					}
					
					if(allowed)
					{
						Rage_Counter_Light_Attack_Manager(5);

						if ( ACS_Enabled() ) 
						{
							if( checkedFists)
							{
								ClawFistLightAttack(); //ACS
							}
							else
							{
								LightAttackSwitch(); //ACS
							}
						}
						else
						{
							thePlayer.SetupCombatAction( EBAT_LightAttack, BS_Pressed );
						}
					}
					else
					{
						if(checkedFists)
							thePlayer.DisplayActionDisallowedHudMessage(EIAB_Fists);
						else
							thePlayer.DisplayActionDisallowedHudMessage(EIAB_SwordAttack);
					}
				}
			}
			else  if ( !thePlayer.IsActionBlockedBy(EIAB_LightAttacks,'interaction') )
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_LightAttacks);
			}
		}
	}

	event OnCbtSpecialAttackLight( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			if( IsPressed(action) )
			{
				if( thePlayer.IsActionAllowed(EIAB_LightAttacks)  )
				{
					if (thePlayer.GetBIsInputAllowed())
					{
						if (ACS_Transformation_Werewolf_Check())
						{
							ACS_Transformation_Werewolf_Special_Light_Attacks();
						}
					}
				}
			}

			return false;
		}
		
		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;

		if(!theInput.LastUsedPCInput() && IsPressed( action ) && theInput.GetActionValue( 'CastSign' ) > 0)
		{
			return false;
		}
			
		if ( IsReleased( action )  )
		{
			RemoveTimer('SpearAttackRepeatWhirl');
			thePlayer.CancelHoldAttacks();
			return true;
		}
		
		if ( !IsPlayerAbleToPerformSpecialAttack() )
			return false;
		
		if( !thePlayer.IsActionAllowed(EIAB_LightAttacks) ) 
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_LightAttacks);
			return false;
		}
		if(!thePlayer.IsActionAllowed(EIAB_SpecialAttackLight) )
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_SpecialAttackLight);
			return false;
		}
		
		if( IsPressed(action) )	
		{
			if (
				(ACS_W3EE_Installed() && ACS_W3EE_Enabled() )
				||
				(ACS_W3EE_Redux_Installed() && ACS_W3EE_Redux_Enabled() )
				)
			{
				if ( ACS_Enabled() ) 
				{ 
					SpecialAttackSwitch(); //ACS
				} 
				else
				{
					thePlayer.PrepareToAttack();
					thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
					thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
				}
			}
			else
			{
				if ( thePlayer.CanUseSkill(S_Sword_s01) )
				{
					if ( ACS_Enabled() ) 
					{ 
						SpecialAttackSwitch(); //ACS
					} 
					else
					{
						thePlayer.PrepareToAttack();
						thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
						thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
					}
				}
			}	
		}
	}

	event OnToggleSigns( action : SInputAction )
	{
		var tolerance : float;
		tolerance = 2.5f;

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}
		
		if( action.value < -tolerance )
		{
			GetWitcherPlayer().TogglePreviousSign();
			if ( ACS_Enabled() && !thePlayer.GetWeaponHolster().IsOnTheMiddleOfHolstering() ) { ACS_SignSwitchArsenalInit(); } //ACS
		}
		else if( action.value > tolerance )
		{
			GetWitcherPlayer().ToggleNextSign();
			if ( ACS_Enabled() && !thePlayer.GetWeaponHolster().IsOnTheMiddleOfHolstering() ) { ACS_SignSwitchArsenalInit(); } //ACS
		}
	}

	event OnCbtAttackHeavy( action : SInputAction )
	{
		var allowed, checkedSword : bool;
		var outKeys : array<EInputKey>;

		if (ACS_Transformation_Activated_Check())
		{
			if( IsReleased(action) && theInput.GetLastActivationTime( action.aName ) < 0.2 )
			{
				if( thePlayer.IsActionAllowed(EIAB_HeavyAttacks)  )
				{
					if (thePlayer.GetBIsInputAllowed())
					{
						if (ACS_Transformation_Werewolf_Check())
						{
							ACS_Transformation_Werewolf_Heavy_Attacks();
						}
					}
				}
			}

			return false;
		}
		
		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;

		if( theInput.IsActionPressed('Focus') )
		return false;
		
		if ( thePlayer.GetBIsInputAllowed() )
		{
			altSignCastingThing();

			if(altSignCasting 
			&& !theInput.LastUsedPCInput() && theInput.IsActionPressed('CastSign' ) && !GetWitcherPlayer().IsCurrentSignChanneled())
			{
				if(IsPressed( action ))
				{
					AltCastSign(ST_Yrden);
					return false;
				}
				else if (IsReleased( action ))
				{
					return false;
				}
			}

			if( thePlayer.IsActionAllowed(EIAB_HeavyAttacks) )
			{
				allowed = false;
				
				if( thePlayer.GetCurrentMeleeWeaponType() == PW_Fists || thePlayer.GetCurrentMeleeWeaponType() == PW_None )
				{
					checkedSword = false;
					if(thePlayer.IsActionAllowed(EIAB_Fists))
						allowed = true;
				}
				else if(thePlayer.IsActionAllowed(EIAB_SwordAttack))
				{
					checkedSword = true;
					allowed = true;
				}
				
				if(allowed)
				{
					if( IsReleased(action) && theInput.GetLastActivationTime( action.aName ) < 0.2 )
					{
						Rage_Counter_Heavy_Attack_Manager(3);

						if ( ACS_Enabled() ) 
						{ 
							if ( checkedSword )
							{
								HeavyAttackSwitch(); //ACS
							}
							else
							{
								ClawFistHeavyAttack(); //ACS
							}
						} 
						else
						{
							thePlayer.SetupCombatAction( EBAT_HeavyAttack, BS_Released );
						}

						thePlayer.CancelHoldAttacks();
					}
				}
				else
				{
					if(checkedSword)
						thePlayer.DisplayActionDisallowedHudMessage(EIAB_SwordAttack);
					else					
						thePlayer.DisplayActionDisallowedHudMessage(EIAB_Fists);
				}
			}
			else if ( !thePlayer.IsActionBlockedBy(EIAB_HeavyAttacks,'interaction') )
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_HeavyAttacks);
			}
		}
	}

	event OnCbtSpecialAttackWithAlternateLight( action : SInputAction )
	{

		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;
		
		CbSpecialAttackPC( action, false);
	}
	
	event OnCbtSpecialAttackWithAlternateHeavy( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
		return false;

		if( theInput.IsActionPressed('Focus') )
		return false;
		
		CbSpecialAttackPC( action, true);
	}
	
	function CbSpecialAttackPC( action : SInputAction, isHeavy : bool ) 
	{
		var switchAttackType : bool;
		
		switchAttackType = ShouldSwitchAttackType();
		
		if ( !theInput.LastUsedPCInput() )
		{
			return;
		}
		
		if ( IsPressed(action) )
		{
			if ( thePlayer.IsCiri() )
			{
				
				thePlayer.GetInputHandler().OnCbtCiriSpecialAttackHeavy(action);
			}
			else
			{
				if (switchAttackType != isHeavy) 
				{
					OnCbtSpecialAttackHeavy(action);
				}
				else
				{
					OnCbtSpecialAttackLight(action);
				}
			}
		}
		else if ( IsReleased( action ) )
		{
			if ( thePlayer.IsCiri() )
			{
				thePlayer.GetInputHandler().OnCbtCiriSpecialAttackHeavy(action);
			}
			else
			{
				//OnCbtSpecialAttackHeavy(action);
				//OnCbtSpecialAttackLight(action);

				if (switchAttackType != isHeavy) 
				{
					OnCbtSpecialAttackHeavy(action);
				}
				else
				{
					OnCbtSpecialAttackLight(action);
				}
			}
		}
	}

	event OnCbtSpecialAttackHeavy( action : SInputAction )
	{	
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( theInput.IsActionPressed('Focus') )
		return false;

		if(!theInput.LastUsedPCInput() && IsPressed( action ) && theInput.GetActionValue( 'CastSign' ) > 0)
		{
			return false;
		}

		if ( IsReleased( action )  )
		{
			thePlayer.CancelHoldAttacks();
			RemoveTimer('RendProjectileSwitchDelay');
			AddTimer('RendProjectileSwitchDelay', 0.25, false);
			return true;
		}
		
		if ( !IsPlayerAbleToPerformSpecialAttack() )
			return false;
		
		if( !thePlayer.IsActionAllowed(EIAB_HeavyAttacks))
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_HeavyAttacks);
			return false;
		}		
		if(!thePlayer.IsActionAllowed(EIAB_SpecialAttackHeavy))
		{
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_SpecialAttackHeavy);
			return false;
		}
		
		if (
			(ACS_W3EE_Installed() && ACS_W3EE_Enabled() )
			||
			(ACS_W3EE_Redux_Installed() && ACS_W3EE_Redux_Enabled() )
			)
		{
			if ( IsPressed(action) )
			{
				RemoveTimer('RendProjectileSwitchDelay');

				thePlayer.PrepareToAttack();
				thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);

				if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
				{
					Grow_Geralt_Immediate_Fast(); //ACS

					thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
				}

				if ( ACS_Enabled() ) 
				{ 
					if(thePlayer.GetStat(BCS_Stamina) > 0)
					{
						action_interrupt_with_igni_sword();
					}
				}

				thePlayer.AddTimer( 'IsSpecialHeavyAttackInputHeld', 0.00001, true );
				ACSRendCheck();
			}
		}
		else
		{
			if ( IsPressed(action) )
			{
				RemoveTimer('RendProjectileSwitchDelay');

				if( thePlayer.CanUseSkill(S_Sword_s02) )	
				{	
					thePlayer.PrepareToAttack();
					thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);

					if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
					{
						Grow_Geralt_Immediate_Fast(); //ACS

						thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
					}

					if ( ACS_Enabled() ) 
					{ 
						if(thePlayer.GetStat(BCS_Stamina) > 0)
						{
							action_interrupt_with_igni_sword();
						}
					}

					thePlayer.AddTimer( 'IsSpecialHeavyAttackInputHeld', 0.00001, true );
					ACSRendCheck();
				}
				else
				{
					if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
					{
						Grow_Geralt_Immediate_Fast(); //ACS

						thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
					}

					if ( ACS_Enabled() ) 
					{ 
						if(thePlayer.GetStat(BCS_Stamina) > 0)
						{
							action_interrupt_with_igni_sword();
						}
					}

					if ( theInput.IsActionPressed('AttackHeavy') )
					{
						theInput.ForceDeactivateAction('AttackHeavy');
					}
					else if ( theInput.IsActionPressed('AttackWithAlternateHeavy') )
					{
						theInput.ForceDeactivateAction('AttackWithAlternateHeavy');
					}
				}
			}
		}
	}

	private var acs_rendprojectilecheck : bool; 
	
	default acs_rendprojectilecheck = false;

	public function ACS_EnableRendProjectile( enable : bool )
	{
		acs_rendprojectilecheck = enable;
	}

	public function ACS_RendProjectileCheck() : bool
	{
		return acs_rendprojectilecheck;
	}

	function ACSRendCheck()
	{
		var cost : float;

		if ( 
		thePlayer.GetCurrentStateName() == 'CombatSteel' 
		|| thePlayer.GetCurrentStateName() == 'CombatSilver' 
		)
		{
			cost = CalculateAttributeValue(thePlayer.GetSkillAttributeValue(S_Sword_s02, 'stamina_cost_per_sec', false, false));
			
			if( thePlayer.GetBIsCombatActionAllowed() && thePlayer.IsActionAllowed(EIAB_SwordAttack))
			{
				if(thePlayer.GetStat(BCS_Stamina) >= cost)
				{
					ACS_EnableRendProjectile(true);

					RemoveTimer('RendProjectileCancelFailsafe');
					AddTimer('RendProjectileCancelFailsafe', 3, false);
				}
				else if(
				!thePlayer.playedSpecialAttackMissingResourceSound
				|| thePlayer.GetStat(BCS_Stamina) <= 0
				)
				{
					ACS_EnableRendProjectile(false);
				}
			}
		}
		else
		{
			ACS_EnableRendProjectile(false);
		}
	}

	public timer function RendProjectileSwitchDelay(deltaTime : float , id : int)
	{
		if ( ACS_Enabled()
		&& ACS_RendProjectileCheck() ) { ACS_Rend_Projectile_Switch(); }
	}

	event OnCommGuard( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if(thePlayer.IsCiri() && !GetCiriPlayer().HasSword())
			return false;
			
		if ( !thePlayer.IsInsideInteraction() )
		{
			if (  thePlayer.IsActionAllowed(EIAB_Parry) )
			{
				if( IsReleased(action) && thePlayer.GetCurrentStateName() == 'CombatFists' )
					thePlayer.OnGuardedReleased();
					if ( ACS_Enabled() ) { RemoveTimer('ACS_Shield_Spawn_Delay'); ACS_Shield_Destroy(); return true;} //ACS
				
				if( IsPressed(action) )
				{
					thePlayer.AddCounterTimeStamp(theGame.GetEngineTime());	

					action_interrupt(); //ACS
					thePlayer.SetGuarded(true);
					thePlayer.OnPerformGuard();

					if ( ACS_Enabled() ) { GuardAttack(); } //ACS
				}
				else if( IsReleased(action) )
				{
					thePlayer.SetGuarded(false);
					if ( ACS_Enabled() ) { RemoveTimer('ACS_Shield_Spawn_Delay'); ACS_Shield_Destroy(); return true;} //ACS
				}	
			}
			else
			{
				thePlayer.DisplayActionDisallowedHudMessage(EIAB_Parry);				
			}
		}
	}

	event OnCbtLockAndGuard( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if (theInput.GetActionValue('ControllerCastModifier') > 0.5)
			return false;
			
		if(thePlayer.IsCiri() && !GetCiriPlayer().HasSword())
			return false;
		
		
		if( IsReleased(action) )
		{
			altSignCastingThing();

			if(altSignCasting
			&& !theInput.LastUsedPCInput() && theInput.IsActionPressed('CastSign') && GetWitcherPlayer().IsCurrentSignChanneled())
			{				
				thePlayer.AbortSign();
			}

			thePlayer.SetGuarded(false);
			thePlayer.OnGuardedReleased();	
			if ( ACS_Enabled() ) { RemoveTimer('ACS_Shield_Spawn_Delay'); ACS_Shield_Destroy(); return true;} //ACS
		}
		
		if( (thePlayer.IsWeaponHeld('fist') || thePlayer.GetCurrentStateName() == 'CombatFists') && !thePlayer.IsActionAllowed(EIAB_Fists))
		{
			if ( ACS_Enabled() ) { GuardAttack(); return true;} //ACS
			thePlayer.DisplayActionDisallowedHudMessage(EIAB_Fists);
			return false;
		}
		
		if( IsPressed(action) )
		{
			altSignCastingThing();

			if(altSignCasting
			&& !theInput.LastUsedPCInput() && theInput.IsActionPressed('CastSign' ) && !GetWitcherPlayer().IsCurrentSignChanneled())
			{
				AltCastSign(ST_Igni);
				return false;
			}


			if( !thePlayer.IsActionAllowed(EIAB_Parry) )
			{
				if ( thePlayer.IsActionBlockedBy(EIAB_Parry,'UsableItem') )
				{
					thePlayer.DisplayActionDisallowedHudMessage(EIAB_Parry);
				}
				return true;
			}
				
			if ( thePlayer.GetCurrentStateName() == 'Exploration' )
				thePlayer.GoToCombatIfNeeded();
				
			if ( thePlayer.bLAxisReleased )
				thePlayer.ResetRawPlayerHeading();
			
			if ( thePlayer.rangedWeapon && thePlayer.rangedWeapon.GetCurrentStateName() != 'State_WeaponWait' )
				thePlayer.OnRangedForceHolster( true, true );
			
			thePlayer.AddCounterTimeStamp(theGame.GetEngineTime());	

			if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
			{
				 Grow_Geralt_Immediate_Fast(); //ACS

				thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
			}

			if (thePlayer.IsInCombat()){action_interrupt();} //ACS

			thePlayer.SetGuarded(true);
			thePlayer.OnPerformGuard();

			if ( ACS_Enabled() ) { GuardAttack(); } //ACS
		}	
	}

	private function IsPlayerAbleToPerformSpecialAttack() : bool
	{
		if( ( thePlayer.GetCurrentStateName() == 'Exploration' ) && !( thePlayer.IsWeaponHeld( 'silversword' ) || thePlayer.IsWeaponHeld( 'steelsword' ) ) )
		{
			return false;
		}
		return true;
	}

	event OnCommDrinkPotion1( action : SInputAction )
	{
		if ( ACS_QuestTrackingCheck() && IsReleased( action ) )
		{
			ACS_QuestTrackingSwap_Tutorial();
			ACS_TrackQuestSwitch( -1 );
			return false;
		}
	}

	event OnCommDrinkPotion2( action : SInputAction )
	{
		var witcher : W3PlayerWitcher;
		
		if ( ACS_QuestTrackingCheck() && IsReleased( action ) )
		{
			ACS_QuestTrackingSwap_Tutorial();
			ACS_TrackQuestSwitch( 1 );
			return false;
		}
	}

	private var storedHoursPerMinute 					: float;	

	private var meditationCamera 						: ACSMeditationCamera;

	public function SetMeditationCamera( a : ACSMeditationCamera )
	{
		this.meditationCamera = a;
	}

	public function GetMeditationCamera() : ACSMeditationCamera
	{
		return this.meditationCamera;
	}

	function ACS_Meditation_Create_Savelock()
	{
		theGame.CreateNoSaveLock( "ACS_Meditation_Active", ACS_Meditation_Savelock_ID, false, false );
	}

	public timer function ACS_Meditation_Start_Delay(deltaTime : float , id : int)
	{
		var fastForward 		: CGameFastForwardSystem;
		var comp 				: CComponent;

		if (RandF() < 0.5)
		{
			PlayerPlayAnimation('meditation_idle01');
		}
		else
		{
			PlayerPlayAnimation('meditation_idle_2');
		}

		RemoveTimer('ACS_Meditate_Loop');
		AddTimer('ACS_Meditate_Loop', 0.001, true);

		fastForward = theGame.GetFastForwardSystem();
		fastForward.BeginFastForward(true, false);

		if (!ACSMeditationCampfire())
		{
			theGame.SetHoursPerMinute( storedHoursPerMinute * 180 );
		}
		else
		{
			theGame.SetHoursPerMinute( storedHoursPerMinute * 120 );
		}

		if (thePlayer.IsThreatened()
		|| thePlayer.IsInCombat()
		|| theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| thePlayer.IsInCutsceneIntro() 
		)
		{
			if (thePlayer.IsThreatened()
			|| thePlayer.IsInCombat())
			{
				PlayerPlayAnimationInterrupt('');
			}
			else
			{
				if (!ACSMeditationCampfire())
				{
					PlayerPlayAnimation('meditation_stop_long');
				}
				else
				{
					PlayerPlayAnimation('meditation_stop_long_2');
				}
			}

			GetMeditationCamera().GoBack();

			thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Roll,					'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Parry,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Movement,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenFastMenu, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenInventory,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenPreparation, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMap, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenCharacterPanel, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenJournal, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenAlchemy, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenGlossary,			'ACS_Meditation');

			fastForward = theGame.GetFastForwardSystem();
			fastForward.AllowFastForwardSelfCompletion();

			theGame.SetHoursPerMinute( storedHoursPerMinute );

			theGame.ReleaseNoSaveLock( ACS_Meditation_Savelock_ID );

			ACSMeditationCampfire().DestroyAfter(1.5);

			FactsRemove("ACS_In_Meditation");

			RemoveTimer('ACS_Meditate_Loop');
			RemoveTimer('ACS_Meditation_Start_Delay');
		}
	}

	function ACS_RemovePotionEffects()
	{
		var i : int;
		var buffs : array< CBaseGameplayEffect >;
		
		thePlayer.RemoveAllPotionEffects();
		
		thePlayer.DrainToxicity(thePlayer.GetStatMax( BCS_Toxicity ));
		
		buffs = thePlayer.GetBuffs( EET_WellFed );
		for( i=buffs.Size()-1; i>=0; i-=1 )
		{
			thePlayer.RemoveEffect( buffs[i] );
		}
		
		
		buffs.Clear();
		buffs = thePlayer.GetBuffs( EET_WellHydrated );
		for( i=buffs.Size()-1; i>=0; i-=1 )
		{
			thePlayer.RemoveEffect( buffs[i] );
		}
	}

	public timer function ACS_Meditate_Loop(deltaTime : float , id : int)
	{
		var fastForward 			: CGameFastForwardSystem;
		var comp 					: CComponent;

		if (RandF() < 0.5)
		{
			PlayerPlayAnimation('meditation_idle01');
		}
		else
		{
			PlayerPlayAnimation('meditation_idle_2');
		}

		if (ACSMeditationCampfire())
		{
			thePlayer.inv.SingletonItemsRefillAmmoNoAlco(false);

			if(thePlayer.GetCurrentHealth() < thePlayer.GetMaxHealth())
			{
				thePlayer.GainStat( BCS_Vitality, thePlayer.GetMaxHealth() * 0.0005 );
			}
		}
		
		ACS_RemovePotionEffects();

		if (thePlayer.IsThreatened()
		|| thePlayer.IsInCombat()
		|| theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| thePlayer.IsInCutsceneIntro() 
		)
		{
			if (thePlayer.IsThreatened()
			|| thePlayer.IsInCombat())
			{
				PlayerPlayAnimationInterrupt('');
			}
			else
			{
				if (!ACSMeditationCampfire())
				{
					PlayerPlayAnimation('meditation_stop_long');
				}
				else
				{
					PlayerPlayAnimation('meditation_stop_long_2');
				}
			}

			GetMeditationCamera().GoBack();

			thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Roll,					'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Parry,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Movement,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenFastMenu, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenInventory,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenPreparation, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMap, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenCharacterPanel, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenJournal, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenAlchemy, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenGlossary,			'ACS_Meditation');

			fastForward = theGame.GetFastForwardSystem();
			fastForward.AllowFastForwardSelfCompletion();

			theGame.SetHoursPerMinute( storedHoursPerMinute );

			theGame.ReleaseNoSaveLock( ACS_Meditation_Savelock_ID );

			FactsRemove("ACS_In_Meditation");

			ACSMeditationCampfire().DestroyAfter(1.5);

			RemoveTimer('ACS_Meditate_Loop');
		}
	}

	function SpawnCampFire()
	{
		var template : CEntityTemplate;
		var pos : Vector;
		var z : float;
		var rot : EulerAngles;
		var campfire : W3Campfire;
		var comp : CComponent;
		
		template = (CEntityTemplate)LoadResource( "environment\decorations\light_sources\campfire\campfire_01.w2ent", true);

		pos = thePlayer.GetWorldPosition() + VecFromHeading( thePlayer.GetHeading() ) * Vector(0.8, 0.8, 0);

		if( theGame.GetWorld().NavigationComputeZ( pos, pos.Z - 128, pos.Z + 128, z ) )
		{
			pos.Z = z;
		}
		if( theGame.GetWorld().PhysicsCorrectZ( pos, z ) )
		{
			pos.Z = z;
		}

		rot = thePlayer.GetWorldRotation();

		ACSMeditationCampfire().Destroy();

		campfire = (W3Campfire)theGame.CreateEntity(template, pos, rot);

		comp = campfire.GetComponentByClassName('CGameplayLightComponent');

		((CGameplayLightComponent)comp).SetInteractive(false);

		campfire.AddTag('ACS_Meditation_Campfire');
	}

	public timer function LightCampFire(deltaTime : float , id : int)
	{
		var comp : CComponent;

		thePlayer.UnblockAction( EIAB_OpenFastMenu, 					'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenInventory,					'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenPreparation, 					'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenMap, 							'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenCharacterPanel, 				'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenJournal, 						'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenAlchemy, 						'ACS_Meditation');
		thePlayer.UnblockAction( EIAB_OpenGlossary,						'ACS_Meditation');

		thePlayer.DestroyEffect('fire_interaction');
		thePlayer.PlayEffectSingle('fire_interaction');
		thePlayer.StopEffect('fire_interaction');

		thePlayer.DestroyEffect('no_cast_igni_right');
		thePlayer.PlayEffectSingle('no_cast_igni_right');
		thePlayer.StopEffect('no_cast_igni_right');

		thePlayer.DestroyEffect('no_cast_igni');
		thePlayer.PlayEffectSingle('no_cast_igni');
		thePlayer.StopEffect('no_cast_igni');

		thePlayer.DestroyEffect('power_place_igni');
		thePlayer.PlayEffectSingle('power_place_igni');
		thePlayer.StopEffect('power_place_igni');

		comp = ACSMeditationCampfire().GetComponentByClassName('CGameplayLightComponent');

		((CGameplayLightComponent)comp).SetFadeLight(true);
	}

	function MeditationCustomCamera()
	{
		var template	: CEntityTemplate;
		var ent			: CEntity;

		if(GetFocusModeCamera())
		{
			GetFocusModeCamera().Stop();
			GetFocusModeCamera().Destroy();	
		}

		template = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\meditation_camera.w2ent", true);

		ent = theGame.CreateEntity(template, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	
	}

	function MeditateStart()
	{
		if (FactsQuerySum("ACS_In_Meditation") <= 0)
		{
			MeditationCustomCamera();

			thePlayer.OnMeleeForceHolster( true );
			thePlayer.OnRangedForceHolster( true );

			storedHoursPerMinute = theGame.GetHoursPerMinute();

			ACS_Meditation_Create_Savelock();

			if (!ACSMeditationCampfire())
			{
				PlayerPlayAnimation('meditation_start_long');

				RemoveTimer('ACS_Meditation_Start_Delay');
				RemoveTimer('ACS_Meditate_Loop');
				AddTimer('ACS_Meditation_Start_Delay', 2.5, false);
			}
			else
			{
				PlayerPlayAnimation('meditation_start_long_2');

				RemoveTimer('ACS_Meditation_Start_Delay');
				RemoveTimer('ACS_Meditate_Loop');
				AddTimer('ACS_Meditation_Start_Delay', 3.5, false);
			}

			thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Signs, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Fists, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Dodge,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Roll,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Parry,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Movement,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Jump, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenFastMenu, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenInventory,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenPreparation, 	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenMap, 			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenCharacterPanel, 'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenJournal, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenAlchemy, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenGlossary,		'ACS_Meditation');
			

			FactsAdd("ACS_In_Meditation", 1, -1);
		}
		else if (FactsQuerySum("ACS_In_Meditation") > 0)
		{
			GetMeditationCamera().GoBack();

			RemoveTimer('ACS_Meditation_Start_Delay');
			RemoveTimer('ACS_Meditate_Loop');

			if (!ACSMeditationCampfire())
			{
				PlayerPlayAnimation('meditation_stop_long');
			}
			else
			{
				PlayerPlayAnimation('meditation_stop_long_2');
			}

			theGame.ReleaseNoSaveLock( ACS_Meditation_Savelock_ID );

			thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Roll,					'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Parry,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Movement,				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenFastMenu, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenInventory,		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenPreparation, 		'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenMap, 				'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenCharacterPanel, 	'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenJournal, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenAlchemy, 			'ACS_Meditation');
			thePlayer.UnblockAction( EIAB_OpenGlossary,			'ACS_Meditation');

			theGame.SetHoursPerMinute( storedHoursPerMinute );

			ACSMeditationCampfire().DestroyAfter(1.5);

			FactsRemove("ACS_In_Meditation");
		}
	}

	function MeditateStartDoubleTap()
	{
		if (FactsQuerySum("ACS_In_Meditation") <= 0)
		{
			thePlayer.OnMeleeForceHolster( true );
			thePlayer.OnRangedForceHolster( true );

			storedHoursPerMinute = theGame.GetHoursPerMinute();

			ACS_Meditation_Create_Savelock();

			if (!ACSMeditationCampfire())
			{
				PlayerPlayAnimation('meditation_start_long');

				RemoveTimer('ACS_Meditation_Start_Delay');
				RemoveTimer('ACS_Meditate_Loop');
				AddTimer('ACS_Meditation_Start_Delay', 2.5, false);
			}
			else
			{
				PlayerPlayAnimation('meditation_start_long_2');

				RemoveTimer('ACS_Meditation_Start_Delay');
				RemoveTimer('ACS_Meditate_Loop');
				AddTimer('ACS_Meditation_Start_Delay', 3.5, false);
			}

			thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Signs, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Fists, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Dodge,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Roll,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Parry,				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Meditation');
			thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Movement,			'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Meditation');
			thePlayer.BlockAction( EIAB_Jump, 				'ACS_Meditation');
			thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Meditation');

			FactsAdd("ACS_In_Meditation", 1, -1);
		}
	}

	event OnCommDrinkPotion3( action : SInputAction )
	{
		var fastForward : CGameFastForwardSystem;

		if( IsPressed(action) )
		{
			ACS_QuickMeditation_Tutorial();

			if( MeditateCallTime + DOUBLE_TAP_WINDOW_CAMPFIRE >= theGame.GetEngineTimeAsSeconds() )
			{
				MeditateDoubleTap = true;
			}
			else
			{
				MeditateDoubleTap = false;	
			}

			if (MeditateDoubleTap)
			{
				SpawnCampFire();

				RemoveTimer('LightCampFire');
				AddTimer('LightCampFire', 2, false);

				MeditateStartDoubleTap();
			}
			else
			{
				MeditateStart();
			}

			MeditateCallTime = theGame.GetEngineTimeAsSeconds();
		}
		
		if ( IsReleased( action ) )
		{
			
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	event OnMovementDoubleTapW( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Dodge)) 
		{
			return false;
		}

		if ( IsPressed( action ) )
		{			
			if ( !thePlayer.IsDodgeTimerRunning() || action.aName != lastACSMovementDoubleTapName )
			{
				thePlayer.StartDodgeTimer();
				lastACSMovementDoubleTapName = action.aName;
			}
			else
			{
				thePlayer.StopDodgeTimer();
				if (!thePlayer.HasTag('dettlaff_enabled'))
				{	
					ACS_BruxaBiteInit();
				}
			}
		}
	}

	event OnBruxaBite( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if ( IsPressed( action ) )
		{				
			ACS_BruxaBiteInit();
		}
	}

	function Additional_Helmets()
	{
		var vACS_Additional_Helmets : cACS_Additional_Helmets;
		vACS_Additional_Helmets = new cACS_Additional_Helmets in this;

		thePlayer.PlayEffect('demonic_possession');
		thePlayer.StopEffect('demonic_possession');

		vACS_Additional_Helmets.Engage();
	}

	function Additional_Helmets_Destroy()
	{	
		var helm_destroy_1, helm_destroy_2, helm_destroy_3, helm_destroy_4, anchor_destroy	: CEntity;	

		thePlayer.PlayEffect('demonic_possession');
		thePlayer.StopEffect('demonic_possession');

		GetACSHelm1().Destroy();

		GetACSHelm2().Destroy();

		GetACSHelm3().Destroy();

		GetACSHelm4().Destroy();
					
		GetACSHelmAnchor().Destroy();

		Additional_Helmet_Appearance_Destroy();
	}

	function Additional_Helmet_Appearance_Destroy()
	{
		var vACS_Additional_Helmet_Appearance_Destroy : cACS_Additional_Helmet_Appearance_Destroy;
		vACS_Additional_Helmet_Appearance_Destroy = new cACS_Additional_Helmet_Appearance_Destroy in this;

		vACS_Additional_Helmet_Appearance_Destroy.Engage();
	}

	public timer function ACS_AdditionalHelmetsSpawnDelay(deltaTime : float , id : int)
	{
		Additional_Helmets();

		RemoveTimer('ACS_Embers_Timer');
		AddTimer('ACS_Embers_Timer', 0.0001, true);

		RemoveTimer('ACSArmorBreathingTimer');
		AddTimer('ACSArmorBreathingTimer', 1.5, true);

		if (!thePlayer.IsEffectActive('demon_cs', false))
		{
			thePlayer.PlayEffectSingle('demon_cs');
		}

		if (!thePlayer.IsEffectActive('him_smoke_red', false))
		{
			thePlayer.PlayEffectSingle('him_smoke_red');
		}

		if(thePlayer.IsAnyWeaponHeld())
		{
			if (!thePlayer.IsEffectActive('acs_armor_effect_1', false))
			{
				thePlayer.PlayEffectSingle('acs_armor_effect_1');
			}

			if (!thePlayer.IsEffectActive('special_attack_tell_r', false))
			{
				thePlayer.PlayEffectSingle('special_attack_tell_r');
			}
			
			if (!thePlayer.IsEffectActive('special_attack_tell_l', false))
			{
				thePlayer.PlayEffectSingle('special_attack_tell_l');
			}

			if (!thePlayer.IsEffectActive('special_attack_tell_r_leg', false))
			{
				thePlayer.PlayEffectSingle('special_attack_tell_r_leg');
			}
			
			if (!thePlayer.IsEffectActive('special_attack_tell_l_leg', false))
			{
				thePlayer.PlayEffectSingle('special_attack_tell_l_leg');
			}
		}

		//AddTimer('ACS_Embers_Particles_Timer', 2, true);

		helmtoggle = true;
	}

	public timer function ACS_AdditionalHelmetsDespawnDelay(deltaTime : float , id : int)
	{
		Additional_Helmets_Destroy();

		RemoveTimer('ACS_Embers_Timer');

		RemoveTimer('ACSArmorBreathingTimer');

		//RemoveTimer('ACS_Embers_Particles_Timer');

		if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
		{
			thePlayer.StopEffect('acs_armor_effect_1');
		}
		
		if (thePlayer.IsEffectActive('acs_armor_effect_2', false))
		{
			thePlayer.StopEffect('acs_armor_effect_2');
		}

		if (thePlayer.IsEffectActive('special_attack_tell_r', false))
		{
			thePlayer.StopEffect('special_attack_tell_r');
		}
		
		if (thePlayer.IsEffectActive('special_attack_tell_l', false))
		{
			thePlayer.StopEffect('special_attack_tell_l');
		}

		if (thePlayer.IsEffectActive('special_attack_tell_r_leg', false))
		{
			thePlayer.StopEffect('special_attack_tell_r_leg');
		}
		
		if (thePlayer.IsEffectActive('special_attack_tell_l_leg', false))
		{
			thePlayer.StopEffect('special_attack_tell_l_leg');
		}

		if (thePlayer.IsEffectActive('demon_cs', false))
		{
			thePlayer.StopEffect('demon_cs');
		}

		if (thePlayer.IsEffectActive('him_smoke_red', false))
		{
			thePlayer.StopEffect('him_smoke_red');
		}

		helmtoggle = false;
	}

	function SetHelmToggle( flag : bool )
	{
		helmtoggle = flag;
	}

	function GetHelmToggle() : bool 
	{
		return helmtoggle;
	}

	event OnACSHelmToggle( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if (!ACS_Armor_Equipped_Check())
		{
			return false;
		}

		if ( IsPressed( action ) )
		{				
			if (!helmtoggle)
			{
				thePlayer.PlayEffect('demonic_possession');
				thePlayer.StopEffect('demonic_possession');

				RemoveTimer('ACS_AdditionalHelmetsSpawnDelay');
				RemoveTimer('ACS_AdditionalHelmetsDespawnDelay');

				AddTimer('ACS_AdditionalHelmetsSpawnDelay', 0.5, false);
			}
			else
			{
				thePlayer.PlayEffect('demonic_possession');
				thePlayer.StopEffect('demonic_possession');

				RemoveTimer('ACS_AdditionalHelmetsSpawnDelay');
				RemoveTimer('ACS_AdditionalHelmetsDespawnDelay');

				AddTimer('ACS_AdditionalHelmetsDespawnDelay', 0.5, false);
			}
		}
	}

	function Facegear_Include()
	{
		var vACS_Facegear_Include : cACS_Facegear_Include;
		vACS_Facegear_Include = new cACS_Facegear_Include in this;
				
		vACS_Facegear_Include.Engage();
	}

	function Facegear_Exclude()
	{
		var vACS_Facegear_Exclude : cACS_Facegear_Exclude;
		vACS_Facegear_Exclude = new cACS_Facegear_Exclude in this;
				
		vACS_Facegear_Exclude.Engage();
	}

	function SetFacemaskToggle( flag : bool )
	{
		facemasktoggle = flag;
	}

	function GetFacemaskToggle() : bool 
	{
		return facemasktoggle;
	}

	event OnACSFacemaskToggle( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if ( IsPressed( action ) )
		{	
			if (!facemasktoggle)
			{
				Facegear_Include();

				facemasktoggle = true;
			}
			else
			{
				Facegear_Exclude();

				facemasktoggle = false;
			}	
		}
	}

	function Red_Warden_Tail_Include()
	{
		var vACS_Warden_Tail_Include : cACS_Warden_Tail_Include;
		vACS_Warden_Tail_Include = new cACS_Warden_Tail_Include in this;
				
		vACS_Warden_Tail_Include.Engage();
	}

	function Silver_Warden_Tail_Include()
	{
		var vACS_Warden_Tail_Exclude : cACS_Warden_Tail_Exclude;
		vACS_Warden_Tail_Exclude = new cACS_Warden_Tail_Exclude in this;
				
		vACS_Warden_Tail_Exclude.Engage();
	}

	function EquipACSArmorOmega()
	{
		var newID : array<SItemUniqueId>;

		GetWitcherPlayer().UnequipItemFromSlot(EES_Armor);

		if ( ACS_SOI_Installed() && ACS_SOI_Enabled() && helmtoggle )
		{
			Red_Warden_Tail_Include();
		}

		if (thePlayer.inv.HasItem('ACS_Armor_Omega'))
		{
			thePlayer.EquipItem( thePlayer.inv.GetItemId('ACS_Armor_Omega'));
		}
		else
		{
			newID = thePlayer.inv.AddAnItem('ACS_Armor_Omega', 1);

			thePlayer.EquipItem(newID[0]);
		}
	}

	function EquipNGPACSArmorOmega()
	{
		var newID : array<SItemUniqueId>;

		GetWitcherPlayer().UnequipItemFromSlot(EES_Armor);

		if ( ACS_SOI_Installed() && ACS_SOI_Enabled() && helmtoggle )
		{
			Red_Warden_Tail_Include();
		}

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Omega'))
		{
			thePlayer.EquipItem( thePlayer.inv.GetItemId('NGP_ACS_Armor_Omega'));
		}
		else
		{
			newID = thePlayer.inv.AddAnItem('NGP_ACS_Armor_Omega', 1);

			thePlayer.EquipItem(newID[0]);
		}
	}

	function EquipACSArmorAlpha()
	{
		var newID : array<SItemUniqueId>;

		GetWitcherPlayer().UnequipItemFromSlot(EES_Armor);

		if ( ACS_SOI_Installed() && ACS_SOI_Enabled() && helmtoggle )
		{
			Silver_Warden_Tail_Include();
		}
	
		if (thePlayer.inv.HasItem('ACS_Armor_Alpha'))
		{
			thePlayer.EquipItem( thePlayer.inv.GetItemId('ACS_Armor_Alpha'));
		}
		else
		{
			newID = thePlayer.inv.AddAnItem('ACS_Armor_Alpha', 1);

			thePlayer.EquipItem(newID[0]);
		}
	}

	function EquipNGPACSArmorAlpha()
	{
		var newID : array<SItemUniqueId>;

		GetWitcherPlayer().UnequipItemFromSlot(EES_Armor);

		if ( ACS_SOI_Installed() && ACS_SOI_Enabled() && helmtoggle )
		{
			Silver_Warden_Tail_Include();
		}

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Alpha'))
		{
			thePlayer.EquipItem( thePlayer.inv.GetItemId('NGP_ACS_Armor_Alpha'));
		}
		else
		{
			newID = thePlayer.inv.AddAnItem('NGP_ACS_Armor_Alpha', 1);

			thePlayer.EquipItem(newID[0]);
		}
	}

	public timer function ACS_ShoulderToggleDelay(deltaTime : float , id : int)
	{
		if (GetWitcherPlayer().IsItemEquippedByName('ACS_Armor_Omega'))
		{
			EquipACSArmorAlpha();
		}
		else if (GetWitcherPlayer().IsItemEquippedByName('NGP_ACS_Armor_Omega'))
		{
			EquipNGPACSArmorAlpha();
		}
		else if (GetWitcherPlayer().IsItemEquippedByName('ACS_Armor_Alpha'))
		{
			EquipACSArmorOmega();
		}
		else if (GetWitcherPlayer().IsItemEquippedByName('NGP_ACS_Armor_Alpha'))
		{
			EquipNGPACSArmorOmega();
		}
	}

	event OnACSShoulderToggle( action : SInputAction )
	{
		if (!ACS_Armor_Equipped_Check())
		{
			return false;
		}

		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if ( IsPressed( action ) )
		{	
			thePlayer.PlayEffectSingle('special_attack_only_black_fx');
			thePlayer.StopEffect('special_attack_only_black_fx');

			thePlayer.PlayEffectSingle('ethereal_appear');
			thePlayer.StopEffect('ethereal_appear');

			thePlayer.PlayEffectSingle('embers_particles_test');
			thePlayer.StopEffect('embers_particles_test');

			RemoveTimer('ACS_ShoulderToggleDelay');
			AddTimer('ACS_ShoulderToggleDelay', 0.5, false);
		}
	}
	
	event OnMovementDoubleTapA( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Dodge)) 
		{
			return false;
		}

		if ( IsPressed( action ) )
		{			
			if ( !thePlayer.IsDodgeTimerRunning() || action.aName != lastACSMovementDoubleTapName )
			{
				thePlayer.StartDodgeTimer();
				lastACSMovementDoubleTapName = action.aName;
			}
			else
			{
				thePlayer.StopDodgeTimer();
				if (!thePlayer.HasTag('dettlaff_enabled'))
				{	
					ACS_BruxaDodgeBackLeftInit();
				}
			}
		}
	}
	
	event OnMovementDoubleTapS( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Dodge)) 
		{
			return false;
		}

		if ( IsPressed( action ) )
		{			
			if ( !thePlayer.IsDodgeTimerRunning() || action.aName != lastACSMovementDoubleTapName )
			{
				thePlayer.StartDodgeTimer();
				lastACSMovementDoubleTapName = action.aName;
			}
			else
			{
				thePlayer.StopDodgeTimer();
				if (!thePlayer.HasTag('dettlaff_enabled'))
				{				
					ACS_BruxaDodgeBackCenterInit();	
				}
			}
		}
	}
	
	event OnMovementDoubleTapD( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Dodge)) 
		{
			return false;
		}

		if ( IsPressed( action ) )
		{			
			if ( !thePlayer.IsDodgeTimerRunning() || action.aName != lastACSMovementDoubleTapName )
			{
				thePlayer.StartDodgeTimer();
				lastACSMovementDoubleTapName = action.aName;
			}
			else
			{
				thePlayer.StopDodgeTimer();
				if (!thePlayer.HasTag('dettlaff_enabled'))
				{	
					ACS_BruxaDodgeBackRightInit();
				}
			}
		}
	}	

	public timer function DefaltSwordWalk(deltaTime : float , id : int)
	{
		if 
		(
		theInput.GetActionValue('Sprint') > 0.7f
		|| theInput.GetActionValue('Jump') > 0.7f 
		|| theInput.GetActionValue('MovementDoubleTapW') > 0.7f
		|| theInput.GetActionValue('MovementDoubleTapS') > 0.7f 
		|| theInput.GetActionValue('MovementDoubleTapA') > 0.7f 
		|| theInput.GetActionValue('MovementDoubleTapD') > 0.7f 
		|| theInput.GetActionValue('Dodge') > 0.7f 
		|| theInput.GetActionValue('CastSign') > 0.7f 
		|| theInput.GetActionValue('AltQuenCasting') > 0.7f 
		|| theInput.GetActionValue('BruxaBite') > 0.7f 
		|| theInput.GetActionValue('AttackHeavy') > 0.7f 
		|| theInput.GetActionValue('AttackHeavy') < -0.7f 
		|| theInput.GetActionValue('AttackWithAlternateLight') > 0.7f 
		|| theInput.GetActionValue('AttackWithAlternateHeavy') > 0.7f 
		|| theInput.GetActionValue('AttackLight') > 0.7f 
		|| theInput.GetActionValue('SpecialAttackLight') > 0.7f 
		|| theInput.GetActionValue('SpecialAttackWithAlternateLight') > 0.7f 
		|| theInput.GetActionValue('SpecialAttackWithAlternateHeavy') > 0.7f 
		|| theInput.GetActionValue('ToggleSigns') > 0.7f 
		|| theInput.GetActionValue('SpecialAttackHeavy') > 0.7f 
		|| theInput.GetActionValue('SpecialAttackHeavy') < -0.7f 
		|| theInput.GetActionValue('CbtRoll') > 0.7f 
		|| theInput.GetActionValue('LockAndGuard') > 0.7f 
		|| theInput.GetActionValue('Guard') > 0.7f 
		|| thePlayer.GetIsSprinting()
		|| thePlayer.GetIsRunning()
		|| thePlayer.substateManager.GetStateCur() == 'Sprint'
		|| thePlayer.substateManager.GetStateCur() == 'Vault'
		|| thePlayer.substateManager.GetStateCur() == 'Climb' 
		|| thePlayer.substateManager.GetStateCur() == 'Jump' 
		|| thePlayer.substateManager.GetStateCur() == 'Ragdoll' 
		|| thePlayer.substateManager.GetStateCur() == 'Slide' 
		|| thePlayer.substateManager.GetStateCur() == 'StartFalling' 
		|| thePlayer.substateManager.GetStateCur() == 'IdleJump' 
		|| thePlayer.substateManager.GetStateCur() == 'AirCollision' 
		|| thePlayer.substateManager.GetStateCur() == 'PrepareJump' 
		|| thePlayer.substateManager.GetStateCur() == 'TransitionPrepareToJump' 
		|| thePlayer.substateManager.GetStateCur() == 'TurnToJump' 
		|| thePlayer.substateManager.GetStateCur() == 'Roll' 
		|| thePlayer.substateManager.GetStateCur() == 'CombatExploration' 
		|| thePlayer.substateManager.GetStateCur() == 'Land'
		|| !thePlayer.IsActionAllowed(EIAB_Movement)
		|| thePlayer.IsInCombat() 
		|| thePlayer.IsInCombatState()
		|| thePlayer.IsInCombatAction() 
		|| theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene()
		|| !theGame.GetFocusModeController().CanUseFocusMode()
		|| thePlayer.IsUsingHorse()
		|| thePlayer.IsUsingVehicle()
		|| !thePlayer.IsAnyWeaponHeld()
		)
		{
			if (thePlayer.HasTag('ACS_IsSwordWalking'))
			{
				RemoveTimer('DefaltSwordWalk');

				RemoveTimer('DefaltSwordWalkStart');

				RemoveTimer('AlternateDefaltSwordWalkStart');

				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5, 0.5) );

				thePlayer.ClearAnimationSpeedMultipliers();

				thePlayer.RemoveTag('ACS_Manual_Combat_Control');

				thePlayer.RemoveTag('ACS_IsSwordWalking');
			}
		}
		else
		{
			thePlayer.ClearAnimationSpeedMultipliers();

			thePlayer.SetAnimationSpeedMultiplier( 1 );

			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'i3_combat_override_v1_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.03125, 0.03125) );
		}
	}

	function DefaltSwordWalkingFinishCheck()
	{
		if (ACS_CombatToExplorationCheck()
		&& theGame.GetFocusModeController().CanUseFocusMode())
		{
			if (thePlayer.HasTag('ACS_IsSwordWalkingFinished'))
			{
				//if (!ACS_SwordWalk_Enabled())
				//{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
				//}

				thePlayer.RemoveTag('ACS_IsSwordWalkingFinished');
			}
		}
	}

	function RemoveDefaltSwordWalk()
	{
		if (thePlayer.HasTag('ACS_IsSwordWalking'))
		{
			RemoveTimer('DefaltSwordWalk');

			RemoveTimer('DefaltSwordWalkStart');

			RemoveTimer('AlternateDefaltSwordWalkStart');

			thePlayer.ClearAnimationSpeedMultipliers();

			if( thePlayer.GetIsRunning() || thePlayer.GetIsSprinting())
			{
				thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5, 0.5) );
			}
			else 
			{
				if (RandF() < 0.5)
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'combat_locomotion_walk_leftforward_to_idle', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.25f) );
				}
				else
				{
					thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'combat_locomotion_walk_leftup_to_idle', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.25f) );
				}
			}

			thePlayer.RemoveTag('ACS_Manual_Combat_Control');

			thePlayer.RemoveTag('ACS_IsSwordWalking');
		}
	}

	function RemoveDefaltSwordWalkCancel()
	{
		if (thePlayer.HasTag('ACS_IsSwordWalking'))
		{
			thePlayer.ClearAnimationSpeedMultipliers();

			RemoveTimer('DefaltSwordWalk');

			RemoveTimer('DefaltSwordWalkStart');

			RemoveTimer('AlternateDefaltSwordWalkStart');

			thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(1, 1) );

			thePlayer.RemoveTag('ACS_Manual_Combat_Control');

			thePlayer.RemoveTag('ACS_IsSwordWalking');
		}
	}

	public timer function DefaltSwordWalkStart(deltaTime : float , id : int)
	{
		thePlayer.ClearAnimationSpeedMultipliers();

		RemoveTimer('DefaltSwordWalk');

		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'i3_combat_override_v1_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.325f, 0.03125) );
	
		AddTimer('DefaltSwordWalk', 0.9875, true);
	}

	public timer function AlternateDefaltSwordWalkStart(deltaTime : float , id : int)
	{
		thePlayer.ClearAnimationSpeedMultipliers();

		RemoveTimer('DefaltSwordWalk');

		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( 'i3_combat_override_v1_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.325f, 0.03125) );
			
		AddTimer('DefaltSwordWalk', 0.9875, true);
	}

	function DefaltSwordWalkInit()
	{
		if ( 
		!thePlayer.GetIsRunning()
		&& thePlayer.substateManager.GetStateTimeF() > 1
		&& !thePlayer.GetIsSprinting()
		&& thePlayer.IsAnyWeaponHeld()
		&& !thePlayer.IsWeaponHeld('fist')
		&& ACS_CombatToExplorationCheck()
		&& !thePlayer.IsInCombatState()
		&& !thePlayer.IsInCombatAction()
		&& thePlayer.substateManager.GetStateCur() != 'Combat'
		&& thePlayer.GetCurrentStateName() != 'Combat'
		&& !thePlayer.IsInAir()
		&& thePlayer.IsOnGround()
		&& theGame.GetFocusModeController().CanUseFocusMode()
		&& thePlayer.GetIsWalking() 
		&& ( thePlayer.GetMovingAgentComponent().GetSpeed() >= 0.6 )
		)
		{
			if (!thePlayer.HasTag('ACS_IsSwordWalking'))
			{
				RemoveTimer('DefaltSwordWalkStart');

				RemoveTimer('DefaltSwordWalk');

				RemoveTimer('AlternateDefaltSwordWalkStart');

				AddTimer('DefaltSwordWalkStart', 0.000001, false);

				thePlayer.AddTag('ACS_IsSwordWalking');
			}
		}
		else
		{
			RemoveDefaltSwordWalk();
		}
	}

	function AlternateDefaltSwordWalkInit()
	{
		if ( 
		!thePlayer.GetIsRunning()
		&& !thePlayer.GetIsSprinting()
		&& thePlayer.IsAnyWeaponHeld()
		&& !thePlayer.IsWeaponHeld('fist')
		&& ACS_CombatToExplorationCheck()
		&& !thePlayer.IsInCombat()
		&& !thePlayer.IsInCombatState()
		&& !thePlayer.IsInCombatAction()
		&& thePlayer.substateManager.GetStateCur() != 'Combat'
		&& thePlayer.GetCurrentStateName() != 'Combat'
		&& thePlayer.substateManager.GetStateCur() != 'CombatExploration'
		&& thePlayer.GetCurrentStateName() != 'CombatExploration'
		&& !thePlayer.IsInAir()
		&& thePlayer.IsOnGround()
		&& theGame.GetFocusModeController().CanUseFocusMode()
		)
		{
			if (!thePlayer.HasTag('ACS_IsSwordWalking'))
			{
				RemoveTimer('DefaltSwordWalkStart');

				RemoveTimer('DefaltSwordWalk');

				RemoveTimer('AlternateDefaltSwordWalkStart');

				AddTimer('AlternateDefaltSwordWalkStart', 0.000001, false);

				thePlayer.AddTag('ACS_IsSwordWalking');
			}
		}
		else
		{
			RemoveDefaltSwordWalk();
		}
	}

	event OnMoveForward ( action : SInputAction )
	{
		if ( ACS_Enabled() && thePlayer.IsActionAllowed(EIAB_Movement) )
		{
			if ( action.value > 0.1f )
			{
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				if 
				(
				(
				ACS_CombatToExplorationCheck()
				&& theInput.GetActionValue('Sprint') > 0.7f 
				&& theInput.GetActionValue('Jump') == 0 
				&& thePlayer.GetSprintingTime() <= 0.2f 
				&& thePlayer.substateManager.GetStateTimeF() > 1
				&& thePlayer.substateManager.GetStateCur() != 'Sprint'
				&& thePlayer.substateManager.GetStateCur() != 'Vault'
				&& thePlayer.substateManager.GetStateCur() != 'Climb' 
				&& thePlayer.substateManager.GetStateCur() != 'Jump' 
				&& thePlayer.substateManager.GetStateCur() != 'Ragdoll' 
				&& thePlayer.substateManager.GetStateCur() != 'Slide' 
				&& thePlayer.substateManager.GetStateCur() != 'StartFalling' 
				&& thePlayer.substateManager.GetStateCur() != 'IdleJump' 
				&& thePlayer.substateManager.GetStateCur() != 'AirCollision' 
				&& thePlayer.substateManager.GetStateCur() != 'PrepareJump' 
				&& thePlayer.substateManager.GetStateCur() != 'TransitionPrepareToJump' 
				&& thePlayer.substateManager.GetStateCur() != 'TurnToJump' 
				&& thePlayer.substateManager.GetStateCur() != 'Roll' 
				&& thePlayer.substateManager.GetStateCur() != 'CombatExploration' 
				&& thePlayer.substateManager.GetStateCur() != 'Land'
				&& thePlayer.IsActionAllowed(EIAB_Movement)
				&& !thePlayer.IsInCombat() 
				&& !thePlayer.IsInCombatState()
				&& !thePlayer.IsInCombatAction()
				)
				)
				{
					BruxaDash_NEW();
				}
				else
				{
					if (thePlayer.HasTag('ACS_Second_Life_Active') && thePlayer.IsActionAllowed(EIAB_Movement))
					{
						thePlayer.ActionPlaySlotAnimationAsync('PLAYER_SLOT','', 0.1, 1, false);
						
						thePlayer.RemoveTag('ACS_Second_Life_Active');
					}

					if (thePlayer.HasTag('ACS_Special_Dodge') && thePlayer.IsActionAllowed(EIAB_Movement) && !thePlayer.IsCurrentlyDodging() )
					{
						action_interrupt_on_movement(); //ACS
						
						thePlayer.RemoveTag('ACS_Special_Dodge');
					}

					if (!thePlayer.IsInCombat())
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control'))
						{
							thePlayer.RemoveTag('ACS_Manual_Combat_Control');
						} 
						
						RemoveTimer('Manual_Combat_Control_Remove'); 

						if (thePlayer.HasTag('ACS_IsSwordWalking'))
						{
							if ( thePlayer.GetMovingAgentComponent().GetSpeed() < 0.6 
							//&& !ACS_SwordWalk_Enabled()
							)
							{
								RemoveTimer('DefaltSwordWalk');

								RemoveTimer('DefaltSwordWalkStart');

								RemoveTimer('AlternateDefaltSwordWalkStart');

								thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );

								thePlayer.ClearAnimationSpeedMultipliers();

								thePlayer.RemoveTag('ACS_Manual_Combat_Control');

								thePlayer.RemoveTag('ACS_IsSwordWalking');
							}
						}
						else
						{
							DefaltSwordWalkingFinishCheck();

							DefaltSwordWalkInit();
							/*
							if (ACS_SwordWalk_Enabled())
							{
								AlternateDefaltSwordWalkInit();
							}
							else
							{
								DefaltSwordWalkInit();
							}
							*/
						}
					}

					ACS_Hijack_YAxis_Up_Forward();
				}
			}
			else if ( action.value < -0.1f )
			{
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				if (thePlayer.HasTag('ACS_Second_Life_Active') && thePlayer.IsActionAllowed(EIAB_Movement))
				{
					thePlayer.ActionPlaySlotAnimationAsync('PLAYER_SLOT','', 0.1, 1, false);
					
					thePlayer.RemoveTag('ACS_Second_Life_Active');
				}

				if (thePlayer.HasTag('ACS_Special_Dodge') && thePlayer.IsActionAllowed(EIAB_Movement) && !thePlayer.IsCurrentlyDodging() )
				{
					action_interrupt_on_movement(); //ACS
					
					thePlayer.RemoveTag('ACS_Special_Dodge');
				}

				if (!thePlayer.IsInCombat())
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control'))
					{
						thePlayer.RemoveTag('ACS_Manual_Combat_Control');
					} 
					
					RemoveTimer('Manual_Combat_Control_Remove'); 

					if (thePlayer.HasTag('ACS_IsSwordWalking'))
					{
						if ( thePlayer.GetMovingAgentComponent().GetSpeed() < 0.6 
						//&& !ACS_SwordWalk_Enabled()
						)
						{
							RemoveTimer('DefaltSwordWalk');

							RemoveTimer('DefaltSwordWalkStart');

							RemoveTimer('AlternateDefaltSwordWalkStart');

							thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );

							thePlayer.ClearAnimationSpeedMultipliers();

							thePlayer.RemoveTag('ACS_Manual_Combat_Control');

							thePlayer.RemoveTag('ACS_IsSwordWalking');
						}
					}
					else
					{
						DefaltSwordWalkingFinishCheck();

						DefaltSwordWalkInit();
						/*
						if (ACS_SwordWalk_Enabled())
						{
							AlternateDefaltSwordWalkInit();
						}
						else
						{
							DefaltSwordWalkInit();
						}
						*/
					}
				}
			}
			else if ( action.value == 0 )
			{	
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				RemoveTimer('ACS_HijackMoveForward');

				if (theInput.GetActionValue('GI_AxisLeftX') == 0 )
				{
					RemoveDefaltSwordWalk();

					if (!thePlayer.HasTag('ACS_IsSwordWalkingFinished'))
					{
						thePlayer.AddTag('ACS_IsSwordWalkingFinished');
					}
				}
			}
		}
	}

	event OnMoveSide ( action : SInputAction )
	{
		if (ACS_Enabled() && thePlayer.IsActionAllowed(EIAB_Movement) )
		{
			if ( action.value > 0.1f )
			{
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				if (thePlayer.HasTag('ACS_Second_Life_Active') && thePlayer.IsActionAllowed(EIAB_Movement))
				{
					thePlayer.ActionPlaySlotAnimationAsync('PLAYER_SLOT','', 0.1, 1, false);
					
					thePlayer.RemoveTag('ACS_Second_Life_Active');
				}

				if (thePlayer.HasTag('ACS_Special_Dodge') && thePlayer.IsActionAllowed(EIAB_Movement) && !thePlayer.IsCurrentlyDodging())
				{
					action_interrupt_on_movement(); //ACS

					thePlayer.RemoveTag('ACS_Special_Dodge');
				}

				if (!thePlayer.IsInCombat())
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control'))
					{
						thePlayer.RemoveTag('ACS_Manual_Combat_Control');
					} 
					
					RemoveTimer('Manual_Combat_Control_Remove');

					if (thePlayer.HasTag('ACS_IsSwordWalking'))
					{
						if ( thePlayer.GetMovingAgentComponent().GetSpeed() < 0.6 
						//&& !ACS_SwordWalk_Enabled()
						)
						{
							RemoveTimer('DefaltSwordWalk');

							RemoveTimer('DefaltSwordWalkStart');

							RemoveTimer('AlternateDefaltSwordWalkStart');

							thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );

							thePlayer.ClearAnimationSpeedMultipliers();

							thePlayer.RemoveTag('ACS_Manual_Combat_Control');

							thePlayer.RemoveTag('ACS_IsSwordWalking');
						}
					}
					else
					{
						DefaltSwordWalkingFinishCheck();

						DefaltSwordWalkInit();
						/*
						if (ACS_SwordWalk_Enabled())
						{
							AlternateDefaltSwordWalkInit();
						}
						else
						{
							DefaltSwordWalkInit();
						}
						*/
					}
				}
			}
			else if ( action.value < -0.1f )
			{
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				if (thePlayer.HasTag('ACS_Second_Life_Active') && thePlayer.IsActionAllowed(EIAB_Movement))
				{
					thePlayer.ActionPlaySlotAnimationAsync('PLAYER_SLOT','', 0.1, 1, false);
					
					thePlayer.RemoveTag('ACS_Second_Life_Active');
				}

				if (thePlayer.HasTag('ACS_Special_Dodge') && thePlayer.IsActionAllowed(EIAB_Movement) && !thePlayer.IsCurrentlyDodging())
				{
					action_interrupt_on_movement(); //ACS
					
					thePlayer.RemoveTag('ACS_Special_Dodge');
				}

				if (!thePlayer.IsInCombat())
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control'))
					{
						thePlayer.RemoveTag('ACS_Manual_Combat_Control');
					} 
					
					RemoveTimer('Manual_Combat_Control_Remove');

					if (thePlayer.HasTag('ACS_IsSwordWalking'))
					{
						if ( thePlayer.GetMovingAgentComponent().GetSpeed() < 0.6 
						//&& !ACS_SwordWalk_Enabled()
						)
						{
							RemoveTimer('DefaltSwordWalk');

							RemoveTimer('DefaltSwordWalkStart');

							RemoveTimer('AlternateDefaltSwordWalkStart');

							thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( '', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );

							thePlayer.ClearAnimationSpeedMultipliers();

							thePlayer.RemoveTag('ACS_Manual_Combat_Control');

							thePlayer.RemoveTag('ACS_IsSwordWalking');
						}
					}
					else
					{
						DefaltSwordWalkingFinishCheck();

						DefaltSwordWalkInit();
						/*
						if (ACS_SwordWalk_Enabled())
						{
							AlternateDefaltSwordWalkInit();
						}
						else
						{
							DefaltSwordWalkInit();
						}
						*/
					}
				}
			}
			else if ( action.value == 0 )
			{	
				if (ACS_Transformation_Activated_Check())
				{
					return false;
				}

				if (thePlayer.IsUsingVehicle())
				{
					return false;
				}

				if (theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					RemoveDefaltSwordWalk();

					if (!thePlayer.HasTag('ACS_IsSwordWalkingFinished'))
					{
						thePlayer.AddTag('ACS_IsSwordWalkingFinished');
					}
				}
			}
		}
	}

	function ACS_Wings_Entity() : CEntity
	{
		var ent 			 : CEntity;
		
		ent = (CEntity)theGame.GetEntityByTag( 'ACS_Wings_Entity' );
		return ent;
	}

	timer function WerewolfAnimatedMovementReset( time : float , id : int )
	{
		((CMovingPhysicalAgentComponent)GetACSTransfomrationWerewolf().GetMovingAgentComponent()).SetAnimatedMovement( false );
	}

	function ACS_Glide_Create_Savelock()
	{
		theGame.CreateNoSaveLock( "ACS_Glide_Active", ACS_Glide_Savelock_ID, false, false );
	}

	event OnJump ( action : SInputAction )
	{
		var ent														: CEntity;
	
		if ( ACS_Enabled() )
		{
			if (ACS_Transformation_Activated_Check())
			{
				/*
				thePlayer.ActionCancelAll();

				thePlayer.RaiseForceEvent('Idle');

				thePlayer.RaiseForceEvent('ForceIdle');

				if( thePlayer.IsActionAllowed(EIAB_Movement)  )
				{
					if (thePlayer.GetBIsInputAllowed())
					{
						if (ACS_Transformation_Werewolf_Check())
						{
							if ( IsPressed(action) )
							{
								ACSTransformWerewolfMovementAdjustJump();

								((CMovingPhysicalAgentComponent)GetACSTransfomrationWerewolf().GetMovingAgentComponent()).SetAnimatedMovement( true );

								GetACSWatcher().ACSTransformWerewolfPlayAnim('monster_werewolf_run_to_idle', 0.25f, 0.25f);

								AddTimer('WerewolfAnimatedMovementReset', 1, false);
							}
						}
					}
				}
				*/

				return false;
			}

			RemoveTimer('DefaltSwordWalk');

			thePlayer.RemoveTag('ACS_Manual_Combat_Control');

			thePlayer.RemoveTag('ACS_IsSwordWalking');

			if ( IsPressed(action) )
			{
				action_interrupt_on_jump(); //ACS

				if (thePlayer.IsInAir() 
				&& !thePlayer.IsInCombat() 
				&& !thePlayer.IsInInterior()
				&& !thePlayer.HasTag('in_wraith')
				&& !thePlayer.HasTag('vampire_claws_equipped')
				&& !thePlayer.IsOnGround()
				&& ACS_JumpExtend_Enabled()
				)
				{
					if (FactsQuerySum("ACS_Is_Gliding") <= 0)
					{
						ACS_Glide_Create_Savelock();

						ACS_Glide_Tutorial();

						thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Signs, 				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Fists, 				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Gliding');
						thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Gliding');
						thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Dodge,				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Roll,				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Parry,				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Gliding');
						thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Movement,			'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Gliding');
						thePlayer.BlockAction( EIAB_Jump, 				'ACS_Gliding');
						thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Gliding');

						AddTimer('ACS_Gliding', 0.00000000000000000000000001, true);

						thePlayer.StopEffect('glide_fx');
						thePlayer.PlayEffectSingle('glide_fx');	

						thePlayer.StopEffect( 'bruxa_dash_trails' );
						thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );

						thePlayer.PlayEffectSingle('embers_particles_test');
						thePlayer.StopEffect('embers_particles_test');

						ACS_Wings_Entity().Destroy();

						ent = theGame.CreateEntity( (CEntityTemplate)LoadResource( 
						//"dlc\dlc_acs\data\entities\other\shadow_wings.w2ent"

						"dlc\dlc_acs\data\entities\other\shadow_wings_orig.w2ent"

						//"dlc\dlc_acs\data\entities\other\fleder_wings.w2ent"
						, true ), thePlayer.GetWorldPosition(), thePlayer.GetWorldRotation() );
						
						//ent.CreateAttachment( thePlayer, 'blood_point', Vector( -1.825, 0.2, -0.05 ), EulerAngles(0,0,90) );

						ent.CreateAttachment( thePlayer, 'blood_point', Vector( -1.7, -0.125, 0 ), EulerAngles(0,0,90) );

						//ent.CreateAttachment( thePlayer, 'blood_point', Vector( 0, 0 , -10 ), EulerAngles(0,0,0) );

						ent.PlayEffectSingle('embers_red');
						ent.StopEffect('embers_red');

						//ent.PlayEffectSingle('blood_color_all');

						ent.AddTag('ACS_Wings_Entity');

						thePlayer.EnableCollisions(false);
						thePlayer.EnableCharacterCollisions(false);

						PlayerPlayAnimationGlide( 'swim_underwater_f_fast_ACS' );

						((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).FreezePoseFadeIn(0.875);

						thePlayer.SoundEvent("monster_dettlaff_monster_movement_wing_flap_long_massive");

						thePlayer.SoundEvent("monster_dettlaff_monster_movement_whoosh_large");

						if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
						{
							thePlayer.AddTag('ACS_HideWeaponOnDodge');
						}

						if (!thePlayer.HasTag('aard_sword_equipped'))
						{
							ACS_Weapon_Invisible();
						}

						FactsAdd("ACS_Is_Gliding", 1, -1);
					}
				}
			}
			else if ( IsReleased( action ) )
			{
				if (FactsQuerySum("ACS_Is_Gliding") > 0)
				{
					theGame.ReleaseNoSaveLock( ACS_Glide_Savelock_ID );

					thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Roll,					'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Parry,				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Movement,				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Gliding');
					thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Gliding');

					RemoveTimer('ACS_Gliding');

					thePlayer.StopEffect('glide_fx');
					thePlayer.PlayEffectSingle('glide_fx');
					thePlayer.StopEffect('glide_fx');

					thePlayer.StopEffect( 'bruxa_dash_trails' );
					thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );
					thePlayer.StopEffect( 'bruxa_dash_trails' );

					thePlayer.PlayEffectSingle('embers_particles_test');
					thePlayer.StopEffect('embers_particles_test');

					thePlayer.EnableCollisions(true);
					thePlayer.EnableCharacterCollisions(true);

					ACS_Wings_Entity().BreakAttachment();

					ACS_Wings_Entity().Teleport(thePlayer.GetWorldPosition() + Vector( 0, -200, 0 ) );

					ACS_Wings_Entity().DestroyAfter(0.025);

					((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePoseFadeOut(0.1);

					((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePose();

					if ( thePlayer.IsOnGround() )
					{
						if ( thePlayer.IsAnyWeaponHeld() )
						{
							if (thePlayer.IsWeaponHeld('fist') )
							{
								PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01_fist' );
							}
							else
							{
								PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01' );
							}
						}
						else
						{
							PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01_fist' );
						}
					}
					else
					{
						PlayerPlayAnimation( 'ex_fall_start' );
					}

					thePlayer.SoundEvent("monster_dettlaff_monster_movement_wing_flap_long_hard");

					thePlayer.SoundEvent("monster_dettlaff_monster_movement_land");

					if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') )
					{
						if (!thePlayer.HasTag('aard_sword_equipped'))
						{
							ACS_Weapon_Respawn();
						}
						
						thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

						thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
					}

					FactsRemove("ACS_Is_Gliding");
				}
			} 
		}
	}

	event OnWerewolfJump ( action : SInputAction )
	{
		var ent														: CEntity;
	
		if ( ACS_Enabled() )
		{
			if (ACS_Transformation_Activated_Check())
			{
				return false;
			}

			if ( IsPressed(action) )
			{

			}
			else if ( IsReleased( action ) )
			{
				
			}
		}
	}

	event OnCbtDodge( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			if( thePlayer.IsActionAllowed(EIAB_Dodge)  )
			{
				if (thePlayer.GetBIsInputAllowed())
				{
					if (ACS_Transformation_Werewolf_Check())
					{
						if ( IsPressed(action) )
						{
							ACS_Transformation_Werewolf_Dodge();
						}
					}
				}
			}

			return false;
		}

		altSignCastingThing();

		if(altSignCasting
		&& !theInput.LastUsedPCInput() && !thePlayer.IsCastingSign() && theInput.IsActionPressed('CastSign' ) && !GetWitcherPlayer().IsCurrentSignChanneled())
		{
			//AltCastSign(ST_Quen);
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Dodge)) 
		{
			return false;
		}

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		if ( theInput.LastUsedPCInput() )
		{		
			if ( IsPressed(action) )
			{
				Rage_Counter_Dodge_Manager(3);

				if ( ACS_Enabled() ) 
				{
					if( BruxaDashCallTime + DOUBLE_TAP_WINDOW_DODGE >= theGame.GetEngineTimeAsSeconds() )
					{
						BruxaDashDoubleTap = true;
					}
					else
					{
						BruxaDashDoubleTap = false;	
					}

					if
					(
					(theInput.IsActionPressed('Sprint') || thePlayer.GetIsSprinting())
					&& ACS_CombatJump_Enabled()
					)
					{
						action_interrupt_on_jump(); //ACS

						thePlayer.substateManager.QueueStateExternal('Jump');

						ACS_ExplorationDelayHack();
					}
					else
					{
						if (BruxaDashDoubleTap)
						{
							if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
							{
								if (ACS_BruxaLeapAttack_Enabled() && thePlayer.IsInCombat())
								{
									JumpAttackCombat();
								}
								else if ( ACS_BruxaDash_Enabled() )
								{
									BruxaDash_Combat();
								}
								else
								{
									if (thePlayer.HasTag('blood_sucking'))
									{
										bruxa_blood_suck_end_actual();
									}

									ACS_BruxaDodgeSlideBackInit();
								}
							}
							else
							{
								if ( ACS_BruxaDash_Enabled() )
								{
									BruxaDash_Combat();
								}
								else
								{
									if (thePlayer.HasTag('blood_sucking'))
									{
										bruxa_blood_suck_end_actual();
									}

									ACS_BruxaDodgeSlideBackInit();
								}
							}
						}
						else
						{
							if (thePlayer.HasTag('blood_sucking'))
							{
								bruxa_blood_suck_end_actual();
							}

							ACS_BruxaDodgeSlideBackInit();
						}
					}

					BruxaDashCallTime = theGame.GetEngineTimeAsSeconds();

					return true;
				}
				else
				{
					thePlayer.EvadePressed(EBAT_Dodge);
				}
			}
		}
		else
		{
			if ( IsPressed(action) )
			{
				Rage_Counter_Dodge_Manager(3);

				if ( ACS_Enabled() ) 
				{
					if( BruxaDashCallTime + DOUBLE_TAP_WINDOW_DODGE >= theGame.GetEngineTimeAsSeconds() )
					{
						BruxaDashDoubleTap = true;
					}
					else
					{
						BruxaDashDoubleTap = false;	
					}

					if (BruxaDashDoubleTap)
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							if (ACS_BruxaLeapAttack_Enabled() && thePlayer.IsInCombat())
							{
								JumpAttackCombat();
							}
							else if ( ACS_BruxaDash_Enabled() )
							{
								BruxaDash_Combat();
							}
							else
							{
								if (thePlayer.HasTag('blood_sucking'))
								{
									bruxa_blood_suck_end_actual();
								}

								ACS_BruxaDodgeSlideBackInit();
							}
						}
						else
						{
							if ( ACS_BruxaDash_Enabled() )
							{
								BruxaDash_Combat();
							}
							else
							{
								if (thePlayer.HasTag('blood_sucking'))
								{
									bruxa_blood_suck_end_actual();
								}

								ACS_BruxaDodgeSlideBackInit();
							}
						}
					}
					else
					{
						if (thePlayer.HasTag('blood_sucking'))
						{
							bruxa_blood_suck_end_actual();
						}

						ACS_BruxaDodgeSlideBackInit();
					}
					
					BruxaDashCallTime = theGame.GetEngineTimeAsSeconds();

					return true;
				}
				else
				{
					thePlayer.EvadePressed(EBAT_Dodge);
				}
			}
		}
	}

	event OnCbtRoll( action : SInputAction )
	{
		if (ACS_Transformation_Activated_Check())
		{
			if( thePlayer.IsActionAllowed(EIAB_Roll)  )
			{
				if (thePlayer.GetBIsInputAllowed())
				{
					if (ACS_Transformation_Werewolf_Check())
					{
						if ( IsPressed(action) )
						{
							ACS_Transformation_Werewolf_Dodge();
						}
					}
				}
			}

			return false;
		}

		altSignCastingThing();

		if(altSignCasting
		&& !theInput.LastUsedPCInput() && !thePlayer.IsCastingSign() && theInput.IsActionPressed('CastSign' ) && !GetWitcherPlayer().IsCurrentSignChanneled())
		{
			//AltCastSign(ST_Aard);
			return false;
		}

		if( !thePlayer.IsActionAllowed(EIAB_Roll)) 
		{
			return false;
		}

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		if ( theInput.LastUsedPCInput() )
		{
			if ( IsPressed( action ) )
			{
				Rage_Counter_Dodge_Manager(3);

				if ( ACS_Enabled() ) 
				{
					if( TeleportCallTime + DOUBLE_TAP_WINDOW_DODGE >= theGame.GetEngineTimeAsSeconds() )
					{
						TeleportDoubleTap = true;
					}
					else
					{
						TeleportDoubleTap = false;	
					}

					if
					(
					(theInput.IsActionPressed('Sprint') || thePlayer.GetIsSprinting())
					&& ACS_CombatJump_Enabled()
					)
					{
						action_interrupt_on_jump(); //ACS

						thePlayer.substateManager.QueueStateExternal('Jump');

						ACS_ExplorationDelayHack();
					}
					else
					{
						if (TeleportDoubleTap)
						{
							if ( ACS_WildHuntBlink_Enabled() )
							{
								if (thePlayer.HasTag('blood_sucking'))
								{
									bruxa_blood_suck_end_actual();
								}

								ACS_WildHuntBlinkInit();
							}
							else
							{
								if (thePlayer.HasTag('blood_sucking'))
								{
									bruxa_blood_suck_end_actual();
								}

								ACS_RollInit();
							}
						}
						else
						{
							if (thePlayer.HasTag('blood_sucking'))
							{
								bruxa_blood_suck_end_actual();
							}

							ACS_RollInit();
						}
					}

					TeleportCallTime = theGame.GetEngineTimeAsSeconds();

					return true;
				} //ACS
				else
				{
					thePlayer.EvadePressed(EBAT_Roll);
				}
			}
		}
		else
		{
			if ( IsPressed( action ) )
			{
				Rage_Counter_Dodge_Manager(3);

				if ( ACS_Enabled() ) 
				{
					if( TeleportCallTime + DOUBLE_TAP_WINDOW_DODGE >= theGame.GetEngineTimeAsSeconds() )
					{
						TeleportDoubleTap = true;
					}
					else
					{
						TeleportDoubleTap = false;	
					}

					if (TeleportDoubleTap)
					{
						if ( ACS_WildHuntBlink_Enabled() )
						{
							if (thePlayer.HasTag('blood_sucking'))
							{
								bruxa_blood_suck_end_actual();
							}

							ACS_WildHuntBlinkInit();
						}
						else
						{
							if (thePlayer.HasTag('blood_sucking'))
							{
								bruxa_blood_suck_end_actual();
							}

							ACS_RollInit();
						}
					}
					else
					{
						if (thePlayer.HasTag('blood_sucking'))
						{
							bruxa_blood_suck_end_actual();
						}

						ACS_RollInit();
					}

					TeleportCallTime = theGame.GetEngineTimeAsSeconds();

					return true;
				} 
				else
				{
					thePlayer.StartDodgeTimer();
				}
			}
			else if ( IsReleased( action ) )
			{
				if ( thePlayer.IsDodgeTimerRunning() )
				{
					thePlayer.StopDodgeTimer();

					if ( !thePlayer.IsInsideInteraction() )
					{
						thePlayer.EvadePressed(EBAT_Roll);
					}	
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function SetPlayerTarget()
	{
		if (ACS_GetTargetMode() == 1)
		{
			if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
			{
				actor = (CActor)( thePlayer.GetDisplayTarget() );	
			}
			else
			{
				thePlayer.FindMoveTarget();

				if ( thePlayer.moveTarget )
				{
					actor = (CActor)( thePlayer.moveTarget );	
				}	
			}
		}
		else
		{
			if ( thePlayer.GetTarget() )
			{
				actor = (CActor)( thePlayer.GetTarget() );	
			}
		}
	
		if( actor 
		&& ACS_AttitudeCheck ( actor )
		&& actor.IsInCombat()
		)
		{
			thePlayer.SetPlayerTarget( actor );

			thePlayer.SetPlayerCombatTarget( actor );

			thePlayer.UpdateDisplayTarget( true );

			//thePlayer.UpdateLookAtTarget();
		}
	}

	function ACS_INIT()
	{
		if (ACS_GetTargetMode() == 1)
		{
			if ( thePlayer.IsHardLockEnabled() && thePlayer.GetDisplayTarget() )
			{
				actor = (CActor)( thePlayer.GetDisplayTarget() );	
			}
			else
			{
				if (thePlayer.HasTag('acs_bow_active') || thePlayer.HasTag('acs_crossbow_active'))
				{
					actor = (CActor)( thePlayer.GetDisplayTarget() );	
				}
				else
				{
					if ( thePlayer.moveTarget )
					{
						actor = (CActor)( thePlayer.moveTarget );	
					}
				}
			}
		}
		else
		{
			if ( thePlayer.GetDisplayTarget() )
			{
				actor = (CActor)( thePlayer.GetDisplayTarget() );	
			}
		}

		targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
			
		dist = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 1.25;
		
		distJump = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius());
		
		distVampSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 2;

		distClawWhirl = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 1.5;
	
		movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();
		
		movementAdjustor.CancelAll();
		
		ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust' );
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if (thePlayer.HasTag('acs_bow_active') || thePlayer.HasTag('acs_crossbow_active'))
			{
				movementAdjustor.AdjustmentDuration( ticket, 0.125 );
			}
			else
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					movementAdjustor.AdjustmentDuration( ticket, 0.1 );
				}
				else if( targetDistance > 1.5 * 1.5 && targetDistance <= 2 * 2 ) 
				{
					movementAdjustor.AdjustmentDuration( ticket, 0.125 );
				}
				else
				{
					movementAdjustor.AdjustmentDuration( ticket, 0.25 );
				}
			}
		}
		else
		{
			movementAdjustor.AdjustmentDuration( ticket, 0.25 );
		}
		
		movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());
		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );
		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );

		if (ACS_Player_Scale() > 1)
		{
			dist -= ACS_Player_Scale() * 0.25;

			distJump -= ACS_Player_Scale() * 0.25;

			distVampSpecialDash -= ACS_Player_Scale() * 0.25;

			distClawWhirl -= ACS_Player_Scale() * 0.25;

			targetDistance += ACS_Player_Scale() * 0.25;
		}
		else if (ACS_Player_Scale() < 1)
		{
			dist += ACS_Player_Scale() * 0.5;

			distJump += ACS_Player_Scale() * 0.5;

			distVampSpecialDash += ACS_Player_Scale() * 0.5;

			distClawWhirl += ACS_Player_Scale() * 0.5;

			targetDistance -= ACS_Player_Scale() * 0.25;
		}

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
	}

	function PlayerPlayAnimation(animation_name: name)
	{
		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( animation_name, 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.875f) );
	}

	function PlayerPlayAnimationWraith(animation_name: name)
	{
		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( animation_name, 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.15f, 1.0f) );
	}

	function PlayerPlayAnimationGlide(animation_name: name)
	{
		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( animation_name, 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 1.0f) );
	}

	function PlayerPlayAnimationInterrupt(animation_name: name)
	{	
		thePlayer.GetRootAnimatedComponent().PlaySlotAnimationAsync( animation_name, 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f) );
	}
	
	function MovementAdjustWraith()
	{		
		ACS_INIT();
		
		movementAdjustor.AdjustLocationVertically( ticket, true );
		movementAdjustor.ScaleAnimationLocationVertically( ticket, true );
	}
	
	function MovementAdjustBruxaDash()
	{
		ACS_INIT();

		if (thePlayer.IsSwimming())
		{
			movementAdjustor.AdjustLocationVertically( ticket, true );
			movementAdjustor.ScaleAnimationLocationVertically( ticket, true );
		}

		movementAdjustor.AdjustmentDuration( ticket, 0.5 );

		if(!thePlayer.HasTag('ACS_Camo_Active'))
		{
			//thePlayer.StopAllEffects();
		}
		
		if (thePlayer.HasTag('ACS_ember_particles_active'))
		{
			thePlayer.StopEffect('embers_particles_test');
			thePlayer.PlayEffectSingle('embers_particles_test');
		}
	}
	
	function MovementAdjust()
	{
		ACS_INIT();

		if(!thePlayer.HasTag('ACS_Camo_Active'))
		{
			//thePlayer.StopAllEffects();
		}
		
		if (thePlayer.HasTag('ACS_ember_particles_active'))
		{
			thePlayer.StopEffect('embers_particles_test');
			thePlayer.PlayEffectSingle('embers_particles_test');
		}
	
		movementAdjustor.AdjustLocationVertically( ticket, true );
		movementAdjustor.ScaleAnimationLocationVertically( ticket, true );
	}

	function UpdateHeading()
	{
		//thePlayer.UpdateCustomRotationHeading('ACS_Movement_Regular', VecHeading(actor.GetWorldPosition() - thePlayer.GetWorldPosition()));
		//thePlayer.SetCustomRotation('ACS_Movement_Regular', VecHeading(actor.GetWorldPosition() - thePlayer.GetWorldPosition()), 0.f, 0.2f, false);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function DeactivateThings()
	{
		if ( thePlayer.IsInCombat() || thePlayer.IsCombatMusicEnabled() )
		{
			if (!thePlayer.HasTag('blood_sucking'))
			{
				thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

				thePlayer.SetCanPlayHitAnim(true); 
				
				thePlayer.EnableCharacterCollisions(true); 
				if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 
				thePlayer.RemoveBuffImmunity_AllNegative('acs_dodge'); 
				thePlayer.RemoveBuffImmunity_AllNegative('acs_finisher');
				thePlayer.SetIsCurrentlyDodging(false);

				if (thePlayer.HasTag('ACS_HideWeaponOnDodge') 
				//&& !thePlayer.HasTag('blood_sucking')
				)
				{
					if (!thePlayer.HasTag('aard_sword_equipped'))
					{
						ACS_Weapon_Respawn();
					}

					thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

					thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
				}
			}
		}

		thePlayer.RemoveTimer('curio_script_watcher_whirl');

		thePlayer.UnblockAction(EIAB_SpecialAttackLight, 'curio_nowhirl_weapons');

		

		sword_destroy();

		if ( !thePlayer.HasTag('axii_sword_equipped') || !thePlayer.IsGuarded() )
		{
			RemoveTimer('ACS_Shield_Spawn_Delay');

			ACS_Axii_Shield_Destroy_IMMEDIATE();
		}
		
		if ( !thePlayer.HasTag('quen_sword_equipped') )
		{
			Quen_Monsters_Despawn();
		}

		if ( !thePlayer.HasTag('aard_sword_equipped') )
		{
			AardPull_Deactivate();
		}

		if ( !thePlayer.HasTag('vampire_claws_equipped') || !thePlayer.HasTag('ACS_Camo_Active') )
		{
			Bruxa_Camo_Decoy_Deactivate();
		}

		thePlayer.DestroyEffect('mind_control');
	}

	function DeactivateThings_BruxaDash()
	{
		camera = (CCustomCamera)theCamera.GetTopmostCameraObject();

		camera.StopAnimation('camera_shake_loop_lvl1_1');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_1' );

		camera.StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_5' );

		if (thePlayer.IsInCombat() || thePlayer.IsCombatMusicEnabled() )
		{
			if (!thePlayer.HasTag('blood_sucking'))
			{
				if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		
			}
		}

		thePlayer.RemoveTimer('curio_script_watcher_whirl');

		thePlayer.UnblockAction(EIAB_SpecialAttackLight, 'curio_nowhirl_weapons');

		

		sword_destroy();

		if ( !thePlayer.HasTag('axii_sword_equipped') || !thePlayer.IsGuarded() )
		{
			RemoveTimer('ACS_Shield_Spawn_Delay');

			ACS_Axii_Shield_Destroy_IMMEDIATE();
		}
		
		if ( !thePlayer.HasTag('quen_sword_equipped') )
		{
			Quen_Monsters_Despawn();
		}

		if ( !thePlayer.HasTag('aard_sword_equipped') )
		{
			AardPull_Deactivate();
		}

		if ( !thePlayer.HasTag('vampire_claws_equipped') || !thePlayer.HasTag('ACS_Camo_Active') )
		{
			Bruxa_Camo_Decoy_Deactivate();
		}

		thePlayer.DestroyEffect('mind_control');
	}

	function action_interrupt()
	{
		if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
		//&& !thePlayer.HasTag('blood_sucking')
		)
		{
			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Respawn();
			}
			
			thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

			thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
		}

		//thePlayer.RaiseEvent( 'AttackInterrupt' );

		//if (thePlayer.IsInCombat())
		//{
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

			movementAdjustor.CancelAll();

			ticket = movementAdjustor.CreateNewRequest( 'ACS_Action_Interrupt_Adjust' );

			actor = (CActor)( thePlayer.GetTarget() );
				
			movementAdjustor.AdjustmentDuration( ticket, 0.25 );

			movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());
			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );
			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );

			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
			{	
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
				}
			}

			if (thePlayer.IsAlive() && !thePlayer.HasTag('igni_sword_equipped') && !thePlayer.HasTag('igni_secondary_sword_equipped') )
			{
				PlayerPlayAnimationInterrupt( '' );
			}
			
			if( !thePlayer.HasTag('axii_sword_equipped') && !thePlayer.IsGuarded() )
			{
				//if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );}
			}
		//}
	}

	function action_interrupt_with_igni_sword()
	{
		if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
		//&& !thePlayer.HasTag('blood_sucking')
		)
		{
			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Respawn();
			}
			
			thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

			thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
		}

		if( thePlayer.IsAlive()) 
		{
			thePlayer.ClearAnimationSpeedMultipliers();

			PlayerPlayAnimationInterrupt( '' );
		}
	}

	function action_interrupt_on_jump()
	{
		if (thePlayer.IsAlive() 
		&& !thePlayer.IsInAir()
		)
		{
			if (thePlayer.HasTag('ACS_Size_Adjusted'))
			{
				Grow_Geralt_Immediate();

				thePlayer.RemoveTag('ACS_Size_Adjusted');
			}

			if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
			//&& !thePlayer.HasTag('blood_sucking')
			)
			{
				if (!thePlayer.HasTag('aard_sword_equipped'))
				{
					ACS_Weapon_Respawn();
				}
				
				thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

				thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
			}
			
			if (!ACS_W3EE_Installed() && !ACS_W3EE_Enabled())
			{
				movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();
				movementAdjustor.CancelAll();
				thePlayer.ClearAnimationSpeedMultipliers();
				PlayerPlayAnimationInterrupt( '' );
			}
			else
			{
				if (ACS_CombatToExplorationCheck()
					&& !thePlayer.IsInCombat())
				{
					movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();
					movementAdjustor.CancelAll();
					thePlayer.ClearAnimationSpeedMultipliers();
					PlayerPlayAnimationInterrupt( '' );
				}
			}
		}
	}

	function action_interrupt_on_movement()
	{
		if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
		&& !thePlayer.HasTag('blood_sucking')
		)
		{
			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Respawn();
			}
			
			thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

			thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
		}

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

		movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		movementAdjustor.CancelAll();

		ticket = movementAdjustor.CreateNewRequest( 'ACS_Action_Interrupt_On_Movement_Adjust' );

		actor = (CActor)( thePlayer.GetTarget() );
			
		movementAdjustor.AdjustmentDuration( ticket, 0.25 );

		movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());
		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );
		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
		}

		if (thePlayer.IsAlive())
		{
			PlayerPlayAnimationInterrupt( '' );
		}

		if( !thePlayer.HasTag('axii_sword_equipped') && !thePlayer.IsGuarded() )
		{
			//if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );}
		}

		thePlayer.RemoveTag('ACS_Special_Dodge');
	}

	function finisherUnblockAction()
	{
		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_Roll,					'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_Parry, 				'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Finisher');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Finisher');

		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(true);
		thePlayer.EnableCharacterCollisions(true); 
		thePlayer.RemoveBuffImmunity_AllNegative('ACS_Finisher_Immune_Negative'); 
		thePlayer.RemoveBuffImmunity_AllCritical('ACS_Finisher_Immune_Critical'); 

		if ( theGame.GetDifficultyLevel() == EDM_Hardcore)
		{
			ACS_FinisherHeal();
		}

		thePlayer.RemoveTag('ACS_IsPerformingFinisher');
	}

	function ACS_PerformFinisher()
	{
		combatTarget = thePlayer.GetTarget();
		
		finisherDist = 2.75f;

		if (ACS_Player_Scale() > 1)
		{
			finisherDist += ACS_Player_Scale() * 0.75;
		}

		if( 
		combatTarget 
		&& VecDistanceSquared2D( thePlayer.GetWorldPosition(), combatTarget.GetNearestPointInBothPersonalSpaces( thePlayer.GetWorldPosition() ) ) < finisherDist * finisherDist
		)
		{
			//RemoveTimer('Grow_Geralt_Delay');
			//RemoveTimer('Grow_Geralt_Repeat');
			//RemoveTimer('Shrink_Geralt_Repeat');
			//RemoveTimer('Grow_Geralt_Immediate_Repeat');
			//RemoveTimer('Remove_Player_Grow_Immediate');

			action_interrupt_with_igni_sword();

			movementAdjustor.CancelAll();

			if (thePlayer.HasTag('ACS_Size_Adjusted'))
			{
				Grow_Geralt_Immediate_Fast();

				thePlayer.RemoveTag('ACS_Size_Adjusted');
			}

			//AddTimer( 'ACS_Set_Player_Scale', 0.01, true );

			thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Finisher');
			thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Finisher');
			thePlayer.BlockAction( EIAB_Signs, 				'ACS_Finisher');
			thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Finisher');
			thePlayer.BlockAction( EIAB_Fists, 				'ACS_Finisher');
			thePlayer.BlockAction( EIAB_Parry, 				'ACS_Finisher');
			thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Finisher');
			thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Finisher');
			thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Finisher');
			thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Finisher');
			thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Finisher');
			thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Finisher');
			thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Finisher');
			thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Finisher');
			thePlayer.BlockAction( EIAB_Dodge,				'ACS_Finisher');
			thePlayer.BlockAction( EIAB_Roll,				'ACS_Finisher');
			thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Finisher');
			thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Finisher');
			thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Finisher');
			thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Finisher');
			thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Finisher');

			thePlayer.SetGuarded(false);
			thePlayer.OnGuardedReleased();

			ACS_Axii_Shield_Destroy_IMMEDIATE();

			thePlayer.AddTag('ACS_IsPerformingFinisher');

			thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
			thePlayer.SetCanPlayHitAnim(false); 
			thePlayer.EnableCharacterCollisions(false); 
			thePlayer.AddBuffImmunity_AllNegative('ACS_Finisher_Immune_Negative', true); 
			thePlayer.AddBuffImmunity_AllCritical('ACS_Finisher_Immune_Critical', true); 

			AddTimer('ACS_Finisher_Unblock_Action', 0.75, false);

			combatTarget.Kill( 'AutoFinisher', false, thePlayer );
			thePlayer.SetFinisherVictim( combatTarget );
			forcedFinisherVictim = combatTarget;
			thePlayer.CleanCombatActionBuffer();
			thePlayer.OnBlockAllCombatTickets( true );

			moveTargets.Clear();
			moveTargets = thePlayer.GetMoveTargets();
					
			for( i = 0; i < moveTargets.Size(); i += 1 )
			{
				if( combatTarget != moveTargets[i] )
					moveTargets[i].SignalGameplayEvent( 'InterruptChargeAttack' );
			}	
			
			if( theGame.GetInGameConfigWrapper().GetVarValue( 'Gameplay', 'AutomaticFinishersEnabled' ) == "true" )
				combatTarget.AddAbility( 'ForceFinisher', false );
			
			if( combatTarget.HasTag( 'ForceFinisher' ) )
				combatTarget.AddAbility( 'ForceFinisher', false );
				
			combatTarget.SignalGameplayEvent( 'ForceFinisher' );
			
			thePlayer.FindMoveTarget();

			AddTimer( 'ACS_SignalFinisher', 0.2, false );
		}
	}
	
	timer function ACS_SignalFinisher( time : float , id : int )
	{
		forcedFinisherVictim.SignalGameplayEvent( 'Finisher' );
		forcedFinisherVictim = NULL;
	}

	timer function ACS_RemoveCoveredBlood( time : float , id : int )
	{
		RemoveAllCoveredBlood();
	}

	function RemoveAllCoveredBlood()
	{
		thePlayer.DestroyEffect('covered_blood_red_ACS');

		thePlayer.DestroyEffect('covered_blood_black_ACS');

		thePlayer.DestroyEffect('covered_blood_yellow_ACS');

		thePlayer.DestroyEffect('covered_blood_green_ACS');

		if (GetACSTransfomrationWerewolf())
		{
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_test');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_left');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_right');

			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_test_black');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_left_black');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_right_black');

			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_test_green');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_left_green');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_right_green');

			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_test_yellow');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_left_yellow');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_claws_right_yellow');

			GetACSTransfomrationWerewolf().StopEffect('blood_effect_jaw');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_jaw_black');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_jaw_green');
			GetACSTransfomrationWerewolf().StopEffect('blood_effect_jaw_yellow');
		}
		
	}

	function NPC_BloodCovered_Effect(action : W3DamageAction)
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;
	
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		if (playerAttacker 
		&& npc
		&& !action.WasDodged() 
		&& !(((W3Action_Attack)action).IsParried())
		)
		{
			theGame.GetMonsterParamsForActor(npc, mc, tmpName, tmpBool, tmpBool, tmpBool);

			RemoveAllCoveredBlood();

			if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
			{
				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
				{
					if (npc.HasAbility('mon_lessog_base')
					|| npc.HasAbility('mon_sprigan_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');
					} 
					else
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');
					}
				}
			}
			else if( ((CNewNPC)npc).GetBloodType() == BT_Green) 
			{
				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
				{
					if (npc.HasAbility('mon_kikimore_base')
					|| npc.HasAbility('mon_black_spider_base')
					|| npc.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_green_ACS');
					}
				}
			}
			else if( ((CNewNPC)npc).GetBloodType() == BT_Yellow) 
			{
				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
				{
					if (npc.HasAbility('mon_archespor_base'))
					{
						thePlayer.PlayEffect('covered_blood_yellow_ACS');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');
					}
				}
			}
			else if( ((CNewNPC)npc).GetBloodType() == BT_Black) 
			{
				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
				{
					if ( mc == MC_Vampire ) 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (npc.HasAbility('mon_golem_base')
						|| npc.HasAbility('mon_djinn')
						|| npc.HasAbility('mon_gargoyle')
						)
						{
							thePlayer.PlayEffect('covered_blood_black_ACS');
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');
						}
					}
					else
					{
						thePlayer.PlayEffect('covered_blood_black_ACS');
					}
				}
			}
			else
			{
				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) <= 5 * 5 )
				{
					thePlayer.PlayEffect('covered_blood_red_ACS');
				}
			}

			RemoveTimer('ACS_RemoveCoveredBlood');
			AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
		}
	}
	
	function NPC_Death_Effects(action : W3DamageAction)
	{
		var playerRot 				: EulerAngles;
		var spawnPos				: Vector;
	
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		if (playerAttacker && npc
		&& !action.WasDodged() 
		&& !(((W3Action_Attack)action).IsParried()))
		{
			if ((npc.UsesEssence() && (npc.GetCurrentHealth() - action.processedDmg.essenceDamage <= 0.1)) || !npc.IsAlive())
			{
				if (npc.HasAbility('mon_vampiress_base'))
				{
					if (!npc.HasTag('ACS_Unseen_Blade_Summon_Trigger'))
					{
						if(!ACS_Blade_Of_The_Unseen() && !ACSVampireMonster())
						{
							number_of_bruxae_slain += 1;
							
							if (number_of_bruxae_slain == 1)
							{
								GetWitcherPlayer().DisplayHudMessage( "Ignorance is fatal." );

								RemoveTimer('unseen_blade_spawn_delay');
								AddTimer('unseen_blade_spawn_delay', 305, true);
							}
							else if (number_of_bruxae_slain == 2)
							{
								GetWitcherPlayer().DisplayHudMessage( "None escape the shadow of their deeds." );

								RemoveTimer('unseen_blade_spawn_delay');
								AddTimer('unseen_blade_spawn_delay', 155, true);
							}
							else if (number_of_bruxae_slain == 3)
							{
								GetWitcherPlayer().DisplayHudMessage( "Prepare yourself, witcher." );

								RemoveTimer('unseen_blade_spawn_delay');
								AddTimer('unseen_blade_spawn_delay', 5, true);
							}

							npc.AddTag('ACS_Unseen_Blade_Summon_Trigger');
						}
						else if(ACS_Blade_Of_The_Unseen() && ACS_Blade_Of_The_Unseen().IsAlive())
						{
							playerRot = thePlayer.GetWorldRotation();

							playerRot.Yaw += 180;

							spawnPos = theCamera.GetCameraPosition() + VecFromHeading(theCamera.GetCameraHeading()) * 10;

							theGame.GetWorld().NavigationFindSafeSpot(spawnPos, 0.5f, 20.f, spawnPos);

							ACS_Blade_Of_The_Unseen().TeleportWithRotation(TraceFloor(spawnPos), playerRot);

							npc.AddTag('ACS_Unseen_Blade_Summon_Trigger');
						}
					}
				}
			}
			else if ((npc.UsesVitality() && (npc.GetCurrentHealth() - action.processedDmg.vitalityDamage <= 0.1)) || !npc.IsAlive())
			{
				
			}
		}
	}
	
	function Fear_Stack()
	{
		var fear_actors																	: array<CActor>;
		var k 																			: int;
		var fear_actor																	: CActor;
		var animatedComponentFearActor													: CAnimatedComponent;
		var movementAdjustorFearActor													: CMovementAdjustor;
		var ticketFearActor																: SMovementAdjustmentRequestTicket;

		fear_actors.Clear();
			
		fear_actors = thePlayer.GetNPCsAndPlayersInRange( 20, 4, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors + FLAG_Attitude_Hostile);

		if( fear_actors.Size() > 0 )
		{
			for( k = 0; k < fear_actors.Size(); k += 1 )
			{
				fear_actor = fear_actors[k];

				animatedComponentFearActor = (CAnimatedComponent)fear_actor.GetComponentByClassName( 'CAnimatedComponent' );

				movementAdjustorFearActor = fear_actor.GetMovingAgentComponent().GetMovementAdjustor();

				targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), fear_actor.GetWorldPosition() ) ;
			
				if ( fear_actor 
				&& fear_actor.IsHuman()
				&& fear_actor.IsMan()
				&& ((CNewNPC)fear_actor).GetNPCType() != ENGT_Quest
				&& !fear_actor.HasTag('ACS_Swapped_To_Shield')
				&& RandF() < 0.5
				)
				{
					if (!fear_actor.HasTag('ACS_1st_Fear_Stack')
					&& !fear_actor.HasTag('ACS_2nd_Fear_Stack')
					)
					{
						fear_actor.AddTag('ACS_1st_Fear_Stack');
					}
					else if (fear_actor.HasTag('ACS_1st_Fear_Stack')
					&& !fear_actor.HasTag('ACS_2nd_Fear_Stack')
					)
					{
						fear_actor.AddTag('ACS_2nd_Fear_Stack');
					}
					else if (fear_actor.HasTag('ACS_1st_Fear_Stack')
					&& fear_actor.HasTag('ACS_2nd_Fear_Stack')	
					)
					{
						if( RandF() < 0.5 ) 
						{
							if (!fear_actor.HasTag('ACS_Final_Fear_Stack'))
							{
								if (!fear_actor.HasAbility('DisableFinishers'))
								{
									fear_actor.AddAbility( 'DisableFinishers', true);
								}

								if (fear_actor.HasAbility('ForceFinisher'))
								{
									fear_actor.RemoveAbility( 'ForceFinisher');
								} 

								fear_actor.SignalGameplayEvent('DisableFinisher');

								if( ((CNewNPC)fear_actor).IsShielded( NULL ) )
								{
									((CNewNPC)fear_actor).ProcessShieldDestruction();
								}

								//fear_actor.SignalGameplayEvent('LeaveCurrentCombatStyle');

								//fear_actor.SetBehaviorVariable( 'combatTauntType', 0.f );

								(fear_actor.GetInventory().GetItemEntityUnsafe( fear_actor.GetInventory().GetItemFromSlot( 'r_weapon' ) )).SetHideInGame(true);

								fear_actor.AddEffectDefault( EET_Blindness, fear_actor, 'console' );

								ticketFearActor = movementAdjustorFearActor.GetRequest( 'ACS_NPC_Fear_Rotate');
								movementAdjustorFearActor.CancelByName( 'ACS_NPC_Fear_Rotate' );
								movementAdjustorFearActor.CancelAll();

								ticketFearActor = movementAdjustorFearActor.CreateNewRequest( 'ACS_NPC_Fear_Rotate' );
								movementAdjustorFearActor.AdjustmentDuration( ticketFearActor, 0.25 );
								movementAdjustorFearActor.MaxRotationAdjustmentSpeed( ticketFearActor, 500000 );

								if( targetDistance <= 3 * 3 ) 
								{
									if (RandF() < 0.33)
									{
										fear_actor.AddTag('ACS_Scared_On_Ground');

										movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer );

										if (RandF() < 0.5)
										{
											animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_ground_start_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
										}
										else
										{
											animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_ground_start_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
										}
									}
									else
									{
										fear_actor.AddTag('ACS_Scared_Standing');

										if (RandF() < 0.5)
										{
											movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer, RandRangeF(225,135) );

											animatedComponentFearActor.PlaySlotAnimationAsync ( 'dialogue_man_ex_scared_run_loop', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
										}
										else
										{
											movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer );

											if (RandF() < 0.5)
											{
												animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_loop_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
											}
											else
											{
												animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_loop_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
											}
										}
									}
								}
								else if( targetDistance > 3 * 3 && targetDistance <= 20 * 20 ) 
								{
									if (RandF() < 0.25)
									{
										fear_actor.AddTag('ACS_Scared_On_Ground');

										movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer );

										if (RandF() < 0.5)
										{
											animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_ground_start_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
										}
										else
										{
											animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_ground_start_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
										}
									}
									else
									{
										fear_actor.AddTag('ACS_Scared_Standing');

										if (RandF() < 0.5)
										{
											movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer, RandRangeF(225,135) );

											animatedComponentFearActor.PlaySlotAnimationAsync ( 'dialogue_man_ex_scared_run_loop', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
										}
										else
										{
											movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer );

											if (RandF() < 0.5)
											{
												animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_loop_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
											}
											else
											{
												animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_loop_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
											}
										}
									}
								}

								fear_actor.AddTag('ACS_Final_Fear_Stack');
							}
						}
					}
				}
			}
		}
	}

	function Finisher_Fear()
	{
		var fear_actors																	: array<CActor>;
		var k 																			: int;
		var fear_actor																	: CActor;
		var animatedComponentFearActor													: CAnimatedComponent;
		var movementAdjustorFearActor													: CMovementAdjustor;
		var ticketFearActor																: SMovementAdjustmentRequestTicket;

		fear_actors.Clear();
			
		fear_actors = thePlayer.GetNPCsAndPlayersInRange( 3, 50, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors + FLAG_Attitude_Hostile);

		if( fear_actors.Size() > 0 )
		{
			for( k = 0; k < fear_actors.Size(); k += 1 )
			{
				fear_actor = fear_actors[k];

				animatedComponentFearActor = (CAnimatedComponent)fear_actor.GetComponentByClassName( 'CAnimatedComponent' );

				movementAdjustorFearActor = fear_actor.GetMovingAgentComponent().GetMovementAdjustor();
			
				if ( fear_actor 
				&& fear_actor.IsHuman()
				&& fear_actor.IsMan()
				&& ((CNewNPC)fear_actor).GetNPCType() != ENGT_Quest
				&& !fear_actor.HasTag('ACS_Final_Fear_Stack')
				)
				{
					ticketFearActor = movementAdjustorFearActor.GetRequest( 'ACS_NPC_Finisher_Fear_Rotate');
					movementAdjustorFearActor.CancelByName( 'ACS_NPC_Finisher_Fear_Rotate' );
					movementAdjustorFearActor.CancelAll();

					ticketFearActor = movementAdjustorFearActor.CreateNewRequest( 'ACS_NPC_Finisher_Fear_Rotate' );
					movementAdjustorFearActor.AdjustmentDuration( ticketFearActor, 0.25 );
					movementAdjustorFearActor.MaxRotationAdjustmentSpeed( ticketFearActor, 500000 );

					fear_actor.SignalGameplayEvent( 'InterruptChargeAttack' );

					if (RandF() < 0.5)
					{
						movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer, RandRangeF(225,135) );

						animatedComponentFearActor.PlaySlotAnimationAsync ( 'dialogue_man_ex_scared_run_loop', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
					}
					else
					{
						movementAdjustorFearActor.RotateTowards( ticketFearActor, thePlayer );

						if (RandF() < 0.5)
						{
							animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_loop_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
						}
						else
						{
							animatedComponentFearActor.PlaySlotAnimationAsync ( 'man_ex_scared_loop_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
						}
					}
				}
			}
		}
	}

	timer function unseen_blade_spawn_delay( time : float , id : int )
	{
		if(
		!theGame.IsDialogOrCutscenePlaying() 
		&& !thePlayer.IsInNonGameplayCutscene() 
		&& !thePlayer.IsInGameplayScene())
		{
			if(
			!ACS_Blade_Of_The_Unseen()
			&& !ACS_Blade_Of_The_Unseen().IsAlive()
			&& !ACS_PlayerSettlementCheck(50))
			{
				number_of_bruxae_slain -= number_of_bruxae_slain;

				RemoveTimer('unseen_blade_spawn_delay');
				RemoveTimer('unseen_blade_hunt_delay');
				AddTimer('unseen_blade_hunt_delay', 60, true);

				ACS_Unseen_Blade_Summon_Start();
			}
			else
			{
				if( RandF() < 0.5 ) 
				{
					GetWitcherPlayer().DisplayHudMessage( "The blood of those vampiresses are on your hands. You cannot evade me forever..." );
				}
				else
				{
					GetWitcherPlayer().DisplayHudMessage( "You will pay for the blood of those vampiresses you've slain." );
				}
			}
		}
	}

	timer function unseen_blade_hunt_delay( time : float , id : int )
	{
		var playerRot 				: EulerAngles;
		var spawnPos				: Vector;

		if(
		!theGame.IsDialogOrCutscenePlaying() 
		&& !thePlayer.IsInNonGameplayCutscene() 
		&& !thePlayer.IsInGameplayScene())
		{
			if(
			ACS_Blade_Of_The_Unseen()
			&& ACS_Blade_Of_The_Unseen().IsAlive()
			&& !ACS_PlayerSettlementCheck(50))
			{
				playerRot = thePlayer.GetWorldRotation();

				playerRot.Yaw += 180;

				spawnPos = theCamera.GetCameraPosition() + VecFromHeading(theCamera.GetCameraHeading()) * 10;

				theGame.GetWorld().NavigationFindSafeSpot(spawnPos, 0.5f, 20.f, spawnPos);

				ACS_Blade_Of_The_Unseen().TeleportWithRotation(TraceFloor(spawnPos), playerRot);
			}
			else
			{
				if( RandF() < 0.5 ) 
				{
					GetWitcherPlayer().DisplayHudMessage( "The blood of those vampiresses are on your hands. You cannot evade me forever..." );
				}
				else
				{
					GetWitcherPlayer().DisplayHudMessage( "You will pay for the blood of those vampiresses you've slain." );
				}
			}
		}
	}

	function ACS_Finisher_Internal()
	{
		if (npc.GetImmortalityMode() != AIM_Invulnerable
		&& npc.GetImmortalityMode() != AIM_Immortal)
		{
			wounds.Clear();

			finisherDist = 2.75f;

			if (ACS_Player_Scale() > 1)
			{
				finisherDist += ACS_Player_Scale() * 0.75;
			}

			if (
			(npc.GetStat( BCS_Vitality ) <= 0 )
			&& 
			FinisherCheck() 
			&& npc.IsHuman()
			//&& !npc.HasTag('ACS_caretaker_shade')
			//&& !npc.HasTag('ACS_Wild_Hunt_Rider')
			)
			{	
				if ( VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetNearestPointInBothPersonalSpaces( thePlayer.GetWorldPosition() ) ) < finisherDist * finisherDist )
				{
					if (thePlayer.HasTag('ACS_Size_Adjusted'))
					{
						Grow_Geralt_Immediate_Fast();

						thePlayer.RemoveTag('ACS_Size_Adjusted');
					}

					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					//for( i=0; i < wounds.Size(); i+=1 )
					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if( !StrContains( wounds[ i ], "gash" ) 
						)
						{
							wounds.EraseFast( i );
						}
					}
					
					if ( wounds.Size() > 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}

					movementAdjustor.CancelAll();
					
					npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false, DETF_Igni );

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );
	
					action_interrupt_with_igni_sword();

					thePlayer.SetFinisherVictim( npc );
					
					thePlayer.SetPlayerTarget( npc );

					//npc.SignalGameplayEvent( 'ForceFinisher' );

					npc.GetComponent("Finish").SetEnabled( true );
							
					npc.SignalGameplayEvent( 'Finisher' );

					if (ACS_AutoFinisher_Enabled())
					{
						ACS_PerformFinisher();
					}

					if( RandF() < 0.5 ) 
					{
						player_comment_index_COMBAT_END = RandDifferent(this.previous_player_comment_index_COMBAT_END , 2);

						switch (player_comment_index_COMBAT_END) 
						{				
							case 1:
							thePlayer.PlayBattleCry( 'BattleCryMonstersEnd', 1, true, false);
							break;	
										
							default:
							thePlayer.PlayBattleCry('BattleCryHumansEnd', 1, true, false);
							break;
						}

						this.previous_player_comment_index_COMBAT_END = player_comment_index_COMBAT_END;
					}

					if (ACS_Armor_Equipped_Check())
					{
						thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

						thePlayer.SoundEvent("monster_caretaker_fx_summon");
						
						if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
						{
							npc.DestroyEffect('critical_burning');
							npc.PlayEffect('critical_burning');
						}

						//Finisher_Fear();
					}
				}
			}
		}
	}

	function ACS_Dismember_Internal()
	{
		if (npc.GetImmortalityMode() != AIM_Invulnerable
		&& npc.GetImmortalityMode() != AIM_Immortal)
		{
			wounds.Clear();

			thePlayer.AddTimer( 'RemoveForceFinisher', 0.0, false );

			npc.AddAbility( 'InstantKillImmune' );

			if (!npc.HasAbility('DisableFinishers'))
			{
				npc.AddAbility( 'DisableFinishers', true);
			}

			if (npc.HasAbility('ForceFinisher'))
			{
				npc.RemoveAbility( 'ForceFinisher');
			} 

			npc.SignalGameplayEvent('DisableFinisher');

			if (npc.IsHuman())
			{
				if ( npc.UsesVitality() && npc.GetStat( BCS_Vitality ) <= 0 )
				{	
					if (npc.HasAbility('ForceFinisher'))
					{
						npc.RemoveAbility( 'ForceFinisher');
					}

					npc.GetComponent("Finish").SetEnabled(false);
					
					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if( !StrContains( wounds[ i ], "_torso" ) 
						)
						{
							wounds.EraseFast( i );
						}
					}
					
					if ( wounds.Size() >= 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}
					
					npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

					//npc.Kill('ACS_Dismember', false, thePlayer);

					if (npc.IsHuman() && npc.HasTag('ACS_caretaker_shade'))
					{
						thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality ) * 0.10 );
					}

					if (thePlayer.HasTag('vampire_claws_equipped'))
					{
						if(RandF() < 0.5)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");
						}
						else
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
						}

						if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test');
							thePlayer.StopEffect('blood_effect_claws_test');
						}
					}

					if ( ((CNewNPC)npc).GetNPCType() != ENGT_Quest )
					{
						if ( ((CNewNPC)npc).GetNPCType() == ENGT_Guard )
						{
							npc.DestroyAfter(5);
						}
						else
						{
							npc.DestroyAfter(10);
						}
					}

					if (ACS_Armor_Equipped_Check())
					{
						thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

						thePlayer.SoundEvent("monster_caretaker_fx_summon");

						if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
						{
							npc.DestroyEffect('critical_burning');
							npc.PlayEffect('critical_burning');
						}
					}
				}
				else if ( npc.UsesEssence() && npc.GetStat( BCS_Essence ) <= 0 )
				{	
					npc.GetComponent("Finish").SetEnabled(false);
					
					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if( !StrContains( wounds[ i ], "_torso" ) 
						)
						{
							wounds.EraseFast( i );
						}
					}
					
					if ( wounds.Size() >= 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}
					
					npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

					//npc.Kill('ACS_Dismember', false, thePlayer);

					if (npc.IsHuman() && npc.HasTag('ACS_caretaker_shade'))
					{
						thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality ) * 0.10 );
					}

					if (thePlayer.HasTag('vampire_claws_equipped'))
					{
						if(RandF() < 0.5)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");
						}
						else
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
						}

						if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test');
							thePlayer.StopEffect('blood_effect_claws_test');
						}
					}

					if ( ((CNewNPC)npc).GetNPCType() != ENGT_Quest )
					{
						if ( ((CNewNPC)npc).GetNPCType() == ENGT_Guard )
						{
							npc.DestroyAfter(5);
						}
						else
						{
							npc.DestroyAfter(10);
						}
					}

					if (ACS_Armor_Equipped_Check())
					{
						thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

						thePlayer.SoundEvent("monster_caretaker_fx_summon");

						if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
						{
							npc.DestroyEffect('critical_burning');
							npc.PlayEffect('critical_burning');
						}
					}
				}
			}
			else
			{
				if ( npc.UsesVitality() && npc.GetStat( BCS_Vitality ) <= 0 )
				{	
					npc.GetComponent("Finish").SetEnabled(false);
					
					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if( StrContains( wounds[ i ], "cut_01" ) 
						|| StrContains( wounds[ i ], "cut_02" ) 
						|| StrContains( wounds[ i ], "cut_03" ) 
						|| StrContains( wounds[ i ], "cut_04" ) 
						|| StrContains( wounds[ i ], "gash_01" ) 
						|| StrContains( wounds[ i ], "gash_02" ) 
						|| StrContains( wounds[ i ], "gash_03" ) 
						|| StrContains( wounds[ i ], "gash_04" ) 
						)
						{
							wounds.EraseFast( i );
						}
					}

					if ( wounds.Size() >= 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}
					
					npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

					//npc.Kill('ACS_Dismember', false, thePlayer);

					if (thePlayer.HasTag('vampire_claws_equipped'))
					{
						if(RandF() < 0.5)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");
						}
						else
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
						}

						if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test');
							thePlayer.StopEffect('blood_effect_claws_test');
						}
					}

					if ( ((CNewNPC)npc).GetNPCType() != ENGT_Quest )
					{
						if ( ((CNewNPC)npc).GetNPCType() == ENGT_Guard )
						{
							npc.DestroyAfter(5);
						}
						else
						{
							npc.DestroyAfter(10);
						}
					}

					if (ACS_Armor_Equipped_Check())
					{
						thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

						thePlayer.SoundEvent("monster_caretaker_fx_summon");

						if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
						{
							npc.DestroyEffect('critical_burning');
							npc.PlayEffect('critical_burning');
						}
					}
				}
				else if ( npc.UsesEssence() && npc.GetStat( BCS_Essence ) <= 0 )
				{	
					npc.GetComponent("Finish").SetEnabled(false);
					
					dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
					if(!dismembermentComp) return;
					
					dismembermentComp.GetWoundsNames( wounds );

					for( i=wounds.Size()-1; i>=0; i-=1 )
					{
						if( StrContains( wounds[ i ], "cut_01" ) 
						|| StrContains( wounds[ i ], "cut_02" ) 
						|| StrContains( wounds[ i ], "cut_03" ) 
						|| StrContains( wounds[ i ], "cut_04" ) 
						|| StrContains( wounds[ i ], "gash_01" ) 
						|| StrContains( wounds[ i ], "gash_02" ) 
						|| StrContains( wounds[ i ], "gash_03" ) 
						|| StrContains( wounds[ i ], "gash_04" ) 
						)
						{
							wounds.EraseFast( i );
						}
					}

					if ( wounds.Size() >= 0 )
					{
						usedWound = wounds[ RandRange( wounds.Size() ) ];
					}
					
					npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

					npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

					//npc.Kill('ACS_Dismember', false, thePlayer);

					if (thePlayer.HasTag('vampire_claws_equipped'))
					{
						if(RandF() < 0.5)
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");
						}
						else
						{
							thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");
						}

						if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
						{
							thePlayer.PlayEffectSingle('blood_effect_claws_test');
							thePlayer.StopEffect('blood_effect_claws_test');
						}
					}

					if ( ((CNewNPC)npc).GetNPCType() != ENGT_Quest )
					{
						if ( ((CNewNPC)npc).GetNPCType() == ENGT_Guard )
						{
							npc.DestroyAfter(5);
						}
						else
						{
							npc.DestroyAfter(10);
						}
					}

					if (ACS_Armor_Equipped_Check())
					{
						thePlayer.SoundEvent("monster_caretaker_fx_black_exhale");

						thePlayer.SoundEvent("monster_caretaker_fx_summon");

						if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
						&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
						{
							npc.DestroyEffect('critical_burning');
							npc.PlayEffect('critical_burning');
						}
					}
				}
			}
		}
	}

	function ACS_Dismember_Vampire_Claws()
	{
		if (npc.GetImmortalityMode() != AIM_Invulnerable
		&& npc.GetImmortalityMode() != AIM_Immortal)
		{
			wounds.Clear();

			thePlayer.AddTimer( 'RemoveForceFinisher', 0.0, false );

			npc.AddAbility( 'InstantKillImmune' );

			if (!npc.HasAbility('DisableFinishers'))
			{
				npc.AddAbility( 'DisableFinishers', true);
			}

			if (npc.HasAbility('ForceFinisher'))
			{
				npc.RemoveAbility( 'ForceFinisher');
			} 

			npc.SignalGameplayEvent('DisableFinisher');

			if ( npc.UsesVitality() && npc.GetStat( BCS_Vitality ) <= 0 )
			{
				dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
				if(!dismembermentComp) return;
				
				dismembermentComp.GetWoundsNames( wounds, WTF_Explosion );
				
				if ( wounds.Size() > 0 )
				{
					usedWound = wounds[ RandRange( wounds.Size() ) ];
				}
				
				npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

				npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

				//npc.Kill('ACS_Dismember', false, thePlayer);

				if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
				{
					thePlayer.PlayEffectSingle('blood_effect_claws_test');
					thePlayer.StopEffect('blood_effect_claws_test');
				}

				if (npc.IsHuman() && npc.HasTag('ACS_caretaker_shade'))
				{
					thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality ) * 0.10 );
				}

				return;
			}

			if ( npc.UsesEssence() && npc.GetStat( BCS_Essence ) <= 0 )
			{
				dismembermentComp = (CDismembermentComponent)(npc.GetComponentByClassName( 'CDismembermentComponent' ));
				if(!dismembermentComp) return;
				
				dismembermentComp.GetWoundsNames( wounds, WTF_Explosion );
				
				if ( wounds.Size() > 0 )
				{
					usedWound = wounds[ RandRange( wounds.Size() ) ];
				}
				
				npc.SetDismembermentInfo( usedWound, npc.GetWorldPosition() - npc.GetWorldPosition(), false );

				npc.AddTimer( 'DelayedDismemberTimer', 0.05f, false );

				//npc.Kill('ACS_Dismember', false, thePlayer);

				if( ((CNewNPC)npc).GetBloodType() == BT_Red) 
				{
					thePlayer.PlayEffectSingle('blood_effect_claws_test');
					thePlayer.StopEffect('blood_effect_claws_test');
				}

				if (npc.IsHuman() && npc.HasTag('ACS_caretaker_shade'))
				{
					thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality ) * 0.10 );
				}

				return;
			}
		}
	}

	private var acsarmorbreath : bool;

	public timer function ACSArmorBreathingTimer ( dt : float, id : int){ ACSArmorBreathing(); } 

	function ACSArmorBreathing()
	{
		if (!theGame.IsFading()
		&& !theGame.IsBlackscreen()
		&& thePlayer.GetVisibility()
		&& !theGame.IsDialogOrCutscenePlaying() 
		&& !thePlayer.IsInNonGameplayCutscene() 
		&& !thePlayer.IsInGameplayScene() 
		&& !theGame.IsCurrentlyPlayingNonGameplayScene()
		&& !thePlayer.IsInCutsceneIntro() 
		)
		{
			if (!acsarmorbreath)
			{
				thePlayer.SoundEvent("monster_caretaker_vo_breath_in", 'head' );

				acsarmorbreath = true;
			}
			else
			{
				thePlayer.SoundEvent("monster_caretaker_vo_breath_out", 'head' );

				acsarmorbreath = false;
			}
		}
	}

	function EmbersIndicator()
	{
		if (!thePlayer.HasTag('in_wraith') 
		&& !thePlayer.HasTag('ACS_Camo_Active') 
		&& !theGame.IsFading()
		&& !theGame.IsBlackscreen()
		&& thePlayer.GetVisibility()
		)
		{
			if (thePlayer.HasBuff(EET_BlackBlood) && thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.DestroyEffect('embers_indicator');
				thePlayer.DestroyEffect('ice_armor_no_smoke');
				thePlayer.DestroyEffect('rift_fx_special');

				if (GetACSHelm1())
				{
					GetACSHelm1().DestroyEffect('ice_armor_no_smoke');
					GetACSHelm1().DestroyEffect('embers_indicator');
				}

				if (GetACSHelm2())
				{
					GetACSHelm2().DestroyEffect('ice_armor_no_smoke');
					GetACSHelm2().DestroyEffect('embers_indicator');
				}

				if (GetACSHelm3())
				{
					GetACSHelm3().DestroyEffect('ice_armor_no_smoke');
					GetACSHelm3().DestroyEffect('embers_indicator');
				}

				if (GetACSHelm4())
				{
					GetACSHelm4().DestroyEffect('ice_armor_no_smoke');
					GetACSHelm4().DestroyEffect('embers_indicator');
				}
			}
			else
			{
				if (GetWitcherPlayer().IsAnyQuenActive())
				{
					thePlayer.DestroyEffect('embers_indicator');

					thePlayer.PlayEffectSingle('ice_armor_no_smoke');
					thePlayer.StopEffect('ice_armor_no_smoke');

					if (!thePlayer.IsEffectActive('rift_fx_special', false))
					{
						thePlayer.PlayEffectSingle('rift_fx_special');
					}

					if (GetACSHelm1())
					{
						GetACSHelm1().DestroyEffect('embers_indicator');
						GetACSHelm1().PlayEffectSingle('ice_armor_no_smoke');
						GetACSHelm1().StopEffect('ice_armor_no_smoke');
					}

					if (GetACSHelm2())
					{
						GetACSHelm2().DestroyEffect('embers_indicator');
						GetACSHelm2().PlayEffectSingle('ice_armor_no_smoke');
						GetACSHelm2().StopEffect('ice_armor_no_smoke');
					}

					if (GetACSHelm3())
					{
						GetACSHelm3().DestroyEffect('embers_indicator');
						GetACSHelm3().PlayEffectSingle('ice_armor_no_smoke');
						GetACSHelm3().StopEffect('ice_armor_no_smoke');
					}

					if (GetACSHelm4())
					{
						GetACSHelm4().DestroyEffect('embers_indicator');
						GetACSHelm4().PlayEffectSingle('ice_armor_no_smoke');
						GetACSHelm4().StopEffect('ice_armor_no_smoke');
					}
				}
				else
				{
					thePlayer.DestroyEffect('ice_armor_no_smoke');
					thePlayer.DestroyEffect('rift_fx_special');

					thePlayer.PlayEffectSingle('embers_indicator');
					thePlayer.StopEffect('embers_indicator');

					if (GetACSHelm1())
					{
						GetACSHelm1().DestroyEffect('ice_armor_no_smoke');
						GetACSHelm1().PlayEffectSingle('embers_indicator');
						GetACSHelm1().StopEffect('embers_indicator');
					}

					if (GetACSHelm2())
					{
						GetACSHelm2().DestroyEffect('ice_armor_no_smoke');
						GetACSHelm2().PlayEffectSingle('embers_indicator');
						GetACSHelm2().StopEffect('embers_indicator');
					}

					if (GetACSHelm3())
					{
						GetACSHelm3().DestroyEffect('ice_armor_no_smoke');
						GetACSHelm3().PlayEffectSingle('embers_indicator');
						GetACSHelm3().StopEffect('embers_indicator');
					}

					if (GetACSHelm4())
					{
						GetACSHelm4().DestroyEffect('ice_armor_no_smoke');
						GetACSHelm4().PlayEffectSingle('embers_indicator');
						GetACSHelm4().StopEffect('embers_indicator');
					}
				}
			}
		}
		else
		{
			thePlayer.DestroyEffect('embers_indicator');
			thePlayer.DestroyEffect('ice_armor_no_smoke');
			thePlayer.DestroyEffect('rift_fx_special');

			if (GetACSHelm1())
			{
				GetACSHelm1().DestroyEffect('ice_armor_no_smoke');
				GetACSHelm1().DestroyEffect('embers_indicator');
			}

			if (GetACSHelm2())
			{
				GetACSHelm2().DestroyEffect('ice_armor_no_smoke');
				GetACSHelm2().DestroyEffect('embers_indicator');
			}

			if (GetACSHelm3())
			{
				GetACSHelm3().DestroyEffect('ice_armor_no_smoke');
				GetACSHelm3().DestroyEffect('embers_indicator');
			}

			if (GetACSHelm4())
			{
				GetACSHelm4().DestroyEffect('ice_armor_no_smoke');
				GetACSHelm4().DestroyEffect('embers_indicator');
			}
		}
	}

	function EmbersParticlesIndicator()
	{
		if (!thePlayer.HasTag('in_wraith') 
		&& !thePlayer.HasTag('ACS_Camo_Active') 
		&& !theGame.IsFading()
		&& !theGame.IsBlackscreen()
		)
		{
			if (!thePlayer.IsEffectActive('embers_particles_test', false))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				//thePlayer.StopEffect('embers_particles_test');
			}
		}
		else
		{
			thePlayer.DestroyEffect('embers_particles_test');
		}
	}

	function Sword_Hold_Forcer()
	{
		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge')
		&& !thePlayer.HasTag('in_wraith')
		&& !thePlayer.HasTag('blood_sucking'))
		{
			ACSGetSteelSwordUpdateEnhancements_Permaglow();
			ACSGetSilverSwordUpdateEnhancements_Permaglow();
		}

		playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
		playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

		if ( !thePlayer.IsAnyWeaponHeld() || thePlayer.IsWeaponHeld('fist') )
		{
			if (thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_Steel );
				thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_Steel );
			}
			else if (thePlayer.IsWeaponHeld('fist') && !thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SetBehaviorVariable( 'isHoldingWeaponR', 0.0, true );

				thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_Fists );
				thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_Fists );
			}
			else
			{
				thePlayer.SetBehaviorVariable( 'isHoldingWeaponR', 0.0, true );

				thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_None );
				thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_None );
			}

			/*
			if ( thePlayer.HasTag('vampire_claws_equipped') )
			{
				if ( thePlayer.GetIsSprinting() && !thePlayer.HasTag('ACS_Vampire_Claws_Despawn_Sprinting') )
				{
					ClawDestroy_NOTAG();

					thePlayer.RemoveTag('ACS_Vampire_Claws_Equip_Not_Sprinting');

					thePlayer.AddTag('ACS_Vampire_Claws_Despawn_Sprinting');
				}
				else if ( !thePlayer.GetIsSprinting() && thePlayer.HasTag('ACS_Vampire_Claws_Despawn_Sprinting') && !thePlayer.HasTag('ACS_Vampire_Claws_Equip_Not_Sprinting'))
				{
					ACS_ClawEquip_OnDodge();

					thePlayer.RemoveTag('ACS_Vampire_Claws_Despawn_Sprinting');

					thePlayer.AddTag('ACS_Vampire_Claws_Equip_Not_Sprinting');
				}
			}
			*/

			//if (thePlayer.HasTag('quen_sword_equipped'))
			//{
				QuenSwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('axii_sword_equipped'))
			//{
				AxiiSwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('aard_sword_equipped'))
			//{
				AardSwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('yrden_sword_equipped'))
			//{
				YrdenSwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
			//{
				QuenSecondarySwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
			//{
				AxiiSecondarySwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
			//{
				AardSecondarySwordDestroyIMMEDIATE();
			//}
			//else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
			//{
				YrdenSecondarySwordDestroyIMMEDIATE();
			//}

				IgniBowDestroyIMMEDIATE();

				AxiiBowDestroyIMMEDIATE();

				AardBowDestroyIMMEDIATE();

				YrdenBowDestroyIMMEDIATE();

				QuenBowDestroyIMMEDIATE();

				IgniCrossbowDestroyIMMEDIATE();

				AxiiCrossbowDestroyIMMEDIATE();

				AardCrossbowDestroyIMMEDIATE();

				YrdenCrossbowDestroyIMMEDIATE();

				QuenCrossbowDestroyIMMEDIATE();

			if (thePlayer.HasTag('ACS_Holster_Sword_Effect'))
			{
				thePlayer.RemoveTag('ACS_Holster_Sword_Effect');
			}
		}
		else
		{
			if (!thePlayer.HasTag('ACS_HideWeaponOnDodge')
			&& !thePlayer.HasTag('in_wraith')
			&& !thePlayer.HasTag('blood_sucking')
			&& !GetACSArmorEtherSword()
			)
			{
				ACSGetEquippedSwordUpdateEnhancements_Permaglow();
			}

			if ( thePlayer.IsWeaponHeld( 'steelsword' ) )
			{
				thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_Steel );
				thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_Steel );
			}
			else if ( thePlayer.IsWeaponHeld( 'silversword' ) )
			{
				thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_Silver );
				thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_Silver );
			}

			if (!thePlayer.HasTag('quen_sword_equipped'))
			{
				QuenSwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('axii_sword_equipped'))
			{
				AxiiSwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				AardSwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('yrden_sword_equipped'))
			{
				YrdenSwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('quen_secondary_sword_equipped'))
			{
				QuenSecondarySwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('axii_secondary_sword_equipped'))
			{
				AxiiSecondarySwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('aard_secondary_sword_equipped'))
			{
				AardSecondarySwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('yrden_secondary_sword_equipped'))
			{
				YrdenSecondarySwordDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('igni_bow_equipped'))
			{
				IgniBowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('axii_bow_equipped'))
			{
				AxiiBowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('aard_bow_equipped'))
			{
				AardBowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('yrden_bow_equipped'))
			{
				YrdenBowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('quen_bow_equipped'))
			{
				QuenBowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('igni_crossbow_equipped'))
			{
				IgniCrossbowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('axii_crossbow_equipped'))
			{
				AxiiCrossbowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('aard_crossbow_equipped'))
			{
				AardCrossbowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('yrden_crossbow_equipped'))
			{
				YrdenCrossbowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('quen_crossbow_equipped'))
			{
				QuenCrossbowDestroyIMMEDIATE();
			}
			else if (!thePlayer.HasTag('vampire_claws_equipped'))
			{
				//ClawDestroy();
			}

			if (thePlayer.HasTag('ACS_Holster_Sword_Effect'))
			{
				thePlayer.RemoveTag('ACS_Holster_Sword_Effect');
			}
		}

		if ( thePlayer.IsPerformingFinisher()
		|| thePlayer.HasTag('ACS_IsPerformingFinisher')
		)
		{
			if (ACS_Player_Scale() != 1)
			{
				if (thePlayer.HasTag('ACS_Player_Scale_Revert'))
				{
					thePlayer.RemoveTag('ACS_Player_Scale_Revert');
				}

				if (!thePlayer.HasTag('ACS_Player_Scale_Force_Changed'))
				{
					//RemoveTimer('ACS_Embers_Timer');

					//thePlayer.StopAllEffects();

					thePlayer.PlayEffectSingle('ethereal_appear');
					thePlayer.StopEffect('ethereal_appear');

					thePlayer.PlayEffectSingle('special_attack_only_black_fx');
					thePlayer.StopEffect('special_attack_only_black_fx');

					thePlayer.AddTag('ACS_Player_Scale_Force_Changed');
				}
			}

			playerAnimcomp.SetScale(Vector(ACS_Player_Scale()/ACS_Player_Scale(),ACS_Player_Scale()/ACS_Player_Scale(),ACS_Player_Scale()/ACS_Player_Scale(),ACS_Player_Scale()/ACS_Player_Scale()));
		}
		else
		{
			if (ACS_Player_Scale() != 1)
			{
				if (thePlayer.HasTag('ACS_Player_Scale_Force_Changed'))
				{
					thePlayer.RemoveTag('ACS_Player_Scale_Force_Changed');
				}

				if (!thePlayer.HasTag('ACS_Player_Scale_Revert'))
				{
					//thePlayer.StopAllEffects();
					
					thePlayer.PlayEffectSingle('ethereal_appear');
					thePlayer.StopEffect('ethereal_appear');

					thePlayer.PlayEffectSingle('special_attack_only_black_fx');
					thePlayer.StopEffect('special_attack_only_black_fx');

					//AddTimer('ACS_Embers_Timer', 0.01f, true); 

					thePlayer.AddTag('ACS_Player_Scale_Revert');
				}
			}
		}
	}

	function Sword_Persistent_Effects()
	{
		if (quen_sword_1().HasTag('quen_sword_upgraded_2'))
		{
			quen_sword_1().PlayEffect('special_attack_ready');
			quen_sword_1().PlayEffect('special_attack_ready');
			quen_sword_1().PlayEffect('special_attack_ready');

			quen_sword_2().PlayEffect('special_attack_ready');
			quen_sword_2().PlayEffect('special_attack_ready');
			quen_sword_2().PlayEffect('special_attack_ready');

			quen_sword_3().PlayEffect('special_attack_ready');
			quen_sword_3().PlayEffect('special_attack_ready');
			quen_sword_3().PlayEffect('special_attack_ready');

			quen_sword_1().StopEffect('special_attack_ready');
			quen_sword_2().StopEffect('special_attack_ready');
			quen_sword_3().StopEffect('special_attack_ready');
		}

		if (GetACSSparagmosEffect())
		{
			GetACSSparagmosEffect().StopEffect('sword_slash_blue_large');
			GetACSSparagmosEffect().PlayEffect('sword_slash_blue_large');
		}

		if (thePlayer.HasTag('vampire_claws_equipped'))
		{
			if (thePlayer.IsUsingHorse()
			|| thePlayer.IsUsingVehicle()
			|| !ACS_Enabled()
			//|| !thePlayer.HasTag('ACS_ExplorationDelayTag')
			)
			{
				ClawDestroy();

				thePlayer.PlayEffectSingle('claws_effect');
				thePlayer.StopEffect('claws_effect');
			}

			theGame.GetBehTreeReactionManager().CreateReactionEventIfPossible( thePlayer, 'CastSignAction', -1, 20.0f, -1.f, -1, true );

			if (ACS_Vampire_Back_Claw_Get())
			{
				if (ACS_DodgeEffects_Enabled())
				{
					ACS_Vampire_Back_Claw_Get().PlayEffectSingle('blood_color');

					ACS_Vampire_Back_Claw_Get().StopEffect('blood_color');
				}
				else
				{
					ACS_Vampire_Back_Claw_Get().Destroy();
				}
			}

			if (thePlayer.HasBuff(EET_BlackBlood))
			{
				thePlayer.StopEffect('blood_color');
				thePlayer.PlayEffectSingle('blood_color');

				if (GetACSHelm1())
				{
					GetACSHelm1().PlayEffectSingle('blood_color');
					GetACSHelm1().StopEffect('blood_color');
				}

				if (GetACSHelm2())
				{
					GetACSHelm2().PlayEffectSingle('blood_color');
					GetACSHelm2().StopEffect('blood_color');
				}

				if (GetACSHelm3())
				{
					GetACSHelm3().PlayEffectSingle('blood_color');
					GetACSHelm3().StopEffect('blood_color');
				}

				if (GetACSHelm4())
				{
					GetACSHelm4().PlayEffectSingle('blood_color');
					GetACSHelm4().StopEffect('blood_color');
				}

				ACS_Vampire_Arms_1_Get().PlayEffectSingle('blood_color');

				ACS_Vampire_Arms_1_Get().StopEffect('blood_color');

				ACS_Vampire_Arms_2_Get().PlayEffectSingle('blood_color');

				ACS_Vampire_Arms_2_Get().StopEffect('blood_color');

				ACS_Vampire_Arms_3_Get().PlayEffectSingle('blood_color');

				ACS_Vampire_Arms_3_Get().StopEffect('blood_color');

				ACS_Vampire_Arms_4_Get().PlayEffectSingle('blood_color');

				ACS_Vampire_Arms_4_Get().StopEffect('blood_color');
				
				ACS_Vampire_Head_Get().PlayEffectSingle('blood_color');

				ACS_Vampire_Head_Get().StopEffect('blood_color');

				if (!thePlayer.HasTag('ACS_blood_armor'))
				{
					ACS_BloodArmorStandalone();
				}
			}
			else
			{
				ACS_Blood_Armor_Destroy_Without_Back_Claw_IMMEDIATE();
			}
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			aard_blade_1().PlayEffectSingle('blood_color');

			aard_blade_1().StopEffect('blood_color');

			aard_blade_2().PlayEffectSingle('blood_color');

			aard_blade_2().StopEffect('blood_color');

			aard_blade_3().PlayEffectSingle('blood_color');

			aard_blade_3().StopEffect('blood_color');

			aard_blade_4().PlayEffectSingle('blood_color');

			aard_blade_4().StopEffect('blood_color');

			aard_blade_5().PlayEffectSingle('blood_color');

			aard_blade_5().StopEffect('blood_color');

			aard_blade_6().PlayEffectSingle('blood_color');

			aard_blade_6().StopEffect('blood_color');

			aard_blade_7().PlayEffectSingle('blood_color');

			aard_blade_7().StopEffect('blood_color');

			aard_blade_8().PlayEffectSingle('blood_color');

			aard_blade_8().StopEffect('blood_color');

			ACSGetEquippedSword().StopAllEffects();
		}

		/*
		else if (!thePlayer.HasTag('vampire_claws_equipped'))
		{
			//ClawDestroy_NOTAG();
		}
		*/
	}

	function BladeOfTheUnseenDeathEffects()
	{
		if (ACS_Blade_Of_The_Unseen())
		{
			if (ACS_Blade_Of_The_Unseen().IsAlive())
			{
				GetACS_Blade_Of_The_Unseen_L_Blade().PlayEffectSingle('blood_color');

				GetACS_Blade_Of_The_Unseen_L_Blade().StopEffect('blood_color');

				GetACS_Blade_Of_The_Unseen_R_Blade().PlayEffectSingle('blood_color');

				GetACS_Blade_Of_The_Unseen_R_Blade().StopEffect('blood_color');

				GetACS_Blade_Of_The_Unseen_L_Blade().PlayEffectSingle('wraith_trail');

				GetACS_Blade_Of_The_Unseen_R_Blade().PlayEffectSingle('wraith_trail');
			}
			else if (!ACS_Blade_Of_The_Unseen().IsAlive())
			{
				if(!ACS_Blade_Of_The_Unseen().HasTag('unseen_blade_despawn'))
				{
					GetACS_Blade_Of_The_Unseen_L_Blade().Destroy();

					GetACS_Blade_Of_The_Unseen_L_Anchor().Destroy();

					GetACS_Blade_Of_The_Unseen_R_Blade().Destroy();

					GetACS_Blade_Of_The_Unseen_R_Anchor().Destroy();

					ACS_BladeOfTheUnseenDespawnEffect();

					RemoveTimer('unseen_blade_spawn_delay');

					RemoveTimer('unseen_blade_hunt_delay');

					ACS_Blade_Of_The_Unseen().SetVisibility(false);

					ACS_Blade_Of_The_Unseen().StopAllEffects();

					ACS_Blade_Of_The_Unseen().DestroyAfter(1);

					if (unseen_blade_death_count == 0)
					{
						GetWitcherPlayer().DisplayHudMessage( "<b>You are ... worthy. Pray that we do not meet again.</b>" );
					}
					else if (unseen_blade_death_count == 1)
					{
						GetWitcherPlayer().DisplayHudMessage( "<b>You are warned. Next time I shall not be so kind.</b>" );
					}
					else if (unseen_blade_death_count == 2)
					{
						GetWitcherPlayer().DisplayHudMessage( "<b>WITCHER. ONLY YOUR DEATH SHALL APPEASE ME NOW.</b>" );

						AddTimer('Unseen_Monster_Summon', 5, false);
					}

					unseen_blade_death_count += 1;

					ACS_Blade_Of_The_Unseen().AddTag('unseen_blade_despawn');
				}
			}
		}
	}

	function NovigradUndergroundVampireDeathEffects()
	{
		if (ACS_Novigrad_Underground_Vampire())
		{
			if (!ACS_Novigrad_Underground_Vampire().IsAlive())
			{
				if(!ACS_Novigrad_Underground_Vampire().HasTag('novigrad_underground_vampire_despawn'))
				{
					GetWitcherPlayer().DisplayHudMessage( "<b>Fuck you and fuck this shit. I'm out.</b>" );

					ACS_NovigradUndergroundVampireDespawnEffect();

					//ACS_Novigrad_Underground_Vampire().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );

					//AddTimer('novigrad_underground_vampire_despawn', 0.1, false);

					ACS_Novigrad_Underground_Vampire().SetVisibility(false);

					ACS_Novigrad_Underground_Vampire().StopAllEffects();

					ACS_Novigrad_Underground_Vampire().AddTag('novigrad_underground_vampire_despawn');
				}
			}
		}
	}

	function HuberRejkDeathEffects()
	{
		if (ACS_Hubert_Rejk_Vampire())
		{
			if (!ACS_Hubert_Rejk_Vampire().IsAlive())
			{
				if(!ACS_Hubert_Rejk_Vampire().HasTag('hubert_rejk_vampire_despawn'))
				{
					GetWitcherPlayer().DisplayHudMessage( "<b>I hope we meet again. May the Eternal Fire guide and protect you.</b>" );

					ACS_HubertRejkVampireDespawnEffect();

					ACS_Hubert_Rejk_Vampire().SetVisibility(false);

					ACS_Hubert_Rejk_Vampire().StopAllEffects();

					ACS_Hubert_Rejk_Vampire().AddTag('hubert_rejk_vampire_despawn');
				}
			}
		}
	}

	private var droppeditemID : SItemUniqueId;

	function FireBearDeathEffects()
	{
		if (ACSFireBear())
		{
			if (!ACSFireBear().IsAlive())
			{
				if(!ACSFireBear().HasTag('acs_fire_bear_despawn'))
				{
					if( FactsQuerySum("NewGamePlus") > 0 )
					{
						ACSFireBear().GetInventory().AddAnItem( 'NGP_ACS_Armor_Omega' , 1 );

						droppeditemID = ACSFireBear().GetInventory().GetItemId('NGP_ACS_Armor_Omega');
					}
					else
					{
						ACSFireBear().GetInventory().AddAnItem( 'ACS_Armor_Omega' , 1 );

						droppeditemID = ACSFireBear().GetInventory().GetItemId('ACS_Armor_Omega');
					}

					ACSFireBear().GetInventory().DropItemInBag(droppeditemID, 1);

					RemoveTimer('DropBearMeteorStart');

					RemoveTimer('DropBearMeteorAscend');

					RemoveTimer('DropBearMeteor');

					RemoveTimer('DropBearSummon');

					GetWitcherPlayer().DisplayHudMessage( "<b>AVATAR OF THE CHAOS FLAME VANQUISHED</b>" );

					GetACSFireSkyEnt().Destroy();

					ACS_FireBearDespawnEffect();

					animatedComponentA = (CAnimatedComponent)((CNewNPC)ACSFireBear()).GetComponentByClassName( 'CAnimatedComponent' );

					animatedComponentA.PlaySlotAnimationAsync ( 'bear_death_burning', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0));
	
					animatedComponentA.FreezePoseFadeIn(6.25);

					//ACSFireBear().SetVisibility(false);

					ACSFireBear().StopEffect('flames');
					ACSFireBear().StopEffect('critical_burning');

					//ACSFireBear().DestroyAfter(1);

					ACSFireBear().AddTag('acs_fire_bear_despawn');
				}
			}
		}
	}

	function FireBearAltarDeathEffects()
	{
		if (ACSFireBearAltarEntity())
		{
			if (!ACSFireBearAltarEntity().IsAlive())
			{
				if(!ACSFireBearAltarEntity().HasTag('acs_fire_bear_spawn'))
				{
					GetWitcherPlayer().DisplayHudMessage( "<b>AVATAR OF THE CHAOS FLAME SUMMONED</b>" );

					ACS_FireBearSpawnEffect();

					ACS_dropbearbossfight();

					ACSFireBearAltarEntity().DestroyAfter(1);

					ACSFireBearAltar().DestroyAfter(1);

					ACSFireBearAltarEntity().AddTag('acs_fire_bear_spawn');
				}
			}
			else
			{
				ACSFireBearAltarEntity().TeleportWithRotation(ACSFireBearAltar().GetWorldPosition(), theCamera.GetCameraRotation());
			}
		}
	}

	function SheWhoKnowsDeathEffects()
	{
		if (ACSSheWhoKnows())
		{
			if (!ACSSheWhoKnows().IsAlive())
			{
				if(!ACSSheWhoKnows().HasTag('acs_she_who_knows_despawn'))
				{
					if( FactsQuerySum("NewGamePlus") > 0 )
					{
						ACSSheWhoKnows().GetInventory().AddAnItem( 'NGP_ACS_Gloves' , 1 );

						droppeditemID = ACSSheWhoKnows().GetInventory().GetItemId('NGP_ACS_Gloves');
					}
					else
					{
						ACSSheWhoKnows().GetInventory().AddAnItem( 'ACS_Gloves' , 1 );

						droppeditemID = ACSSheWhoKnows().GetInventory().GetItemId('ACS_Gloves');
					}

					ACSSheWhoKnows().GetInventory().DropItemInBag(droppeditemID, 1);

					RemoveTimer('SheWhoKnowsHide');

					RemoveTimer('SheWhoKnowsProjectileVolley1');

					RemoveTimer('SheWhoKnowsProjectileVolley2');

					RemoveTimer('SheWhoKnowsProjectileVolley3');

					RemoveTimer('SheWhoKnowsTeleport');

					RemoveTimer('SheWhoKnowsProjectileSingle');

					RemoveTimer('SheWhoKnowsProjectileSingleStop');

					GetWitcherPlayer().DisplayHudMessage( "<b>PESTILENCE VANQUISHED</b>" );

					animatedComponentA = (CAnimatedComponent)((CNewNPC)ACSSheWhoKnows()).GetComponentByClassName( 'CAnimatedComponent' );

					animatedComponentA.PlaySlotAnimationAsync ( 'death_burning', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 1));

					ACSSheWhoKnows().PlayEffect('fire_hit');
					ACSSheWhoKnows().PlayEffect('critical_burning');
					ACSSheWhoKnows().PlayEffect('critical_burning');
					ACSSheWhoKnows().PlayEffect('critical_burning');
					ACSSheWhoKnows().PlayEffect('critical_burning');
					ACSSheWhoKnows().PlayEffect('critical_burning');

					ACSSheWhoKnows().DestroyAfter(6);

					ACSSheWhoKnows().AddTag('acs_she_who_knows_despawn');
				}
			}
		}
	}

	function KnightmareEternumDeathEffects()
	{
		if (GetACSKnightmareEternum())
		{
			if (!thePlayer.IsAlive())
			{
				GetACSKnightmareEternum().StopAllEffects();

				GetACSKnightmareEternum().SetVisibility(false);

				GetACSKnightmareSwordTrail().Destroy();

				GetACSKnightmareQuenHit().Destroy();

				GetACSKnightmareQuen().Destroy();

				GetACSKnightmareChestBlade4().Destroy();

				GetACSKnightmareChestBlade3().Destroy();

				GetACSKnightmareChestBlade2().Destroy();

				GetACSKnightmareChestBlade1().Destroy();

				GetACSKnightmareEternum().DestroyAfter(1);
			}
			else
			{
				if (GetACSKnightmareEternum().IsAlive())
				{
					if ( GetACSKnightmareEternum().HasAbility('EtherealActive') )
					{
						(GetACSKnightmareEternum().GetInventory().GetItemEntityUnsafe( GetACSKnightmareEternum().GetInventory().GetItemFromSlot( 'r_weapon' ) )).SetHideInGame(true);

						GetACSKnightmareSwordTrail().StopEffect('special_attack_iris');
						GetACSKnightmareSwordTrail().PlayEffectSingle('special_attack_iris');

						//GetACSKnightmareSwordTrail().StopEffect('special_attack_charged_iris');
						//GetACSKnightmareSwordTrail().PlayEffectSingle('special_attack_charged_iris');

						GetACSKnightmareSwordTrail().StopEffect('special_attack_ready_iris');
						GetACSKnightmareSwordTrail().PlayEffectSingle('special_attack_ready_iris');

						GetACSKnightmareChestBlade1().StopEffect('chest_sword_1');
						GetACSKnightmareChestBlade1().PlayEffectSingle('chest_sword_1');

						GetACSKnightmareChestBlade2().StopEffect('chest_sword_1');
						GetACSKnightmareChestBlade2().PlayEffectSingle('chest_sword_1');

						GetACSKnightmareChestBlade3().StopEffect('chest_sword_1');
						GetACSKnightmareChestBlade3().PlayEffectSingle('chest_sword_1');

						GetACSKnightmareChestBlade4().StopEffect('chest_sword_1');
						GetACSKnightmareChestBlade4().PlayEffectSingle('chest_sword_1');
					}
				}
				else
				{
					if(!GetACSKnightmareEternum().HasTag('acs_knightmare_despawn'))
					{
						if( FactsQuerySum("NewGamePlus") > 0 )
						{
							GetACSKnightmareEternum().GetInventory().AddAnItem( 'NGP_ACS_Boots' , 1 );

							droppeditemID = GetACSKnightmareEternum().GetInventory().GetItemId('NGP_ACS_Boots');
						}
						else
						{
							GetACSKnightmareEternum().GetInventory().AddAnItem( 'ACS_Boots' , 1 );

							droppeditemID = GetACSKnightmareEternum().GetInventory().GetItemId('ACS_Boots');
						}

						GetACSKnightmareEternum().GetInventory().DropItemInBag(droppeditemID, 1);

						RemoveTimer('KnightmareEternumShout');

						RemoveTimer('KnightmareEternumIgni');

						GetACSKnightmareEternum().StopAllEffects();

						GetACSKnightmareEternum().SetVisibility(false);

						GetACSKnightmareSwordTrail().Destroy();

						GetACSKnightmareQuenHit().Destroy();

						GetACSKnightmareQuen().Destroy();

						GetACSKnightmareChestBlade4().Destroy();

						GetACSKnightmareChestBlade3().Destroy();

						GetACSKnightmareChestBlade2().Destroy();

						GetACSKnightmareChestBlade1().Destroy();

						GetACSKnightmareEternum().DestroyAfter(1);

						GetACSKnightmareEternum().AddTag('acs_knightmare_despawn');
					}
				}
			}
		}
	}

	function ForestGodShadowDeathEffects()
	{
		if (ACSForestGodShadow())
		{
			if (!ACSForestGodShadow().IsAlive())
			{
				if(!ACSForestGodShadow().HasTag('acs_forest_god_shadow_despawn'))
				{
					GetWitcherPlayer().DisplayHudMessage( "<b>SHADOW DEFEATED</b>" );

					ACSForestGodShadow().StopAllEffects();

					ACSForestGodShadow().PlayEffect('hym_despawn');

					ACSForestGodShadow().PlayEffect('hym_summon');

					ACSForestGodShadow().SetVisibility(false);

					ACSForestGodShadow().DestroyAfter(2);

					ACSForestGodShadow().AddTag('acs_forest_god_shadow_despawn');
				}
			}
		}
	}

	function VampreMonsterDeathEffects()
	{
		if (ACSVampireMonsterBossBar())
		{
			if (!ACSVampireMonsterBossBar().IsAlive())
			{
				if(!ACSVampireMonsterBossBar().HasTag('acs_vampire_monster_despawn'))
				{
					GetWitcherPlayer().DisplayHudMessage( "<b>NIGHTMARE REPELLED</b>" );

					if( FactsQuerySum("NewGamePlus") > 0 )
					{
						ACSVampireMonsterBossBar().GetInventory().AddAnItem( 'NGP_ACS_Pants' , 1 );

						droppeditemID = ACSVampireMonsterBossBar().GetInventory().GetItemId('NGP_ACS_Pants');
					}
					else
					{
						ACSVampireMonsterBossBar().GetInventory().AddAnItem( 'ACS_Pants' , 1 );

						droppeditemID = ACSVampireMonsterBossBar().GetInventory().GetItemId('ACS_Pants');
					}

					ACSVampireMonsterBossBar().GetInventory().DropItemInBag(droppeditemID, 1);

					ACS_VampireMonsterDespawnEffect();

					ACSVampireMonster().DestroyAfter(0.5);

					ACSVampireMonsterBossBar().DestroyAfter(0.5);

					ACSVampireMonsterBossBar().AddTag('acs_vampire_monster_despawn');
				}
			}
		}

		if (ACSVampireMonster())
		{
			if (!ACSVampireMonster().IsAlive())
			{
				if(!ACSVampireMonster().HasTag('acs_vampire_monster_not_alive_state'))
				{
					ACS_VampireMonsterDespawnEffect();

					ACSVampireMonster().SetVisibility(false);

					AddTimer('Vampire_Monster_Respwan_Reveal', 10, false);

					ACSVampireMonster().AddTag('acs_vampire_monster_not_alive_state');
				}
			}
		}
	}

	function BigLizardDeathEffects()
	{
		if (ACSBigLizard())
		{
			if (!ACSBigLizard().IsAlive())
			{
				if(!ACSBigLizard().HasTag('acs_big_lizard_not_alive_state'))
				{
					ACSBigLizard().StopAllEffects();

					ACSBigLizard().PlayEffect('fire_hit');

					ACSBigLizard().AddTag('acs_big_lizard_not_alive_state');
				}
			}
		}
	}

	function RatMageDeathEffects()
	{
		if (GetACSRatMage())
		{
			if (!GetACSRatMage().IsAlive())
			{
				if(!GetACSRatMage().HasTag('acs_rat_mage_not_alive_state'))
				{
					animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSRatMage()).GetComponentByClassName( 'CAnimatedComponent' );

					animatedComponentA.PlaySlotAnimationAsync ( 'man_npc_longsword_death_front_01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 1));

					GetACSRatMage().PlayEffect('ethereal_debuff');

					GetACSRatMage().DestroyAfter(1.5);

					GetACSRatMage().AddTag('acs_rat_mage_not_alive_state');
				}
			}
		}
	}

	timer function EredinDeathPortalDelay( time : float , id : int )
	{
		var temp											: CEntityTemplate;
		var ent												: CEntity;

		temp = (CEntityTemplate)LoadResource( 

		"quests\part_1\quest_files\q203_him\entities\q203_ciri_portal.w2ent"
			
		, true );

		ent = theGame.CreateEntity( temp, GetACSEredin().GetWorldPosition(), thePlayer.GetWorldRotation() );

		ent.PlayEffect('teleport_fx');

		ent.DestroyAfter(4.25);

		GetACSEredin().AddTag('acs_eredin_not_alive_state_play_loop_anim');

		GetACSEredin().StopAllEffects();
	}

	timer function EredinDeathEffectDelay( time : float , id : int )
	{
		GetACSEredin().StopAllEffects();

		GetACSEredin().PlayEffectSingle('disintegration2');

		GetACSEredin().PlayEffectSingle('rift_fx_special');

		GetACSEredin().PlayEffectSingle('disappear');
	}

	function ACSEredinDeathEffects()
	{
		var movementAdjustorNPC																									: CMovementAdjustor; 
		var ticketNPC 																											: SMovementAdjustmentRequestTicket;
	
		if (GetACSEredin())
		{
			if (!GetACSEredin().IsAlive())
			{
				animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSEredin()).GetComponentByClassName( 'CAnimatedComponent' );

				if (GetACSEredin().HasTag('acs_eredin_not_alive_state_play_loop_anim'))
				{
					animatedComponentA.PlaySlotAnimationAsync ( 'swordground_ready_loop_01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.1f, 0.1f));
				}

				if(!GetACSEredin().HasTag('acs_eredin_not_alive_state'))
				{
					GetACSWatcher().RemoveTimer('ACS_Eredin_Kill_Timer');

					movementAdjustorNPC = GetACSEredin().GetMovingAgentComponent().GetMovementAdjustor();

					ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_Eredin_Death_Rotate');
					movementAdjustorNPC.CancelByName( 'ACS_Eredin_Death_Rotate' );
					movementAdjustorNPC.CancelAll();

					ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_Eredin_Death_Rotate' );
					movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.125 );
					movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 500000 );
					movementAdjustorNPC.AdjustLocationVertically( ticketNPC, true );
					movementAdjustorNPC.ScaleAnimationLocationVertically( ticketNPC, true );

					movementAdjustorNPC.RotateTowards( ticketNPC, GetWitcherPlayer() );

					movementAdjustorNPC.SlideTo( ticketNPC, TraceFloor(GetACSEredin().GetWorldPosition() + GetACSEredin().GetWorldForward() * -3) );

					animatedComponentA.PlaySlotAnimationAsync ( 'blink_start_back_ready', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

					AddTimer('EredinDeathPortalDelay', 0.75, false);

					AddTimer('EredinDeathEffectDelay', 4.75, false);

					GetACSEredin().DestroyAfter(5.25);

					GetACSEredin().AddTag('acs_eredin_not_alive_state');
				}
			}
			else
			{
				if (!GetACSEredin().IsEffectActive('cold', false))
				{
					//GetACSEredin().PlayEffectSingle('cold');
				}

				if (!GetACSEredin().IsEffectActive('ice_armor_cutscene', false))
				{
					//GetACSEredin().PlayEffectSingle('ice_armor_cutscene');
				}
			}
		}
	}

	timer function NightStalkerDeathCamo( time : float , id : int )
	{
		GetACSNightStalker().StopAllEffects();

		GetACSNightStalker().DestroyEffect('glow');

		GetACSNightStalker().DestroyEffect('disappear');

		GetACSNightStalker().DestroyEffect('predator_mode');

		GetACSNightStalker().DestroyEffect('special_force_r');

		GetACSNightStalker().DestroyEffect('special_force_l');

		GetACSNightStalker().PlayEffectSingle('disappear');

		GetACSNightStalker().PlayEffectSingle('predator_mode');
	}

	timer function NightStalkerDeathTeleport( time : float , id : int )
	{
		GetACSNightStalker().Teleport( GetWitcherPlayer().GetWorldPosition() + Vector( 0, 0, -200 ) );
	}

	timer function NightStalkerCamo( time : float , id : int )
	{
		GetACSNightStalker().DestroyEffect('demonic_possession');

		GetACSNightStalker().DestroyEffect('glow');

		GetACSNightStalker().DestroyEffect('disappear');

		GetACSNightStalker().DestroyEffect('special_force_r');

		GetACSNightStalker().DestroyEffect('special_force_l');

		if (!GetACSNightStalker().IsEffectActive('predator_mode', true))
		{
			GetACSNightStalker().DestroyEffect('demonic_possession');

			GetACSNightStalker().DestroyEffect('glow');

			GetACSNightStalker().DestroyEffect('disappear');

			GetACSNightStalker().DestroyEffect('predator_mode');

			GetACSNightStalker().DestroyEffect('special_force_r');

			GetACSNightStalker().DestroyEffect('special_force_l');

			GetACSNightStalker().PlayEffectSingle('predator_mode');

			//AddTimer('NightStalkerVisibility', 1.5, false);
		}
	}

	timer function NightStalkerVisibility( time : float , id : int )
	{
		GetACSNightStalker().DestroyEffect('glow');

		GetACSNightStalker().DestroyEffect('disappear');

		GetACSNightStalker().DestroyEffect('predator_mode');

		GetACSNightStalker().DestroyEffect('special_force_r');

		GetACSNightStalker().DestroyEffect('special_force_l');

		GetACSNightStalker().PlayEffectSingle('predator_mode');
	}

	function ACSNightStalkerDeathEffects()
	{
		var movementAdjustorNPC																									: CMovementAdjustor; 
		var ticketNPC 																											: SMovementAdjustmentRequestTicket;
	
		if (GetACSNightStalker())
		{
			if (!GetACSNightStalker().IsAlive())
			{
				animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSNightStalker()).GetComponentByClassName( 'CAnimatedComponent' );

				if(!GetACSNightStalker().HasTag('acs_night_stalker_not_alive_state'))
				{
					RemoveTimer('NightStalkerCamo');

					RemoveTimer('NightStalkerVisibility');

					RemoveTimer('ACS_NightStalker_Kill_Timer');

					GetACSNightStalker().DestroyEffect('disappear');

					GetACSNightStalker().DestroyEffect('predator_mode');

					GetACSNightStalker().DestroyEffect('glow');

					GetACSNightStalker().PlayEffectSingle('glow');

					GetACSNightStalker().EnableCharacterCollisions(false);
					//GetACSNightStalker().EnableCollisions(false);

					movementAdjustorNPC = GetACSNightStalker().GetMovingAgentComponent().GetMovementAdjustor();

					ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_Night_Stalker_Death_Rotate');
					movementAdjustorNPC.CancelByName( 'ACS_Night_Stalker_Death_Rotate' );
					movementAdjustorNPC.CancelAll();

					ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_Night_Stalker_Death_Rotate' );
					movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.25 );
					movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 500000 );
					movementAdjustorNPC.AdjustLocationVertically( ticketNPC, true );
					movementAdjustorNPC.ScaleAnimationLocationVertically( ticketNPC, true );

					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer, RandRangeF(225,135) );

					animatedComponentA.PlaySlotAnimationAsync ( 'monster_katakan_q704_jumping_across_roof', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));

					RemoveTimer('NightStalkerDeathCamo');
					AddTimer('NightStalkerDeathCamo', 1.4, false);

					RemoveTimer('NightStalkerDeathTeleport');
					AddTimer('NightStalkerDeathTeleport', 1.55, false);

					GetACSNightStalker().DestroyAfter(1.75);

					GetACSNightStalker().AddTag('acs_night_stalker_not_alive_state');
				}
			}
		}
	}

	function Enemy_Death_Effects()
	{
		BladeOfTheUnseenDeathEffects();

		NovigradUndergroundVampireDeathEffects();

		HuberRejkDeathEffects();

		FireBearDeathEffects();

		FireBearAltarDeathEffects();

		SheWhoKnowsDeathEffects();

		KnightmareEternumDeathEffects();

		ForestGodShadowDeathEffects();

		VampreMonsterDeathEffects();

		BigLizardDeathEffects();

		RatMageDeathEffects();

		ACSEredinDeathEffects();

		ACSNightStalkerDeathEffects();
	}

	timer function Unseen_Monster_Summon( time : float , id : int )
	{
		unseen_blade_death_count -= unseen_blade_death_count;
		
		ACS_Unseen_Monster_Summon_Start();
	}

	timer function Vampire_Monster_Respwan_Reveal( time : float , id : int )
	{
		ACSVampireMonster().SetVisibility(true);

		ACSVampireMonster().RemoveTag('acs_vampire_monster_not_alive_state');
	}

	timer function novigrad_underground_vampire_despawn( time : float , id : int )
	{
		ACS_Novigrad_Underground_Vampire().Destroy();
	}

	timer function unseen_blade_despawn( time : float , id : int )
	{
		ACS_Blade_Of_The_Unseen().Destroy();
	}

	timer function hubert_rejk_vampire_despawn( time : float , id : int )
	{
		ACS_Hubert_Rejk_Vampire().Destroy();
	}

	function Critical_Low_Health_Fix()
	{
		thePlayer.DestroyEffect('critical_low_health');

		thePlayer.DestroyEffect('covered_blood');

		if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("WolfHeadModule")).GetEnabled())
		{
			if( thePlayer.GetStat( BCS_Vitality ) == thePlayer.GetStatMax( BCS_Vitality ) )
			{
				thePlayer.StopEffect('acs_critical_low_health');
				thePlayer.StopEffect('acs_half_health');
				thePlayer.StopEffect('acs_critical_half_health');
				thePlayer.StopEffect('acs_three_quarter_health');
			}
			else if( thePlayer.GetStat( BCS_Vitality ) < thePlayer.GetStatMax( BCS_Vitality ) 
			&& thePlayer.GetStat( BCS_Vitality ) >= thePlayer.GetStatMax( BCS_Vitality ) * 0.75 
			)
			{
				thePlayer.StopEffect('acs_critical_low_health');
				thePlayer.StopEffect('acs_critical_half_health');
				thePlayer.StopEffect('acs_half_health');

				thePlayer.PlayEffectSingle('acs_three_quarter_health');
			}
			else if( thePlayer.GetStat( BCS_Vitality ) < thePlayer.GetStatMax( BCS_Vitality ) * 0.75 
			&& thePlayer.GetStat( BCS_Vitality ) >= thePlayer.GetStatMax( BCS_Vitality ) * 0.5 
			)
			{
				thePlayer.StopEffect('acs_critical_low_health');
				thePlayer.StopEffect('acs_critical_half_health');
				thePlayer.StopEffect('acs_three_quarter_health');

				thePlayer.PlayEffectSingle('acs_half_health');
			}
			else if( thePlayer.GetStat( BCS_Vitality ) < thePlayer.GetStatMax( BCS_Vitality ) * 0.5 
			&& thePlayer.GetStat( BCS_Vitality ) >= thePlayer.GetStatMax( BCS_Vitality ) * 0.25 )
			{
				thePlayer.StopEffect('acs_critical_low_health');
				thePlayer.StopEffect('acs_three_quarter_health');
				thePlayer.StopEffect('acs_half_health');

				thePlayer.PlayEffectSingle('acs_critical_half_health');
			}
			else if( thePlayer.GetStat( BCS_Vitality ) < thePlayer.GetStatMax( BCS_Vitality ) * 0.25 )
			{
				thePlayer.StopEffect('acs_half_health');
				thePlayer.StopEffect('acs_three_quarter_health');
				thePlayer.StopEffect('acs_critical_half_health');

				thePlayer.PlayEffectSingle('acs_critical_low_health');
			}
		}
		else
		{
			if( thePlayer.GetStat( BCS_Vitality ) < thePlayer.GetStatMax( BCS_Vitality ) * 0.25 )
			{
				thePlayer.PlayEffectSingle('acs_critical_low_health');
			}
			else
			{
				thePlayer.StopEffect('acs_critical_low_health');
				thePlayer.DestroyEffect('acs_half_health');
				thePlayer.DestroyEffect('acs_critical_half_health');
				thePlayer.DestroyEffect('acs_three_quarter_health');
			}
		}
	}

	function SteelSwordHide( b : bool )
	{
		var steelID																		: SItemUniqueId;
		var steelswordentity 															: CEntity;
	
		GetWitcherPlayer().GetItemEquippedOnSlot(EES_SteelSword, steelID);

		steelswordentity = thePlayer.GetInventory().GetItemEntityUnsafe(steelID);

		steelswordentity.SetHideInGame(b); 
	}

	function SteelSwordScabbardSetVisible( b : bool )
	{
		var scabbard_steel																: CDrawableComponent;
		var scabbards_steel 															: array<SItemUniqueId>;
		var i																			: int;

		scabbards_steel = thePlayer.GetInventory().GetItemsByCategory('steel_scabbards');

		for ( i=0; i < scabbards_steel.Size() ; i+=1 )
		{
			scabbard_steel = (CDrawableComponent)((thePlayer.GetInventory().GetItemEntityUnsafe(scabbards_steel[i])).GetMeshComponent());
			scabbard_steel.SetVisible(b);
		}
	}

	function SilverSwordHide( b : bool )
	{
		var silverID																		: SItemUniqueId;
		var silverswordentity 																: CEntity;

		GetWitcherPlayer().GetItemEquippedOnSlot(EES_SilverSword, silverID);

		silverswordentity = thePlayer.GetInventory().GetItemEntityUnsafe(silverID);

		silverswordentity.SetHideInGame(b); 
	}

	function SilverSwordScabbardSetVisible( b : bool )
	{
		var scabbard_silver																: CDrawableComponent;
		var scabbards_silver 															: array<SItemUniqueId>;
		var i																			: int;

		scabbards_silver = thePlayer.GetInventory().GetItemsByCategory('silver_scabbards');

		for ( i=0; i < scabbards_silver.Size() ; i+=1 )
		{
			scabbard_silver = (CDrawableComponent)((thePlayer.GetInventory().GetItemEntityUnsafe(scabbards_silver[i])).GetMeshComponent());
			scabbard_silver.SetVisible(b);
		}
	}

	function CrossbowHide( b : bool )
	{
		var rangedID 				: SItemUniqueId;
		var crossbowentity			: CEntity;

		GetWitcherPlayer().GetItemEquippedOnSlot(EES_RangedWeapon, rangedID);

		crossbowentity = thePlayer.GetInventory().GetItemEntityUnsafe(rangedID);

		crossbowentity.SetHideInGame(b);
	}

	function Scabbard_Thing()
	{
		var steelID, silverID							: SItemUniqueId;

		GetWitcherPlayer().GetItemEquippedOnSlot(EES_SteelSword, steelID);

		GetWitcherPlayer().GetItemEquippedOnSlot(EES_SilverSword, silverID);

		if ( 
		ACS_GetWeaponMode() == 0
		|| ACS_GetWeaponMode() == 1
		|| ACS_GetWeaponMode() == 2
		)
		{
			if (
			thePlayer.HasTag('axii_sword_equipped')	
			|| thePlayer.HasTag('aard_sword_equipped')	
			|| thePlayer.HasTag('yrden_sword_equipped')	
			|| thePlayer.HasTag('quen_sword_equipped')
			|| thePlayer.HasTag('axii_secondary_sword_equipped')
			|| thePlayer.HasTag('aard_secondary_sword_equipped')
			|| thePlayer.HasTag('yrden_secondary_sword_equipped')
			|| thePlayer.HasTag('quen_secondary_sword_equipped')
			)	
			{
				if ( thePlayer.GetInventory().IsItemHeld(steelID) )
				{
					SteelSwordHide(true);
				}
				else if( thePlayer.GetInventory().IsItemHeld(silverID) )
				{
					SilverSwordHide(true);
				}

				ACSGetEquippedSword().StopAllEffects();
			}

			if (ACS_CloakEquippedCheck() || ACS_HideSwordsheathes_Enabled())
			{
				if (!thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(true);
					thePlayer.rangedWeapon.ClearDeployedEntity(true);
				}
				else if (thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(false);
				} 

				if (!thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(true);
				}

				if (!thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(true);
				}

				SteelSwordScabbardSetVisible(false);

				SilverSwordScabbardSetVisible(false);
			}
			else
			{
				if ( !thePlayer.GetInventory().IsItemHeld(steelID) )
				{
					if (ACS_ShouldHideWeaponCheck_Steel())
					{
						SteelSwordHide(true);
					}
					else
					{
						SteelSwordHide(false);
					}

					SteelSwordScabbardSetVisible(true);
				}

				if ( !thePlayer.GetInventory().IsItemHeld(silverID) )
				{
					if (ACS_ShouldHideWeaponCheck_Silver())
					{
						SilverSwordHide(true);
					}
					else
					{
						SilverSwordHide(false);
					}

					SilverSwordScabbardSetVisible(true);
				}

				CrossbowHide(false);
			}
		}
		else
		{
			if (ACS_CloakEquippedCheck())
			{
				if (thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(false);
				}
				else if (!thePlayer.IsCrossbowHeld())
				{
					CrossbowHide(true);
					thePlayer.rangedWeapon.ClearDeployedEntity(true);
				}

				if (thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(false); 
				}
				else if (!thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(true); 
				}

				if (thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(false);
				}
				else if (!thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(true);
				}
				
				SteelSwordScabbardSetVisible(false);

				SilverSwordScabbardSetVisible(false);
			}
			else
			{
				CrossbowHide(false);

				if (thePlayer.GetInventory().IsItemHeld(steelID))
				{
					SteelSwordHide(false); 
				}
				else if (!thePlayer.GetInventory().IsItemHeld(steelID)
				&& ACS_ShouldHideWeaponCheck_Steel()
				)
				{
					SteelSwordHide(true);
				}
				else 
				{
					SteelSwordHide(false);
				}

				if (thePlayer.GetInventory().IsItemHeld(silverID))
				{
					SilverSwordHide(false);
				}
				else if (!thePlayer.GetInventory().IsItemHeld(silverID)
				&& ACS_ShouldHideWeaponCheck_Silver()
				)
				{
					SilverSwordHide(true);
				}
				else
				{
					SilverSwordHide(false);
				}

				SteelSwordScabbardSetVisible(true);

				SilverSwordScabbardSetVisible(true);
			}
		}

		if (thePlayer.HasTag('ACS_HideWeaponOnDodge')
		|| thePlayer.HasTag('in_wraith')
		|| thePlayer.HasTag('blood_sucking')
		|| GetACSArmorEtherSword()
		)
		{
			ACSGetEquippedSword().StopAllEffects();
		}
	}

	private var cloakHidden : bool;
	default cloakHidden = false;

	function CloakUnequip()
	{
		if (ACS_UnequipCloakWhileInCombat())
		{
			if(!cloakHidden)
			{
				ACS_UnequipCloak();

				cloakHidden = true;
			}
		}
	}

	function CloakEquip()
	{
		if(cloakHidden)
		{
			ACS_EquipCloak();

			cloakHidden = false;
		}
	}

	function Werewolf_Spawn_Adds_Manager()
	{
		var vACS_Werewolf_Spawn_Adds : cACS_Werewolf_Spawn_Adds;

		vACS_Werewolf_Spawn_Adds = new cACS_Werewolf_Spawn_Adds in this;
	
		vACS_Werewolf_Spawn_Adds.ACS_Werewolf_Spawn_Adds_Engage();
	}

	function Human_Death_Controller_Spawner()
	{
		var vACS_Human_Death_Controller: cACS_Human_Death_Controller;
		vACS_Human_Death_Controller = new cACS_Human_Death_Controller in this;

		vACS_Human_Death_Controller.ACS_Human_Death_Controller_Engage();
	}

	function Witch_Hunter_Bomb_Manager()
	{
		if (ACS_witch_hunter_proj())
		{
			ACS_refresh_witch_hunter_proj_cooldown();

			Witch_Hunter_Throw_Bomb();
		}	
	}

	function Witch_Hunter_Throw_Bomb()
	{
		var vACS_Witch_Hunter_Throw_Bomb 	: cACS_Witch_Hunter_Throw_Bomb;
		vACS_Witch_Hunter_Throw_Bomb = new cACS_Witch_Hunter_Throw_Bomb in this;

		vACS_Witch_Hunter_Throw_Bomb.ACS_Witch_Hunter_Throw_Bomb_Engage();
	}

	function Witch_Hunter_Throw_Bomb_Delay()
	{
		var vACS_Witch_Hunter_Throw_Bomb 	: cACS_Witch_Hunter_Throw_Bomb;
		vACS_Witch_Hunter_Throw_Bomb = new cACS_Witch_Hunter_Throw_Bomb in this;

		vACS_Witch_Hunter_Throw_Bomb.ACS_Witch_Hunter_Throw_Bomb_Actual_Engage();
	}

	function Ghoul_Venom_Manager()
	{
		if (ACS_ghoul_proj())
		{
			ACS_refresh_ghoul_proj_cooldown();

			Ghoul_Venom_Start();

			RemoveTimer('Ghoul_Venom_Delay');
			AddTimer('Ghoul_Venom_Delay', 2, false);
		}	
	}

	function Ghoul_Venom_Start()
	{
		var vACS_Ghoul_Venom 	: cACS_Ghoul_Venom;

		vACS_Ghoul_Venom = new cACS_Ghoul_Venom in this;

		vACS_Ghoul_Venom.ACS_Ghoul_Venom_Start_Engage();
	}

	function Ghoul_Venom()
	{
		var vACS_Ghoul_Venom 	: cACS_Ghoul_Venom;

		vACS_Ghoul_Venom = new cACS_Ghoul_Venom in this;

		vACS_Ghoul_Venom.ACS_Ghoul_Venom_Engage();
	}

	function Tentacle_Manager()
	{
		if (ACS_tentacle_proj())
		{
			ACS_refresh_tentacle_proj_cooldown();

			Tentacle_Start();
		}	
	}

	function Tentacle_Start()
	{
		var vACS_Tentacle 		: cACS_Tentacle;

		vACS_Tentacle = new cACS_Tentacle in this;

		vACS_Tentacle.ACS_Tentacle_Start_Engage();
	}

	function Nekker_Guardian_Manager()
	{
		if (ACS_can_summon_nekker_guardian())
		{
			ACS_refresh_nekker_guardian_cooldown();

			Nekker_Guardian_Start();

			Nekker_Guardian_Heal();
		}	
	}

	function Nekker_Guardian_Start()
	{
		var vACS_Nekker_Guardian 		: cACS_Nekker_Guardian;

		vACS_Nekker_Guardian = new cACS_Nekker_Guardian in this;

		vACS_Nekker_Guardian.ACS_Nekker_Guardian_Start_Engage();
	}

	function Nekker_Guardian_Heal()
	{
		var vACS_Nekker_Guardian 		: cACS_Nekker_Guardian;

		vACS_Nekker_Guardian = new cACS_Nekker_Guardian in this;

		vACS_Nekker_Guardian.ACS_Nekker_Guardian_Heal_Engage();
	}

	function Katakan_Summon_Manager()
	{
		if (ACS_can_summon_katakan())
		{
			ACS_refresh_katakan_cooldown();

			Katakan_Summon_Start();
		}	
	}

	function Katakan_Summon_Start()
	{
		var vACS_Katakan_Summon 		: cACS_Katakan_Summon;

		vACS_Katakan_Summon = new cACS_Katakan_Summon in this;

		vACS_Katakan_Summon.ACS_Katakan_Summon_Start_Engage();
	}

	function ACS_Bear_FireballLeft()
	{
		var vACS_Fire_Bear_Projectiles			: cACS_Fire_Bear_Projectiles;

		vACS_Fire_Bear_Projectiles = new cACS_Fire_Bear_Projectiles in this;

		vACS_Fire_Bear_Projectiles.ACS_Fire_Bear_FireballLeft_Start_Engage();
	}

	function ACS_Bear_FireballRight()
	{
		var vACS_Fire_Bear_Projectiles			: cACS_Fire_Bear_Projectiles;

		vACS_Fire_Bear_Projectiles = new cACS_Fire_Bear_Projectiles in this;

		vACS_Fire_Bear_Projectiles.ACS_Fire_Bear_FireballRight_Start_Engage();
	}

	function ACS_Bear_FireLines()
	{
		var vACS_Fire_Bear_Projectiles			: cACS_Fire_Bear_Projectiles;

		vACS_Fire_Bear_Projectiles = new cACS_Fire_Bear_Projectiles in this;

		vACS_Fire_Bear_Projectiles.ACS_Fire_Bear_FireLines_Start_Engage();
	}

	function Player_In_Combat()
	{
		if (thePlayer.IsInCombat()
		&& thePlayer.IsAlive())
		{
			SetPlayerTarget();

			if(thePlayer.HasTag('ACS_Camo_Active'))
			{
				if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.00005 );
				}
				else
				{
					thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.00025 );
				}
			}

			if(thePlayer.HasTag('ACS_AardPull_Active'))
			{
				if (thePlayer.GetStat( BCS_Stamina ) > 0.01)
				{
					ACS_Bat_Damage();
				}
				else
				{
					AardPull_Deactivate();
				}	
			}

			Ghoul_Venom_Manager();

			Tentacle_Manager();

			Werewolf_Spawn_Adds_Manager();

			Nekker_Guardian_Manager();

			Katakan_Summon_Manager();

			ACS_Fire_Bear_Flames_Manager();

			ACS_KnightmareEternumManager();

			ACS_RatMageManager();

			ACS_SheWhoKnowsManager();

			ACS_VampireMonsterManager();

			Witch_Hunter_Bomb_Manager();

			Human_Death_Controller_Spawner();

			//ACS_Bat_Projectile_Manager();

			//HumanDeathCrawlLoop();

			Guard_Manager();

			CloakUnequip();

			if (thePlayer.HasTag('ACS_Second_Life_Active') && thePlayer.IsActionAllowed(EIAB_Movement))
			{
				thePlayer.ActionPlaySlotAnimationAsync('PLAYER_SLOT','', 0.1, 1, false);
				
				thePlayer.RemoveTag('ACS_Second_Life_Active');
			}

			if (theInput.GetActionValue('SpecialAttackLight') > 0.5
			//|| thePlayer.IsInCombatAction_SpecialAttack()
			//|| thePlayer.IsInCombatAction()
			|| thePlayer.IsDoingSpecialAttack(true)
			|| thePlayer.IsDoingSpecialAttack(false)
			|| thePlayer.IsGuarded()
			//|| thePlayer.IsInCombatAction_Attack()
			//|| thePlayer.IsInCombatAction_NonSpecialAttack()
			)
			{
				if (!thePlayer.IsPerformingFinisher())
				{
					ACS_Rage_Marker_Manager();
				}
			}
		}
		else
		{
			CloakEquip();
		}
	}

	function Guard_Manager()
	{
		if
		(
		!thePlayer.HasTag('blood_sucking') 
		&&
		(
			//thePlayer.IsInGuardedState()
			//|| 
			thePlayer.IsGuarded()
		)
		)
		{
			if (!thePlayer.IsImmuneToBuff(EET_Stagger))
			{
				thePlayer.AddBuffImmunity	( EET_Stagger,					'acs_guard', true);
			}
			
			if (!thePlayer.IsImmuneToBuff(EET_LongStagger))
			{
				thePlayer.AddBuffImmunity	( EET_LongStagger,				'acs_guard', true);
			}
		}
		else
		{
			thePlayer.RemoveBuffImmunity( EET_Stagger,					'acs_guard');
			thePlayer.RemoveBuffImmunity( EET_LongStagger,				'acs_guard');
		}
	}

	function FUCKING_SECOND_LIFE_HACK()
	{
		if( thePlayer.IsActionBlockedBy(EIAB_Movement, 'Mutation11') && GetWitcherPlayer().IsMutationActive( EPMT_Mutation11 ) && !GetWitcherPlayer().HasBuff( EET_Mutation11Debuff ) && !GetWitcherPlayer().IsInAir() )
		{
			thePlayer.AddTag('ACS_Second_Life_Active');
		}
	}

	function Nekker_Guardian_Check()
	{
		if (GetACSNekkerGuardian())
		{
			if (GetACSNekkerGuardian().GetAttitude(thePlayer) != AIA_Hostile)
			{
				GetACSNekkerGuardian().SetAttitude(thePlayer, AIA_Hostile);
			}
		}

		actors.Clear();
		
		actors = thePlayer.GetNPCsAndPlayersInRange( 50, 1, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		if( actors.Size() > 0)
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				nekkerGuardianTargetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) ;

				if (npc.HasTag('ACS_Nekker_Guardian'))			
				{
					if( nekkerGuardianTargetDistance > 30 * 30 && nekkerGuardianTargetDistance <= 50 * 50 ) 
					{
						if (!npc.IsInCombat())
						{
							npc.Destroy();
						}
					}
				}
			}
		}
	}

	function DisableCameraAnim()
	{
		theGame.GetGameCamera().StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation('camera_shake_loop_lvl1_1');
	}

	function InterruptChargeAttackForSwappedBeh()
	{
		var swapped_beh_actors_shield, swapped_beh_actors_vamp, interrupt_actors		: array<CActor>;
		var i, j, k 																	: int;
		var interrupt_actor																: CActor; 

		/*
		swapped_beh_actors_shield.Clear();

		theGame.GetActorsByTag( 'ACS_Swapped_To_Shield', swapped_beh_actors_shield );	

		for( i = 0; i < swapped_beh_actors_shield.Size(); i += 1 )
		{
			swapped_beh_actors_shield[i].SignalGameplayEvent( 'InterruptChargeAttack' );
		}

		swapped_beh_actors_vamp.Clear();

		theGame.GetActorsByTag( 'ACS_Swapped_To_Vampire', swapped_beh_actors_vamp );	

		for( j = 0; j < swapped_beh_actors_vamp.Size(); j += 1 )
		{
			swapped_beh_actors_vamp[j].SignalGameplayEvent( 'InterruptChargeAttack' );
		}
		*/

		interrupt_actors.Clear();

		interrupt_actors = thePlayer.GetNPCsAndPlayersInRange( 100, 100, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors + FLAG_Attitude_Hostile);

		if( interrupt_actors.Size() > 0 )
		{
			for( i = 0; i < interrupt_actors.Size(); i += 1 )
			{
				if (interrupt_actors[i].IsHuman())
				{
					if (interrupt_actors[i].HasTag('ACS_Swapped_To_Shield')
					|| interrupt_actors[i].HasTag('ACS_Swapped_To_Vampire')
					|| interrupt_actors[i].HasTag('ACS_Swapped_To_1h_Sword')
					|| interrupt_actors[i].HasTag('ACS_Swapped_To_2h_Sword')
					|| interrupt_actors[i].HasTag('ACS_Swapped_To_Witcher')
					|| interrupt_actors[i].HasTag('ACS_Final_Fear_Stack')
					)
					{
						interrupt_actors[i].SignalGameplayEvent( 'InterruptChargeAttack' );
					}
					else 
					{
						if( RandF() < 0.01 )
						{
							interrupt_actors[i].SignalGameplayEvent( 'InterruptChargeAttack' );
						}
					}
				}
			}
		}
	}

	function Manual_Camera_Control()
	{
		if (!thePlayer.IsHardLockEnabled())
		{
			if (!thePlayer.IsUsingHorse() 
			&& !thePlayer.IsUsingVehicle() 
			&& !thePlayer.IsPerformingFinisher()
			//&& thePlayer.IsInCombat()
			&& thePlayer.HasTag('ACS_Manual_Combat_Control')) 
			{
				movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

				movementAdjustor.CancelAll();
				
				ticket = movementAdjustor.CreateNewRequest( 'ACS_Manual_Combat_Control_Rotate' );
					
				movementAdjustor.AdjustmentDuration( ticket, 0.25 );

				movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());
				movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 5000000 );
				movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 5000000 );

				movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );
			}
		}
	}

	function Glide_Collision_Check(): bool
	{
		var tempEndPoint_1, tempEndPoint_2, normal_1, normal_2			: Vector;
		var collisionGroupsNames										: array<name>;	

		collisionGroupsNames.Clear();

		collisionGroupsNames.PushBack( 'Terrain');
		collisionGroupsNames.PushBack( 'Static');
		collisionGroupsNames.PushBack( 'Water'); 
        collisionGroupsNames.PushBack( 'Door' );
        collisionGroupsNames.PushBack( 'Dangles' );
        collisionGroupsNames.PushBack( 'Foliage' );
        collisionGroupsNames.PushBack( 'Destructible' );
        collisionGroupsNames.PushBack( 'RigidBody' );
        collisionGroupsNames.PushBack( 'Boat' );
        collisionGroupsNames.PushBack( 'BoatDocking' );
        collisionGroupsNames.PushBack( 'Platforms' );
        collisionGroupsNames.PushBack( 'Corpse' );
        collisionGroupsNames.PushBack( 'Projectile' );
        collisionGroupsNames.PushBack( 'ParticleCollider' ); 
        collisionGroupsNames.PushBack( 'Ragdoll' ); 

		if ( 
		theGame.GetWorld().StaticTrace( thePlayer.GetWorldPosition(), thePlayer.GetWorldPosition() + thePlayer.GetHeadingVector() * 2, tempEndPoint_1, normal_1, collisionGroupsNames ) 
		|| theGame.GetWorld().StaticTrace( thePlayer.GetWorldPosition(), thePlayer.GetWorldPosition() + thePlayer.GetWorldUp() * -1.49, tempEndPoint_2, normal_2, collisionGroupsNames )
		)		
		{
			return true;
		}
		
		return false;
	}

	function Glide_Stop()
	{
		if(Glide_Collision_Check()
		//|| thePlayer.IsOnGround()
		)
		{
			if (FactsQuerySum("ACS_Is_Gliding") > 0)
			{
				theGame.ReleaseNoSaveLock( ACS_Glide_Savelock_ID );

				thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Roll,					'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Parry,				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Movement,				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_Jump, 				'ACS_Gliding');
				thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Gliding');

				RemoveTimer('ACS_Gliding');

				thePlayer.StopEffect('glide_fx');
				thePlayer.PlayEffectSingle('glide_fx');
				thePlayer.StopEffect('glide_fx');

				thePlayer.StopEffect( 'bruxa_dash_trails' );
				thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );
				thePlayer.StopEffect( 'bruxa_dash_trails' );

				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');

				thePlayer.EnableCollisions(true);
				thePlayer.EnableCharacterCollisions(true);

				ACS_Wings_Entity().BreakAttachment();

				ACS_Wings_Entity().Teleport(thePlayer.GetWorldPosition() + Vector( 0, -200, 0 ) );

				ACS_Wings_Entity().DestroyAfter(0.025);

				((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePoseFadeOut(0.1);

				((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).UnfreezePose();

				if (thePlayer.IsOnGround())
				{
					if ( thePlayer.IsAnyWeaponHeld() )
					{
						if (thePlayer.IsWeaponHeld('fist') )
						{
							PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01_fist' );
						}
						else
						{
							PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01' );
						}
					}
					else
					{
						PlayerPlayAnimation( 'man_geralt_sword_dodge_roll_rp_f_01_fist' );
					}
				}
				else
				{
					PlayerPlayAnimation( 'ex_fall_start' );
				}		

				thePlayer.SoundEvent("monster_dettlaff_monster_movement_wing_flap_long_hard");

				thePlayer.SoundEvent("monster_dettlaff_monster_movement_land_heavy");

				if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
				//&& !thePlayer.HasTag('blood_sucking')
				)
				{
					if (!thePlayer.HasTag('aard_sword_equipped'))
					{
						ACS_Weapon_Respawn();
					}
					
					thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

					thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
				}

				FactsRemove("ACS_Is_Gliding");
			}
		}
	}

	function SwordWalkCancelFallback()
	{
		if ( theInput.GetActionValue('GI_AxisLeftY') == 0
		&& theInput.GetActionValue('GI_AxisLeftX') == 0
		//&& !thePlayer.GetIsWalking()
		)
		{
			RemoveDefaltSwordWalkCancel();

			//ACS_Transformation_Werewolf_Stop_Moving_Failsafe();
		}
	}

	private var acs_enabledQuestTracking : bool; 
	
	default acs_enabledQuestTracking = false;

	public function ACS_EnableQuestTracking( enable : bool )
	{
		acs_enabledQuestTracking = enable;
	}

	public function ACS_QuestTrackingCheck() : bool
	{
		return acs_enabledQuestTracking;
	}

	function ACS_QuestTrackControl()
	{
		if(theGame.GetFocusModeController().CanUseFocusMode()
		&& theGame.IsFocusModeActive()
		&& !thePlayer.IsInCombat())
		{
			if (FactsQuerySum("ACS_HijackPotionControl") <= 0)
			{
				ACS_EnableQuestTracking( true );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'DrinkPotion1' );

				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'DrinkPotion2' ); 

				theInput.RegisterListener( this, 'OnCommDrinkPotion1', 'DrinkPotion1' );

				theInput.RegisterListener( this, 'OnCommDrinkPotion2', 'DrinkPotion2' );

				FactsAdd("ACS_HijackPotionControl", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_HijackPotionControl") > 0)
			{
				ACS_EnableQuestTracking( false );

				theInput.UnregisterListener( this, 'DrinkPotion1' );

				theInput.UnregisterListener( this, 'DrinkPotion2' ); 

				theInput.RegisterListener( thePlayer.GetInputHandler(), 'OnCommDrinkPotion1', 'DrinkPotion1' );

				theInput.RegisterListener( thePlayer.GetInputHandler(), 'OnCommDrinkPotion2', 'DrinkPotion2' );

				FactsRemove("ACS_HijackPotionControl");
			}
		}
	}

	function ACS_MeditationControl()
	{
		if(theGame.GetFocusModeController().CanUseFocusMode()
		&& theGame.IsFocusModeActive()
		&& !thePlayer.IsInCombat()
		&& GetWitcherPlayer().CanMeditate()
		&& GetWitcherPlayer().CanMeditateHere()
		)
		{
			if (FactsQuerySum("ACS_HijackWalkControl") <= 0)
			{
				theInput.UnregisterListener( thePlayer.GetInputHandler(), 'DrinkPotion3' ); 

				theInput.RegisterListener( this, 'OnCommDrinkPotion3', 'DrinkPotion3' );

				FactsAdd("ACS_HijackWalkControl", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_HijackWalkControl") > 0)
			{
				theInput.UnregisterListener( this, 'DrinkPotion3' );

				theInput.RegisterListener( thePlayer.GetInputHandler(), 'OnCommDrinkPotion3', 'DrinkPotion3' );

				FactsRemove("ACS_HijackWalkControl");
			}
		}
	}

	function ACS_TrackQuestSwitch( dir : int )
	{
		var i, newQuestIndex : int;
		var activeQuests : array< CJournalBase >;
		var trackedQuest : CJournalQuest;
		
		theGame.GetJournalManager().GetActivatedOfType( 'CJournalQuest', activeQuests );
		trackedQuest = theGame.GetJournalManager().GetTrackedQuest();
		
		for ( i = activeQuests.Size() - 1; i >= 0; i -= 1 )
		{
			if ( theGame.GetJournalManager().GetEntryStatus( activeQuests[ i ] ) != JS_Active )
			{
				activeQuests.Erase( i );
			}
		}

		if ( activeQuests.Size() <= 1 )
		{
			return;
		}

		for ( i = 0; i < activeQuests.Size(); i += 1 )
		{
			if ( trackedQuest == activeQuests[ i ] )
			{
				newQuestIndex = ( i + dir + activeQuests.Size() ) % activeQuests.Size();
				theGame.GetJournalManager().SetTrackedQuest( activeQuests[ newQuestIndex ] );
				return;
			}
		}
	}

	function HudSettingsCheck(nam : name) : string
	{
		var conf: CInGameConfigWrapper;
		var value: string;
		
		conf = (CInGameConfigWrapper)theGame.GetInGameConfigWrapper();
		
		value = conf.GetVarValue('Hud', nam);

		return value;
	}

	function BuffsHudEnabled(): bool 
	{
		var configValue :int;
		var configValueString : string;
		
		configValueString = HudSettingsCheck('BuffsModule');
		configValue =(int) configValueString;

		if(configValueString=="" || configValue<0)
		{
			return true;
		}

		else return (bool)configValueString;
	}

	function ACS_BuffsDisplay()
	{
		var curToxicity 				: float;	
		var curMaxToxicity 				: float;
		var curLockedToxicity			: float;

		if (((CR4ScriptedHud)theGame.GetHud())
		&& BuffsHudEnabled())
		{
			thePlayer.GetStats( BCS_Toxicity, curToxicity, curMaxToxicity );

			curLockedToxicity = thePlayer.GetStat(BCS_Toxicity) - curToxicity;

			if 
			(
			!ACS_CombatToExplorationCheck()
			|| thePlayer.IsInCombatState()
			|| theGame.IsFocusModeActive()
			|| ((CR4HudModuleRadialMenu)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("RadialMenuModule")).IsRadialMenuOpened()
			|| (curToxicity > 0.f || curLockedToxicity > 0.f)
			|| thePlayer.GetStat(BCS_Vitality) < thePlayer.GetStatMax(BCS_Vitality)
			)
			{
				if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).GetEnabled())
				{
					((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).SetEnabled(true);
					((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
				}
			}
			else
			{
				if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).GetEnabled())
				{
					((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("BuffsModule")).SetEnabled(false);
					((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
				}
			}
		}
	}

	function PlayerWerewolfTeleportation()
	{
		var werewolfPos : Vector;
		var werewolfRot : EulerAngles;

		werewolfPos = ((GetACSTransfomrationWerewolf().GetBoneWorldPosition('r_hand') + GetACSTransfomrationWerewolf().GetBoneWorldPosition('l_hand'))/2);
		werewolfRot = GetACSTransfomrationWerewolf().GetWorldRotation();

		thePlayer.TeleportWithRotation(werewolfPos, werewolfRot);
	}

	function Transformation_Control()
	{
		if ( ACS_Transformation_Activated_Check() )
		{
			if ( theGame.IsDialogOrCutscenePlaying() 
			|| thePlayer.IsInNonGameplayCutscene() 
			|| thePlayer.IsInGameplayScene() 
			|| theGame.IsCurrentlyPlayingNonGameplayScene()
			|| thePlayer.IsInCutsceneIntro() 
			)
			{
				if (ACS_Transformation_Werewolf_Check())
				{
					DisableWerewolf();
				}
			}
			else
			{
				if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
				{
					thePlayer.DestroyEffect('acs_armor_effect_1');
				}
				
				if (thePlayer.IsEffectActive('acs_armor_effect_2', false))
				{
					thePlayer.DestroyEffect('acs_armor_effect_2');
				}

				if (thePlayer.IsEffectActive('special_attack_tell_r', false))
				{
					thePlayer.DestroyEffect('special_attack_tell_r');
				}
				
				if (thePlayer.IsEffectActive('special_attack_tell_l', false))
				{
					thePlayer.DestroyEffect('special_attack_tell_l');
				}

				if (thePlayer.IsEffectActive('special_attack_tell_r_leg', false))
				{
					thePlayer.DestroyEffect('special_attack_tell_r_leg');
				}
				
				if (thePlayer.IsEffectActive('special_attack_tell_l_leg', false))
				{
					thePlayer.DestroyEffect('special_attack_tell_l_leg');
				}

				if (thePlayer.IsEffectActive('vampire_magic_step_r', false))
				{
					thePlayer.DestroyEffect('vampire_magic_step_r');
				}

				if (thePlayer.IsEffectActive('vampire_magic_step_l', false))
				{
					thePlayer.DestroyEffect('vampire_magic_step_l');
				}

				if (thePlayer.IsEffectActive('odim_magic_step_l', false))
				{
					thePlayer.DestroyEffect('odim_magic_step_l');
				}

				if (thePlayer.IsEffectActive('odim_magic_step_r', false))
				{
					thePlayer.DestroyEffect('odim_magic_step_r');
				}

				if (thePlayer.IsEffectActive('demon_cs', false))
				{
					thePlayer.DestroyEffect('demon_cs');
				}

				if (thePlayer.IsEffectActive('him_smoke_red', false))
				{
					thePlayer.DestroyEffect('him_smoke_red');
				}

				thePlayer.SetVisibility(false);

				thePlayer.EnableCollisions(false);

				thePlayer.SetCanPlayHitAnim(false); 

				thePlayer.EnableCharacterCollisions(false); 

				if (!((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).HasFrozenPose())
				{
					((CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent')).FreezePose();
				}

				if (ACS_Transformation_Werewolf_Check()
				&& GetACSTransfomrationWerewolf())
				{
					ACS_Werewolf_Move_Controls();

					if (FactsQuerySum("ACS_Transformation_Attached") <= 0)
					{
						thePlayer.CreateAttachment( GetACSTransfomrationWerewolf(), 'attach_slot' , Vector( 0, 0, 1 ), EulerAngles(0,0,0) );

						FactsAdd("ACS_Transformation_Attached", 1, -1);
					}
				}
			}
		}
	}

	function AutoRead()
	{
		var inv																	: CInventoryComponent;
		var items1, items2, allItems											: array< SItemUniqueId >;
		var	i																	: int;

		if(!theGame.IsFocusModeActive())
		{
			if (FactsQuerySum("ACS_Focus_Mode_Auto_Read") > 0)
			{
				FactsRemove("ACS_Focus_Mode_Auto_Read");
			}

			return;
		}
		else
		{
			if (FactsQuerySum("ACS_Focus_Mode_Auto_Read") <= 0)
			{
				items1.Clear();
				items2.Clear();

				allItems.Clear();

				inv = thePlayer.inv;

				items1 = inv.GetItemsByTag( 'ReadableItem' );
				items2 = inv.GetItemsByTag( 'Painting' );

				ArrayOfIdsAppend( allItems, items1 );
				ArrayOfIdsAppend( allItems, items2 );

				for ( i = 0; i < allItems.Size(); i += 1 )
				{
					inv.ReadSchematicsAndRecipes(allItems[i]);
				}

				FactsAdd("ACS_Focus_Mode_Auto_Read", 1, -1);
			}
		}
	}

	function Durability_Always_Max()
	{
		var inv																	: CInventoryComponent;
		var items1, items2, items3, items4, items5, items6, allItems			: array< SItemUniqueId >;
		var	i																	: int;

		if (!ACS_UnlimitedDurability_Enabled())
		{
			return;
		}

		if(!theGame.IsFocusModeActive())
		{
			if (FactsQuerySum("ACS_Focus_Mode_Durability_Max") > 0)
			{
				FactsRemove("ACS_Focus_Mode_Durability_Max");
			}

			return;
		}
		else
		{
			if (FactsQuerySum("ACS_Focus_Mode_Durability_Max") <= 0)
			{
				items1.Clear();
				items2.Clear();
				items3.Clear();
				items4.Clear();
				items5.Clear();
				items6.Clear();
				allItems.Clear();

				inv = thePlayer.inv;

				items1 = inv.GetItemsByCategory( 'steelsword' );
				items2 = inv.GetItemsByCategory( 'silversword' );
				items3 = inv.GetItemsByCategory( 'armor' );
				items4 = inv.GetItemsByCategory( 'gloves' );
				items5 = inv.GetItemsByCategory( 'pants' );
				items6 = inv.GetItemsByCategory( 'boots' );
				
				ArrayOfIdsAppend( allItems, items1 );
				ArrayOfIdsAppend( allItems, items2 );
				ArrayOfIdsAppend( allItems, items3 );
				ArrayOfIdsAppend( allItems, items4 );
				ArrayOfIdsAppend( allItems, items5 );
				ArrayOfIdsAppend( allItems, items6 );

				for ( i = 0; i < allItems.Size(); i += 1 )
				{
					if ( inv.HasItemDurability( allItems[ i ] ) )
					{
						if ( inv.GetItemDurability(allItems[i]) != inv.GetItemMaxDurability(allItems[i]) )
						{
							inv.SetItemDurabilityScript( allItems[ i ], inv.GetItemMaxDurability( allItems[ i ] ) );
						}
					}
					else
					{
						inv.SetItemDurabilityScript( allItems[ i ], inv.GetItemMaxDurability( allItems[ i ] ) );
					}
				}

				FactsAdd("ACS_Focus_Mode_Durability_Max", 1, -1);
			}
		}
	}

	function ACS_Armor_Add()
	{
		if (thePlayer.inv.HasItem('ACS_Armor_Omega'))
		{
			if( !thePlayer.inv.HasItem( 'ACS_Armor_Alpha' ) )
			{
				thePlayer.inv.AddAnItem( 'ACS_Armor_Alpha', 1 );
			}
		}

		if (thePlayer.inv.HasItem('ACS_Armor_Alpha'))
		{
			if( !thePlayer.inv.HasItem( 'ACS_Armor_Omega' ) )
			{
				thePlayer.inv.AddAnItem( 'ACS_Armor_Omega', 1 );
			}
		}

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Omega'))
		{
			if( !thePlayer.inv.HasItem( 'NGP_ACS_Armor_Alpha' ) )
			{
				thePlayer.inv.AddAnItem( 'NGP_ACS_Armor_Alpha', 1 );
			}
		}

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Alpha'))
		{
			if( !thePlayer.inv.HasItem( 'NGP_ACS_Armor_Omega' ) )
			{
				thePlayer.inv.AddAnItem( 'NGP_ACS_Armor_Omega', 1 );
			}
		}
	}

	function ACS_Armor_Scale()
	{
		ACS_Aerondight_Scale();
		ACS_Steel_Aerondight_Scale();
		ACS_Iris_Scale();
		//ACS_Toussaint_Knights_Steel_Sword_Scale();

		ACS_Armor_Omega_Scale();
		ACS_NGP_Armor_Omega_Scale();
		ACS_Armor_Alpha_Scale();
		ACS_NGP_Armor_Alpha_Scale();
		ACS_Gloves_Scale();
		ACS_NGP_Gloves_Scale();
		ACS_Pants_Scale();
		ACS_NGP_Pants_Scale();
		ACS_Boots_Scale();
		ACS_NGP_Boots_Scale();
	}

	function ACS_Aerondight_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Aerondight EP2'))
		{
			item = thePlayer.inv.GetItemId('Aerondight EP2');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Steel_Aerondight_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Steel_Aerondight'))
		{
			item = thePlayer.inv.GetItemId('ACS_Steel_Aerondight');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_silver_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_silver_dmg');
				}
			}
		}
	}

	function ACS_Iris_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Olgierd Sabre'))
		{
			item = thePlayer.inv.GetItemId('Olgierd Sabre');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Toussaint_Knights_Steel_Sword_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('Knights steel sword 3'))
		{
			item = thePlayer.inv.GetItemId('Knights steel sword 3');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_steel_dmg', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_steel_dmg');
				}
			}
		}
	}

	function ACS_Armor_Omega_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Armor_Omega'))
		{
			item = thePlayer.inv.GetItemId('ACS_Armor_Omega');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Armor_Omega_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Omega'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Armor_Omega');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_Armor_Alpha_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Armor_Alpha'))
		{
			item = thePlayer.inv.GetItemId('ACS_Armor_Alpha');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_NGP_Armor_Alpha_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Armor_Alpha'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Armor_Alpha');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_armor_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_armor_armor');
				}
			}
		}
	}

	function ACS_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Gloves'))
		{
			item = thePlayer.inv.GetItemId('ACS_Gloves');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_NGP_Gloves_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Gloves'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Gloves');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_gloves_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_gloves_armor');
				}
			}
		}
	}

	function ACS_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Pants'))
		{
			item = thePlayer.inv.GetItemId('ACS_Pants');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Pants_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Pants'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Pants');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('ACS_Boots'))
		{
			item = thePlayer.inv.GetItemId('ACS_Boots');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function ACS_NGP_Boots_Scale()
	{
		var item 						: SItemUniqueId;
		var j,dif						: int;

		if (thePlayer.inv.HasItem('NGP_ACS_Boots'))
		{
			item = thePlayer.inv.GetItemId('NGP_ACS_Boots');

			dif = GetWitcherPlayer().GetLevel() - thePlayer.inv.GetItemLevel(item);

			if (dif > 0)
			{
				for (j = 0; j < dif; j += 1)
				{
					thePlayer.inv.AddItemCraftedAbility(item, 'autogen_fixed_pants_armor', true);
				}
			}
			else if (dif < 0)
			{
				for (j = 0; j < dif * -1; j += 1)
				{
					thePlayer.inv.RemoveItemCraftedAbility(item, 'autogen_fixed_pants_armor');
				}
			}
		}
	}

	function teleportchain()
	{
		var bonePosition :Vector;
		var boneRotation :EulerAngles;

		GetWitcherPlayer().GetBoneWorldPositionAndRotationByIndex( GetWitcherPlayer().GetBoneIndex( 'r_hand' ), bonePosition, boneRotation );
		
		GetACSChain().TeleportWithRotation(bonePosition, boneRotation);
	}

	function removeEffectsFromPlayer()
	{
		if (thePlayer.HasTag('ACS_No_Glows_On_Player'))
		{
			thePlayer.DestroyEffect('drain_energy_caretaker_shovel');
			thePlayer.DestroyEffect('mutation_10');
			thePlayer.DestroyEffect('runeword_10_stamina');
			thePlayer.DestroyEffect('runeword_20_adrenaline');
			thePlayer.DestroyEffect('runeword_4');
			thePlayer.DestroyEffect('mutation_7_baff');
			thePlayer.DestroyEffect('use_potion');
			thePlayer.DestroyEffect('mutation_7_adrenaline_burst');
			thePlayer.DestroyEffect('mutation_7_adrenaline_drop');
			thePlayer.DestroyEffect('mutation_10_euphoria');
			thePlayer.DestroyEffect('mutation_1_aard_power');
			thePlayer.DestroyEffect('mutation_6_power');
			thePlayer.DestroyEffect('mutation_7_power');
			thePlayer.DestroyEffect('mutation_7_less_power');
			thePlayer.DestroyEffect('mutation_1_igni_power');
			thePlayer.DestroyEffect('mutation_1_yrden_power');
			thePlayer.DestroyEffect('mutation_1_quen_power');
			thePlayer.DestroyEffect('mutation_5');
			thePlayer.DestroyEffect('mutation_7_debaff');
			thePlayer.DestroyEffect('mutation_5_stage_01');
			thePlayer.DestroyEffect('mutation_5_stage_02');
			thePlayer.DestroyEffect('mutation_5_stage_03');
			thePlayer.DestroyEffect('mutation_energy');
			thePlayer.DestroyEffect('mutation_10_energy');
			thePlayer.DestroyEffect('runeword_8');
		}
	}

	function Mage_Idle_Action()
	{
		if (ACS_can_play_mage_idle_action())
		{
			ACS_refresh_mage_idle_action_cooldown();

			GetACSMageIdleAction();
		}
	}

	private var magicstepalt : bool;
	default magicstepalt = true;

	public timer function ACS_Magic_Step_Timer ( dt : float, id : int)
	{
		if (magicstepalt)
		{
			if (GetWitcherPlayer().IsAnyQuenActive())
			{
				thePlayer.DestroyEffect('vampire_magic_step_r');

				thePlayer.PlayEffectSingle('odim_magic_step_r');
				thePlayer.StopEffect('odim_magic_step_r');
			}
			else
			{
				thePlayer.DestroyEffect('odim_magic_step_r');

				thePlayer.PlayEffectSingle('vampire_magic_step_r');
				thePlayer.StopEffect('vampire_magic_step_r');
			}

			magicstepalt = false;
		}
		else
		{
			if (GetWitcherPlayer().IsAnyQuenActive())
			{
				thePlayer.DestroyEffect('vampire_magic_step_l');

				thePlayer.PlayEffectSingle('odim_magic_step_l');
				thePlayer.StopEffect('odim_magic_step_l');
			}
			else
			{
				thePlayer.DestroyEffect('odim_magic_step_l');

				thePlayer.PlayEffectSingle('vampire_magic_step_l');
				thePlayer.StopEffect('vampire_magic_step_l');
			}

			magicstepalt = true;
		}
	} 

	public timer function ACS_RedBladeProjectile_1 ( dt : float, id : int)
	{
		ACS_RedBladeProjectileActual();
	}

	public timer function ACS_RedBladeProjectile_2 ( dt : float, id : int)
	{
		ACS_RedBladeProjectileActual();
	}

	public timer function ACS_RedBladeProjectile_3 ( dt : float, id : int)
	{
		ACS_RedBladeProjectileActual();
	}
	
	function RedBladeProjectileSingle()
	{
		if (ACS_Armor_Equipped_Check())
		{
			RemoveTimer('ACS_RedBladeProjectile_1');
			RemoveTimer('ACS_RedBladeProjectile_2');
			RemoveTimer('ACS_RedBladeProjectile_3');
			AddTimer('ACS_RedBladeProjectile_1', 0.75, false);
		}
	}

	function RedBladeProjectileTriple()
	{
		if (ACS_Armor_Equipped_Check())
		{
			RemoveTimer('ACS_RedBladeProjectile_1');
			RemoveTimer('ACS_RedBladeProjectile_2');
			RemoveTimer('ACS_RedBladeProjectile_3');
			AddTimer('ACS_RedBladeProjectile_1', 0.75, false);
			AddTimer('ACS_RedBladeProjectile_2', 0.875, false);
			AddTimer('ACS_RedBladeProjectile_3', 1, false);
		}
	}

	function NPC_Stay_Away()
	{
		var actor							: CActor; 
		var actors		    				: array<CActor>;
		var i								: int;
		var npc								: CNewNPC;
		var movementAdjustorNPC				: CMovementAdjustor;
		var ticketNPC						: SMovementAdjustmentRequestTicket;
		var voiceTagName 					: name;
		var voiceTagStr						: string;
		var appearanceName 					: name;
		var appearanceStr					: string;
		var npcAnimatedComponent 			: CAnimatedComponent;
		var l_aiTree						: CAIPlayAnimationSlotAction;

		if (thePlayer.IsInCombat())
		{
			return;
		}

		//if (ACS_can_push_npc())
		{
			//ACS_refresh_npc_push_cooldown();

			actors.Clear();

			actors = thePlayer.GetNPCsAndPlayersInRange( 2, 10, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors);

			if( actors.Size() > 0 )
			{
				for( i = 0; i < actors.Size(); i += 1 )
				{
					npc = (CNewNPC)actors[i];

					if (((CNewNPC)npc).GetNPCType() != ENGT_Quest)
					{
						npcAnimatedComponent = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );

						voiceTagName =  npc.GetVoicetag();
						voiceTagStr = NameToString( voiceTagName );
						
						appearanceName =  npc.GetAppearance();
						appearanceStr = NameToString( appearanceName );

						movementAdjustorNPC = npc.GetMovingAgentComponent().GetMovementAdjustor();

						ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_ACS_Armor_Rotate');
						movementAdjustorNPC.CancelByName( 'ACS_NPC_ACS_Armor_Rotate' );
						movementAdjustorNPC.CancelAll();

						ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_ACS_Armor_Rotate' );
						movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.25 );
						movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 500000 );

						targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) ;
						
						l_aiTree = new CAIPlayAnimationSlotAction in npc;
						l_aiTree.OnCreated();
						
						l_aiTree.slotName = 'NPC_ANIM_SLOT';

						if (npc.IsUsingVehicle()) 
						{
							npc.SignalGameplayEventParamInt( 'RidingManagerDismountHorse', DT_shakeOff | DT_fromScript);
						}
						else
						{
							if (npc.IsMan()
							|| npc.IsWoman()
							|| npc.GetMovingAgentComponent().GetName() == "dwarf_base"
							)
							{
								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

								//if (ACS_can_push_npc())
								{
									//ACS_refresh_npc_push_cooldown();

									if (
										npc.GetInventory().IsIdValid( npc.GetInventory().GetItemFromSlot('r_weapon') )
										|| npc.GetInventory().IsIdValid( npc.GetInventory().GetItemFromSlot('l_weapon') )
									)
									{
										npc.DropItemFromSlot('r_weapon');
										npc.DropItemFromSlot('l_weapon');
									}
									else
									{
										if (RandF() < 0.5)
										{
											if (RandF() < 0.5)
											{
												l_aiTree.animName = 'push_hard_left';
												//npcAnimatedComponent.PlaySlotAnimationAsync ( 'push_hard_left', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
											}
											else
											{
												l_aiTree.animName = 'push_hard_right';
												//npcAnimatedComponent.PlaySlotAnimationAsync ( 'push_hard_right', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
											}
										}
										else
										{
											l_aiTree.animName = 'push_hard_forward';
											//npcAnimatedComponent.PlaySlotAnimationAsync ( 'push_hard_forward', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
										}

										npc.ForceAIBehavior( l_aiTree, BTAP_Emergency);
									}
								}
							}
							else if (StrFindFirst(voiceTagStr, "BOY") >= 0
							|| StrFindFirst(voiceTagStr, "GIRL") >= 0
							|| StrFindFirst(appearanceStr, "BOY") >= 0
							|| StrFindFirst(appearanceStr, "GIRL") >= 0
							)
							{
								//if (ACS_can_push_npc())
								{
									//ACS_refresh_npc_push_cooldown();

									if ( !npc.GetInventory().IsEmpty(false) )
									{
										npc.GetInventory().RemoveAllItems();
									}
									else
									{
										npc.GetInventory().RemoveAllItems();

										movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

										if (RandF() < 0.5)
										{
											if (RandF() < 0.5)
											{
												l_aiTree.animName = 'push_hard_left';
												//npcAnimatedComponent.PlaySlotAnimationAsync ( 'push_hard_left', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
											}
											else
											{
												l_aiTree.animName = 'push_hard_right';
												//npcAnimatedComponent.PlaySlotAnimationAsync ( 'push_hard_right', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
											}
										}
										else
										{
											l_aiTree.animName = 'push_hard_front';
											//npcAnimatedComponent.PlaySlotAnimationAsync ( 'push_hard_front', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
										}

										npc.ForceAIBehavior( l_aiTree, BTAP_Emergency);
									}
								}
							}
							else if (npc.IsHorse() && npc != thePlayer.GetHorseWithInventory())
							{
								if (ACS_can_push_npc())
								{
									ACS_refresh_npc_push_cooldown();

									if (RandF() < 0.5)
									{
										npcAnimatedComponent.PlaySlotAnimationAsync ( 'horse_rearing01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
									}
									else
									{
										npcAnimatedComponent.PlaySlotAnimationAsync ( 'horse_throw_off_the_rider_start', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25, 0.25) );
									}

									npc.PlayEffectSingle('demonic_cast');
									npc.StopEffect('demonic_cast');
								}
							}
							else if (npc.IsAnimal() && !npc.IsHorse())
							{
								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer, 180 );

								if (!npc.HasBuff(EET_Burning))
								{
									npc.AddEffectDefault( EET_Burning, GetWitcherPlayer(), 'ACS_Armor_Effect' );
								}

								if (!npc.IsEffectActive('critical_burning', false))
								{
									npc.PlayEffectSingle('critical_burning');
								}
							}	

							npc.SignalGameplayEvent( 'AI_GetOutOfTheWay' ); 
		
							npc.SignalGameplayEventParamObject( 'CollideWithPlayer', thePlayer ); 
	
							theGame.GetBehTreeReactionManager().CreateReactionEvent( npc, 'BumpAction', 1, 1, 1, 1, false );
						}
					}
				}
			}
		}
	}

	function Hair_Thing()
	{
		var inv : CInventoryComponent;
		var witcher : W3PlayerWitcher;
		var ids : array<SItemUniqueId>;
		var size : int;
		var i : int;

		witcher = GetWitcherPlayer();
		inv = witcher.GetInventory();
		
		ids = inv.GetItemsByCategory( 'hair' );
		size = ids.Size();
			
		if( size > 0 )
		{					
			for( i = 0; i < size; i+=1 )
			{
				if(inv.IsItemMounted( ids[i] ) )
				inv.DespawnItem(ids[i]);
			}				
		}		

		ids.Clear();
	}

	function Ether_Sword_Summon()
	{
		if (!GetACSArmorEtherSword() 
		&& (thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_secondary_sword_equipped_TAG')
		|| thePlayer.HasTag('igni_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped_TAG'))
		&& !thePlayer.HasTag('quen_sword_equipped')
		&& !thePlayer.HasTag('axii_sword_equipped')
		&& !thePlayer.HasTag('aard_sword_equipped')
		&& !thePlayer.HasTag('yrden_sword_equipped')
		&& !thePlayer.HasTag('quen_secondary_sword_equipped')
		&& !thePlayer.HasTag('axii_secondary_sword_equipped')
		&& !thePlayer.HasTag('aard_secondary_sword_equipped')
		&& !thePlayer.HasTag('yrden_secondary_sword_equipped')
		&& !thePlayer.HasTag('ACS_HideWeaponOnDodge')
		&& !thePlayer.HasTag('ACS_HideWeaponOnDodge_Claw_Effect')
		)
		{
			ACSArmorEtherSwordSummon();
		}
	}

	function EtherSwordFireConntrol()
	{
		if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus)
		&& thePlayer.GetStat(BCS_Stamina) == thePlayer.GetStatMax(BCS_Stamina))
		{
			if (!GetACSArmorEtherSword().IsEffectActive('red_runeword_igni_2', false))
			{
				GetACSArmorEtherSword().PlayEffectSingle('red_runeword_igni_2');
			}

			if (!GetACSArmorEtherSword().IsEffectActive('red_runeword_igni_1', false))
			{
				GetACSArmorEtherSword().PlayEffectSingle('red_runeword_igni_1');
			}
		}
		else
		{
			if (GetACSArmorEtherSword().IsEffectActive('red_runeword_igni_2', false))
			{
				GetACSArmorEtherSword().StopEffect('red_runeword_igni_2');
			}

			if (GetACSArmorEtherSword().IsEffectActive('red_runeword_igni_1', false))
			{
				GetACSArmorEtherSword().StopEffect('red_runeword_igni_1');
			}
		}
	}

	function ACS_Armor_Omega_Ether_Swords()
	{
		if (GetACSArmorEtherSword().IsEffectActive('dsd_closed_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('dsd_closed_glow');
		}

		if (GetACSArmorEtherSword().IsEffectActive('dsd_open_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('dsd_open_glow');
		}

		if (GetACSArmorEtherSword().IsEffectActive('doomsword_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('doomsword_glow');
		}

		if (GetACSArmorEtherSword().IsEffectActive('doomsword_amasii_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('doomsword_amasii_glow');
		}

		if(GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
		{
			if (GetACSArmorEtherSword().IsEffectActive('war_sword_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('war_sword_glow');
			}

			if (!GetACSArmorEtherSword().IsEffectActive('soul_edge_glow', false))
			{
				thePlayer.SoundEvent("fx_rune_activate_igni");
				thePlayer.SoundEvent("fx_rune_activate_igni");
				thePlayer.SoundEvent("fx_rune_activate_igni");

				GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
				GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

				GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
				GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

				GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
				GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

				GetACSArmorEtherSword().PlayEffectSingle('soul_edge_glow');
			}
		}
		else if(GetWitcherPlayer().IsWeaponHeld( 'steelsword' ))
		{
			if (GetACSArmorEtherSword().IsEffectActive('soul_edge_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('soul_edge_glow');
			}

			if (!GetACSArmorEtherSword().IsEffectActive('war_sword_glow', false))
			{
				thePlayer.SoundEvent("fx_rune_activate_igni");
				thePlayer.SoundEvent("fx_rune_activate_igni");
				thePlayer.SoundEvent("fx_rune_activate_igni");

				GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
				GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

				GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
				GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

				GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
				GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

				GetACSArmorEtherSword().PlayEffectSingle('war_sword_glow');
			}
		}
	}

	function ACS_Armor_Alpha_Ether_Swords()
	{
		if (GetACSArmorEtherSword().IsEffectActive('soul_edge_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('soul_edge_glow');
		}

		if (GetACSArmorEtherSword().IsEffectActive('war_sword_glow', false))
		{
			GetACSArmorEtherSword().DestroyEffect('war_sword_glow');
		}

		if(GetWitcherPlayer().IsWeaponHeld( 'silversword' ) )
		{
			if (GetACSArmorEtherSword().IsEffectActive('dsd_closed_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('dsd_closed_glow');
			}

			if (GetACSArmorEtherSword().IsEffectActive('dsd_open_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('dsd_open_glow');
			}

			if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus))
			{
				if (GetACSArmorEtherSword().IsEffectActive('doomsword_amasii_glow', false))
				{
					GetACSArmorEtherSword().DestroyEffect('doomsword_amasii_glow');
				}

				if (!GetACSArmorEtherSword().IsEffectActive('doomsword_glow', false))
				{
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");

					GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
					GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

					GetACSArmorEtherSword().PlayEffectSingle('doomsword_glow');
				}
			}
			else
			{
				if (GetACSArmorEtherSword().IsEffectActive('doomsword_glow', false))
				{
					GetACSArmorEtherSword().DestroyEffect('doomsword_glow');
				}

				if (!GetACSArmorEtherSword().IsEffectActive('doomsword_amasii_glow', false))
				{
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");

					GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
					GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

					GetACSArmorEtherSword().PlayEffectSingle('doomsword_amasii_glow');
				}
			}
		}
		else if(GetWitcherPlayer().IsWeaponHeld( 'steelsword' ))
		{
			if (GetACSArmorEtherSword().IsEffectActive('doomsword_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('doomsword_glow');
			}

			if (GetACSArmorEtherSword().IsEffectActive('doomsword_amasii_glow', false))
			{
				GetACSArmorEtherSword().DestroyEffect('doomsword_amasii_glow');
			}

			if (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus))
			{
				if (GetACSArmorEtherSword().IsEffectActive('dsd_closed_glow', false))
				{
					GetACSArmorEtherSword().DestroyEffect('dsd_closed_glow');
				}

				if (!GetACSArmorEtherSword().IsEffectActive('dsd_open_glow', false))
				{
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");

					GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
					GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

					GetACSArmorEtherSword().PlayEffectSingle('dsd_open_glow');
				}
			}
			else
			{
				if (GetACSArmorEtherSword().IsEffectActive('dsd_open_glow', false))
				{
					GetACSArmorEtherSword().DestroyEffect('dsd_open_glow');
				}

				if (!GetACSArmorEtherSword().IsEffectActive('dsd_closed_glow', false))
				{
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");
					thePlayer.SoundEvent("fx_rune_activate_igni");

					GetACSArmorEtherSword().DestroyEffect('fire_sparks_trail');
					GetACSArmorEtherSword().PlayEffectSingle('fire_sparks_trail');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff');

					GetACSArmorEtherSword().DestroyEffect('red_fast_attack_buff_hit');
					GetACSArmorEtherSword().PlayEffectSingle('red_fast_attack_buff_hit');

					GetACSArmorEtherSword().PlayEffectSingle('dsd_closed_glow');
				}
			}
		}
	}

	function ACS_Ether_Sword_Control()
	{
		if (ACS_Armor_Equipped_Check()
		&& !ACS_Transformation_Activated_Check())
		{
			if (helmtoggle)
			{
				Hair_Thing();
			}

			if (thePlayer.IsDeadlySwordHeld())
			{
				Ether_Sword_Summon();
			}
			else
			{
				if (GetACSArmorEtherSword())
				{
					GetACSArmorEtherSword().Destroy();
					thePlayer.SoundEvent("magic_sorceress_vfx_lightning_fx_loop_stop");
				}
			}

			if (GetACSArmorEtherSword())
			{
				EtherSwordFireConntrol();

				if (ACS_Armor_Omega_Equipped_Check())
				{
					ACS_Armor_Omega_Ether_Swords();
				}
				else if (ACS_Armor_Alpha_Equipped_Check())
				{
					ACS_Armor_Alpha_Ether_Swords();
				}
			}
		}
		else
		{
			if (GetACSArmorEtherSword())
			{
				GetACSArmorEtherSword().Destroy();

				thePlayer.SoundEvent("magic_sorceress_vfx_lightning_fx_loop_stop");

				if ((thePlayer.HasTag('igni_secondary_sword_equipped')
				|| thePlayer.HasTag('igni_secondary_sword_equipped_TAG')
				|| thePlayer.HasTag('igni_sword_equipped')
				|| thePlayer.HasTag('igni_sword_equipped_TAG'))
				&& thePlayer.IsDeadlySwordHeld()
				)
				{
					ACS_ShowSwordWitoutScabbardStuff();
				}
			}
		}
	}

	function ACS_Armor_Effects()
	{
		if (ACS_Armor_Equipped_Check()
		&& !ACS_Transformation_Activated_Check())
		{
			if (!helmtoggle)
			{
				//if (!thePlayer.IsEffectActive('acs_eyes_effect', true))
				//{
					//thePlayer.PlayEffect( 'acs_eyes_effect' );
				//}

				if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
				{
					thePlayer.DestroyEffect('acs_armor_effect_1');
				}
				
				if (thePlayer.IsEffectActive('acs_armor_effect_2', false))
				{
					thePlayer.DestroyEffect('acs_armor_effect_2');
				}

				if (thePlayer.IsEffectActive('special_attack_tell_r', false))
				{
					thePlayer.DestroyEffect('special_attack_tell_r');
				}
				
				if (thePlayer.IsEffectActive('special_attack_tell_l', false))
				{
					thePlayer.DestroyEffect('special_attack_tell_l');
				}

				if (thePlayer.IsEffectActive('special_attack_tell_r_leg', false))
				{
					thePlayer.DestroyEffect('special_attack_tell_r_leg');
				}
				
				if (thePlayer.IsEffectActive('special_attack_tell_l_leg', false))
				{
					thePlayer.DestroyEffect('special_attack_tell_l_leg');
				}

				if (thePlayer.IsEffectActive('demon_cs', false))
				{
					thePlayer.DestroyEffect('demon_cs');
				}

				if (thePlayer.IsEffectActive('him_smoke_red', false))
				{
					thePlayer.DestroyEffect('him_smoke_red');
				}
			}
			else if (helmtoggle)
			{
				if (thePlayer.GetVisibility())
				{
					if (!thePlayer.IsEffectActive('demon_cs', false))
					{
						thePlayer.PlayEffectSingle('demon_cs');
					}

					if (!thePlayer.IsEffectActive('him_smoke_red', false))
					{
						thePlayer.PlayEffectSingle('him_smoke_red');
					}

					if(thePlayer.IsAnyWeaponHeld())
					{
						if (!thePlayer.IsEffectActive('acs_armor_effect_1', false))
						{
							thePlayer.PlayEffectSingle('acs_armor_effect_1');
						}
		
						if (!thePlayer.IsEffectActive('special_attack_tell_r', false))
						{
							thePlayer.PlayEffectSingle('special_attack_tell_r');
						}
						
						if (!thePlayer.IsEffectActive('special_attack_tell_l', false))
						{
							thePlayer.PlayEffectSingle('special_attack_tell_l');
						}

						if (!thePlayer.IsEffectActive('special_attack_tell_r_leg', false))
						{
							thePlayer.PlayEffectSingle('special_attack_tell_r_leg');
						}
						
						if (!thePlayer.IsEffectActive('special_attack_tell_l_leg', false))
						{
							thePlayer.PlayEffectSingle('special_attack_tell_l_leg');
						}
					}
					else
					{
						if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
						{
							thePlayer.DestroyEffect('acs_armor_effect_1');
						}

						if (thePlayer.IsEffectActive('special_attack_tell_r', false))
						{
							thePlayer.DestroyEffect('special_attack_tell_r');
						}
						
						if (thePlayer.IsEffectActive('special_attack_tell_l', false))
						{
							thePlayer.DestroyEffect('special_attack_tell_l');
						}

						if (thePlayer.IsEffectActive('special_attack_tell_r_leg', false))
						{
							thePlayer.DestroyEffect('special_attack_tell_r_leg');
						}
						
						if (thePlayer.IsEffectActive('special_attack_tell_l_leg', false))
						{
							thePlayer.DestroyEffect('special_attack_tell_l_leg');
						}
					}
				}
				else
				{
					if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
					{
						thePlayer.DestroyEffect('acs_armor_effect_1');
					}

					if (thePlayer.IsEffectActive('special_attack_tell_r', false))
					{
						thePlayer.DestroyEffect('special_attack_tell_r');
					}
					
					if (thePlayer.IsEffectActive('special_attack_tell_l', false))
					{
						thePlayer.DestroyEffect('special_attack_tell_l');
					}

					if (thePlayer.IsEffectActive('special_attack_tell_r_leg', false))
					{
						thePlayer.DestroyEffect('special_attack_tell_r_leg');
					}
					
					if (thePlayer.IsEffectActive('special_attack_tell_l_leg', false))
					{
						thePlayer.DestroyEffect('special_attack_tell_l_leg');
					}

					if (thePlayer.IsEffectActive('demon_cs', false))
					{
						thePlayer.DestroyEffect('demon_cs');
					}

					if (thePlayer.IsEffectActive('him_smoke_red', false))
					{
						thePlayer.DestroyEffect('him_smoke_red');
					}
				}

				NPC_Stay_Away();
			}

			if (!thePlayer.HasBuff(EET_WeakeningAura))
			{
				thePlayer.AddEffectDefault( EET_WeakeningAura, thePlayer, 'ACS_Armor_Weakening_Aura', false );
			}

			if (thePlayer.IsInCombat())
			{
				if (theInput.GetActionValue('GI_AxisLeftX') == 0 
				&& theInput.GetActionValue('GI_AxisLeftY') == 0 
				&& !thePlayer.IsCurrentlyDodging()
				)
				{
					thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.000125 );
				}
				else
				{
					thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.00025 );
				}

				if (thePlayer.GetStat(BCS_Toxicity) < thePlayer.GetStatMax(BCS_Toxicity))
				{
					thePlayer.GainStat(BCS_Toxicity, thePlayer.GetStatMax(BCS_Toxicity) * 0.00025);
				}
			}

			if (thePlayer.GetStat(BCS_Air) < thePlayer.GetStatMax(BCS_Air))
			{
				thePlayer.GainStat(BCS_Air, thePlayer.GetStatMax(BCS_Air) * 0.1);
			}

			if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("OxygenBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("OxygenBarModule")).SetEnabled(false);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}
			
			if( thePlayer.GetIsWalking() )
			{
				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Running'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Running');
				}

				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Sprinting'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Sprinting');
				}

				if (!GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Walking'))
				{
					RemoveTimer('ACS_Magic_Step_Timer');
					AddTimer('ACS_Magic_Step_Timer', 0.5, true);

					GetWitcherPlayer().AddTag('ACS_Armor_Player_Is_Walking');
				}
			}
			else if( thePlayer.GetIsRunning() )
			{
				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Walking'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Walking');
				}

				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Sprinting'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Sprinting');
				}

				if (!GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Running'))
				{
					RemoveTimer('ACS_Magic_Step_Timer');
					AddTimer('ACS_Magic_Step_Timer', 0.25, true);

					GetWitcherPlayer().AddTag('ACS_Armor_Player_Is_Running');
				}
			}
			else if( thePlayer.GetIsSprinting() )
			{
				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Walking'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Walking');
				}

				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Running'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Running');
				}

				if (!GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Sprinting'))
				{
					RemoveTimer('ACS_Magic_Step_Timer');
					AddTimer('ACS_Magic_Step_Timer', 0.125, true);

					GetWitcherPlayer().AddTag('ACS_Armor_Player_Is_Sprinting');
				}
			}
			else
			{
				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Walking'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Walking');
				}

				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Running'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Running');
				}

				if (GetWitcherPlayer().HasTag('ACS_Armor_Player_Is_Sprinting'))
				{
					GetWitcherPlayer().RemoveTag('ACS_Armor_Player_Is_Sprinting');
				}

				RemoveTimer('ACS_Magic_Step_Timer');

				thePlayer.StopEffect('vampire_magic_step_r');
				thePlayer.StopEffect('vampire_magic_step_l');

				thePlayer.StopEffect('odim_magic_step_r');
				thePlayer.StopEffect('odim_magic_step_l');
			}
		}
		else
		{
			if (thePlayer.HasBuff(EET_WeakeningAura))
			{
				thePlayer.RemoveBuff( EET_WeakeningAura, true );
			}

			if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("OxygenBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("OxygenBarModule")).SetEnabled(true);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}

			if (thePlayer.IsEffectActive('acs_armor_effect_1', false))
			{
				thePlayer.DestroyEffect('acs_armor_effect_1');
			}
			
			if (thePlayer.IsEffectActive('acs_armor_effect_2', false))
			{
				thePlayer.DestroyEffect('acs_armor_effect_2');
			}

			if (thePlayer.IsEffectActive('special_attack_tell_r', false))
			{
				thePlayer.DestroyEffect('special_attack_tell_r');
			}
			
			if (thePlayer.IsEffectActive('special_attack_tell_l', false))
			{
				thePlayer.DestroyEffect('special_attack_tell_l');
			}

			if (thePlayer.IsEffectActive('special_attack_tell_r_leg', false))
			{
				thePlayer.DestroyEffect('special_attack_tell_r_leg');
			}
			
			if (thePlayer.IsEffectActive('special_attack_tell_l_leg', false))
			{
				thePlayer.DestroyEffect('special_attack_tell_l_leg');
			}

			if (thePlayer.IsEffectActive('demon_cs', false))
			{
				thePlayer.DestroyEffect('demon_cs');
			}

			if (thePlayer.IsEffectActive('him_smoke_red', false))
			{
				thePlayer.DestroyEffect('him_smoke_red');
			}

			RemoveTimer('ACS_Magic_Step_Timer');

			if (thePlayer.IsEffectActive('vampire_magic_step_r', false))
			{
				thePlayer.DestroyEffect('vampire_magic_step_r');
			}

			if (thePlayer.IsEffectActive('vampire_magic_step_l', false))
			{
				thePlayer.DestroyEffect('vampire_magic_step_l');
			}

			if (thePlayer.IsEffectActive('odim_magic_step_r', false))
			{
				thePlayer.DestroyEffect('odim_magic_step_r');
			}

			if (thePlayer.IsEffectActive('odim_magic_step_l', false))
			{
				thePlayer.DestroyEffect('odim_magic_step_l');
			}
		}
	}

	function ACS_Helm_Equip()
	{
		if (ACS_Armor_Equipped_Check()
		&& !ACS_Transformation_Activated_Check())
		{	
			if (FactsQuerySum("ACS_Armor_Equipped") <= 0)
			{
				FactsAdd("ACS_Armor_Equipped", 1, -1);
			}

			if (FactsQuerySum("ACS_Helm_Equipped") <= 0)
			{
				RemoveTimer('ACS_Embers_Timer');
				AddTimer('ACS_Embers_Timer', 0.0001, true);

				RemoveTimer('ACSArmorBreathingTimer');
				AddTimer('ACSArmorBreathingTimer', 1.5, true);

				//AddTimer('ACS_Embers_Particles_Timer', 2, true);

				helmtoggle = true;

				facemasktoggle = true;
				
				Additional_Helmets();

				Facegear_Include();

				FactsAdd("ACS_Helm_Equipped", 1, -1);
			}
		}
		else
		{
			if (FactsQuerySum("ACS_Helm_Equipped") > 0)
			{
				helmtoggle = false;

				facemasktoggle = false;

				Additional_Helmets_Destroy();

				Facegear_Exclude();

				RemoveTimer('ACS_Embers_Timer');

				RemoveTimer('ACSArmorBreathingTimer');

				//RemoveTimer('ACS_Embers_Particles_Timer');

				FactsRemove("ACS_Helm_Equipped");
			}

			if (FactsQuerySum("ACS_Armor_Equipped") > 0)
			{
				FactsRemove("ACS_Armor_Equipped");
			}
		}
	}

	/*
	private var torso_sword_1, torso_sword_2, torso_sword_3, r_bicep_sword_1, l_bicep_sword_1, r_bicep_sword_2, l_bicep_sword_2, r_shoulder_sword_1, l_shoulder_sword_1, r_shoulder_sword_2, l_shoulder_sword_2								: CEntity;	

	function ACS_BackSwords_Equip()
	{
		if (ACS_Armor_Equipped_Check())
		{
			if ( !helmtoggle )
			{
				if (GetWitcherPlayer().HasTag('ACS_BackSwords_Equipped'))
				{
					ACS_Swordsanoo_Destroy();

					GetWitcherPlayer().RemoveTag('ACS_BackSwords_Equipped');
				}
			}
			else
			{
				if (ACS_Armor_Omega_Equipped_Check())
				{
					r_shoulder_sword_1 = (CEntity)theGame.GetEntityByTag( 'r_shoulder_sword_1' );
					r_shoulder_sword_1.StopEffect('chest_sword_1');
					r_shoulder_sword_1.PlayEffectSingle('chest_sword_1');
								
					l_shoulder_sword_1 = (CEntity)theGame.GetEntityByTag( 'l_shoulder_sword_1' );
					l_shoulder_sword_1.StopEffect('chest_sword_1');
					l_shoulder_sword_1.PlayEffectSingle('chest_sword_1');
					
					r_shoulder_sword_2 = (CEntity)theGame.GetEntityByTag( 'r_shoulder_sword_2' );
					r_shoulder_sword_2.StopEffect('chest_sword_1');
					r_shoulder_sword_2.PlayEffectSingle('chest_sword_1');
								
					l_shoulder_sword_2 = (CEntity)theGame.GetEntityByTag( 'l_shoulder_sword_2' );
					l_shoulder_sword_2.StopEffect('chest_sword_1');
					l_shoulder_sword_2.PlayEffectSingle('chest_sword_1');

					/////////////////////////////////////////////////////////////////////////////////////////////////////
								
					torso_sword_1 = (CEntity)theGame.GetEntityByTag( 'torso_sword_1' );
					torso_sword_1.StopEffect('chest_sword_1');
					torso_sword_1.PlayEffectSingle('chest_sword_1');
								
					torso_sword_2 = (CEntity)theGame.GetEntityByTag( 'torso_sword_2' );
					torso_sword_2.StopEffect('chest_sword_1');
					torso_sword_2.PlayEffectSingle('chest_sword_1');
					
					torso_sword_3 = (CEntity)theGame.GetEntityByTag( 'torso_sword_3' );
					torso_sword_3.StopEffect('chest_sword_1');
					torso_sword_3.PlayEffectSingle('chest_sword_1');

					if (!GetWitcherPlayer().HasTag('ACS_BackSwords_Equipped'))
					{
						ACS_Swordsanoo();

						GetWitcherPlayer().AddTag('ACS_BackSwords_Equipped');
					}
				}
				else
				{
					if (GetWitcherPlayer().HasTag('ACS_BackSwords_Equipped'))
					{
						ACS_Swordsanoo_Destroy();

						GetWitcherPlayer().RemoveTag('ACS_BackSwords_Equipped');
					}
				}
			}
		}
	}
	*/

	function ACS_Armor_HorseManager()
	{
		if (ACS_Armor_Equipped_Check())
		{
			if (!(thePlayer.GetHorseCurrentlyMounted()).IsEffectActive('demon_horse', false))
			{
				thePlayer.GetHorseCurrentlyMounted().PlayEffectSingle( 'demon_horse' );
			}

			if (!(thePlayer.GetHorseCurrentlyMounted()).IsEffectActive('demonic_cast', false))
			{
				thePlayer.GetHorseCurrentlyMounted().PlayEffectSingle( 'demonic_cast' );
			}

			if (thePlayer.GetHorseCurrentlyMounted().GetStat(BCS_Stamina) < thePlayer.GetHorseCurrentlyMounted().GetStatMax(BCS_Stamina))
			{
				thePlayer.GetHorseCurrentlyMounted().GainStat(BCS_Stamina, thePlayer.GetHorseCurrentlyMounted().GetStatMax(BCS_Stamina) * 0.1);
			}

			if (!thePlayer.GetHorseCurrentlyMounted().HasAbility( 'DisableHorsePanic' ))
			{
				thePlayer.GetHorseCurrentlyMounted().AddAbility( 'DisableHorsePanic' );
			}

			if (thePlayer.GetHorseCurrentlyMounted().GetStat(BCS_Panic) < thePlayer.GetHorseCurrentlyMounted().GetStatMax(BCS_Panic))
			{
				thePlayer.GetHorseCurrentlyMounted().GainStat(BCS_Panic, thePlayer.GetHorseCurrentlyMounted().GetStatMax(BCS_Panic) * 0.1);
			}

			if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorseStaminaBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorseStaminaBarModule")).SetEnabled(false);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}

			if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorsePanicBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorsePanicBarModule")).SetEnabled(false);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}
		}
		else
		{
			if( !(thePlayer.GetHorseWithInventory().GetInventory()).HasItem( 'Devil Saddle' ) )
			{
				if ((thePlayer.GetHorseCurrentlyMounted()).IsEffectActive('demon_horse', false))
				{
					thePlayer.GetHorseCurrentlyMounted().StopEffect( 'demon_horse' );
				}
			}

			if (thePlayer.GetHorseCurrentlyMounted().HasAbility( 'DisableHorsePanic' ))
			{
				thePlayer.GetHorseCurrentlyMounted().RemoveAbility( 'DisableHorsePanic' );
			}

			if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorseStaminaBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorseStaminaBarModule")).SetEnabled(true);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}

			if (!((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorsePanicBarModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("HorsePanicBarModule")).SetEnabled(true);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}
		}
	}

	function ACS_Armor_Functions()
	{
		//ACS_BackSwords_Equip();

		ACS_Armor_Effects();

		ACS_Armor_Scale();

		ACS_Armor_Add();

		ACS_Armor_HorseManager();
	}

	function Shallow_Water_Unblock_Hack()
	{
		if (thePlayer.IsInShallowWater())
		{
			thePlayer.UnblockAction( EIAB_Dodge,'ShallowWater');

			thePlayer.UnblockAction( EIAB_Sprint,'ShallowWater');

			thePlayer.UnblockAction( EIAB_Jump,'ShallowWater');
		}
	}

	function ACS_Never_Time_Out()
	{
		if (FactsQuerySum("ACS_Never_Time_Out") > 0)
		{
			if ( thePlayer.GetInitialTimeOut() )
			{
				if (thePlayer.GetCurrentTimeOut() < 999 )
				{
					thePlayer.SetCurrentTimeOut( 999 );
				}
			}

			if (((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("TimeLeftModule")).GetEnabled())
			{
				((CR4HudModuleBase)((CR4ScriptedHud)theGame.GetHud()).GetHudModule("TimeLeftModule")).SetEnabled(false);
				((CR4ScriptedHud)theGame.GetHud()).UpdateHUD();
			}
		}	
	}

	var ACS_GPS_ID : int;

	var ACS_GPS_Player_ID : int;

	timer function ACS_GPS_Timer( time : float , id : int )
	{
		ACS_GPS_Actual();
	}

	function Load_GPS_Entity()
	{
		var vfxEnt						: CEntity;

		ACS_GPS_Entity().Destroy();

		vfxEnt = theGame.CreateEntity( (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\entities\other\gps_cat.w2ent", true ), thePlayer.GetWorldPosition() );

		((CActor)vfxEnt).AddEffectDefault(EET_AxiiGuardMe, thePlayer, 'ACS_GPS_Buff');

		((CNewNPC)vfxEnt).SetTemporaryAttitudeGroup( 'q104_avallach_friendly_to_all', AGP_Default );	

		((CActor)vfxEnt).EnableCharacterCollisions(false); 

		//((CActor)vfxEnt).AddBuffImmunity_AllNegative('ACS_GPS_Entity', true); 

		//((CActor)vfxEnt).AddBuffImmunity_AllCritical('ACS_GPS_Entity', true);

		((CActor)vfxEnt).SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 

		((CActor)vfxEnt).SetCanPlayHitAnim(false); 

		((CActor)vfxEnt).AddTag('ACS_GPS_Entity');
	}

	function ACS_GPS_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var id : int;
		var newPPosition : Vector;

		newPPosition = thePlayer.GetWorldPosition();

		id = ACS_GPS_ID;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( id );

		module.OnCreateOneliner( ACS_GPS_Entity(), VecToString(newPPosition), id );
	}

	function ACS_GPS_Player_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var id : int;
		var newPPosition : Vector;

		newPPosition = thePlayer.GetWorldPosition();

		id = ACS_GPS_Player_ID;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( id );

		module.OnCreateOneliner( thePlayer, VecToString(newPPosition), id );
	}

	function ACS_GPS_Player_Stop_Actual()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var id : int;
		var newPPosition : Vector;

		newPPosition = thePlayer.GetWorldPosition();

		id = ACS_GPS_Player_ID;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( id );
	}

	function ACS_Potestaquisitor_GPS()
	{
		if ( GetWitcherPlayer().IsItemEquippedByName('Potestaquisitor') && GetWitcherPlayer().IsHoldingItemInLHand() )
		{
			ACS_GPS_Player_Actual();
		}
		else
		{
			ACS_GPS_Player_Stop_Actual();
		}
	}

	function ACS_GPS_Remove()
	{
		var hud : CR4ScriptedHud;
		var module : CR4HudModuleOneliners;
		var id : int;

		ACS_GPS_Entity().Destroy();

		id = ACS_GPS_ID;

		hud = (CR4ScriptedHud)theGame.GetHud();
		module = (CR4HudModuleOneliners)hud.GetHudModule("OnelinersModule");

		module.OnRemoveOneliner( id );
	}

	function ACS_GPS_Entity_Move()
	{
		if (ACS_GPS_Entity())
		{
			ACS_GPS_Entity().GetMovingAgentComponent().ForceSetRelativeMoveSpeed(2);

			ACS_GPS_Entity().GetMovingAgentComponent().SetGameplayMoveDirection(VecHeading(thePlayer.GetWorldPosition() - ACS_GPS_Entity().GetWorldPosition()));

			if (!ACS_GPS_Entity().HasBuff(EET_AxiiGuardMe))
			{
				ACS_GPS_Entity().AddEffectDefault(EET_AxiiGuardMe, thePlayer, 'ACS_GPS_Buff');
			}

			ACS_GPS_Entity().DestroyEffect('axii_guardian');
			ACS_GPS_Entity().DestroyEffect('axii_confusion');
		}
	}

	function Aerondight_Check()
	{
		if (thePlayer.IsAnyWeaponHeld() && ACS_GetItem_Aerondight() )
		{
			thePlayer.ManageAerondightBuff(true);
		}
		else
		{
			thePlayer.ManageAerondightBuff(false);
		}
	}

	function Human_Ice_Breathe_Controller_Spawner()
	{
		var vACS_Human_Ice_Breathe_Controller: cACS_Human_Ice_Breathe_Controller;
		vACS_Human_Ice_Breathe_Controller = new cACS_Human_Ice_Breathe_Controller in this;

		vACS_Human_Ice_Breathe_Controller.ACS_Human_Ice_Breathe_Controller_Engage();
	}

	function Red_Blade_Projectile_Spawner()
	{
		var vACS_Red_Blade_Projectile_Fire: cACS_Red_Blade_Projectile_Fire;
		vACS_Red_Blade_Projectile_Fire = new cACS_Red_Blade_Projectile_Fire in this;

		vACS_Red_Blade_Projectile_Fire.ACS_Red_Blade_Projectile_Engage();
	}

	function Guiding_Light()
	{
		var position							: Vector;
		var rot, newRot          				: EulerAngles;
		var ent									: CEntity;
		var temp								: CEntityTemplate;

		if ( !ACS_GetQuestPoint()
		|| !ACS_Guiding_Light_Enabled() 
		|| theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| theGame.IsFading()
		|| theGame.IsBlackscreen()
		|| theGame.IsPaused() 
		|| theGame.GetPhotomodeEnabled() 
		|| thePlayer.IsInCutsceneIntro() 
		)
		{
			if(GetACSGuidingLightMarker())
			{
				GetACSGuidingLightMarker().Destroy();
			}

			return;
		}

		ACS_GetQuestPointPosition(position);	

		rot = thePlayer.GetWorldRotation();

		rot.Pitch += 180;

		rot.Yaw += 180;

		if(!GetACSGuidingLightMarker())
		{
			temp = (CEntityTemplate)LoadResource( "dlc\dlc_acs\data\fx\guiding_light_marker.w2ent", true );

			ent = (CEntity)theGame.CreateEntity( temp, position, rot );

			ent.PlayEffect('pridefall_marker');

			ent.PlayEffect('quest_marker');

			ent.AddTag('ACS_Guiding_Light_Marker');
		}
		else
		{
			newRot = VecToRotation( theCamera.GetCameraDirection() );

			newRot.Yaw += 180;

			newRot.Pitch = rot.Pitch;

			newRot.Roll = rot.Roll;

			GetACSGuidingLightMarker().TeleportWithRotation( position, newRot );

			if(theGame.GetFocusModeController().CanUseFocusMode()
			&& theGame.IsFocusModeActive())
			{
				GetACSGuidingLightMarker().PlayEffectSingle('quest_marker');
			}
			else
			{
				GetACSGuidingLightMarker().DestroyEffect('quest_marker');
			}
		}
	}

	private var focusModeCamera 						: ACSFocusModeCamera;

	public function SetFocusModeCamera( a : ACSFocusModeCamera )
	{
		this.focusModeCamera = a;
	}

	public function GetFocusModeCamera() : ACSFocusModeCamera
	{
		return this.focusModeCamera;
	}

	function FocusModeCustomCamera()
	{
		var template	: CEntityTemplate;
		var ent			: CEntity;

		template = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\focus_mode_camera.w2ent", true);

		ent = theGame.CreateEntity(template, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	
	}

	function FocusModeOverrideCamera()
	{
		var position							: Vector;
		var rot, newRot          				: EulerAngles;
		var ent									: CEntity;
		var temp								: CEntityTemplate;
		var animcomp 							: CAnimatedComponent;
		var movementAdjustorGuidingLight		: CMovementAdjustor; 
		var ticketGuidingLight 					: SMovementAdjustmentRequestTicket; 
		var comp, meshComponent					: CMeshComponent;

		if ( theGame.IsFocusModeActive() )
		{
			if(!GetFocusModeCamera())
			{
				FocusModeCustomCamera();
			}
		}
		else
		{
			if(GetFocusModeCamera())
			{
				GetFocusModeCamera().Stop();
				GetFocusModeCamera().Destroy();	
			}
		}
	}

	function ACS_XenoTyrant_Spawner()
	{
		var vACS_XenoSwarm_Spawner: cACS_XenoSwarm_Spawner;
		vACS_XenoSwarm_Spawner = new cACS_XenoSwarm_Spawner in theGame;

		vACS_XenoSwarm_Spawner.ACS_XenoTyrant_Spawner_Engage();
	}

	function ACS_XenoTyrantEgg_Static_Spawner()
	{
		var vACS_XenoSwarm_Spawner: cACS_XenoSwarm_Spawner;
		vACS_XenoSwarm_Spawner = new cACS_XenoSwarm_Spawner in theGame;

		vACS_XenoSwarm_Spawner.ACS_XenoTyrantEgg_Static_Spawner_Engage();
	}

	function ACS_XenoSoldiers_Spawner()
	{
		var vACS_XenoSwarm_Spawner: cACS_XenoSwarm_Spawner;
		vACS_XenoSwarm_Spawner = new cACS_XenoSwarm_Spawner in this;

		vACS_XenoSwarm_Spawner.ACS_XenoSoldiers_Spawn_Engage();
	}

	function ACS_XenoWorkers_Spawner()
	{
		var vACS_XenoSwarm_Spawner: cACS_XenoSwarm_Spawner;
		vACS_XenoSwarm_Spawner = new cACS_XenoSwarm_Spawner in this;

		vACS_XenoSwarm_Spawner.ACS_XenoWorkers_Spawn_Engage();
	}

	timer function ACS_Spawn_XenoSoldiers_Swarm( time : float , id : int )
	{
		ACS_XenoSoldiers_Spawner();

		RemoveTimer('ACS_Spawn_XenoWorkers_Swarm');
		AddTimer('ACS_Spawn_XenoWorkers_Swarm', 1, false);
	}

	timer function ACS_Spawn_XenoWorkers_Swarm( time : float , id : int )
	{
		ACS_XenoWorkers_Spawner();
	}

	function XenoSwitch()
	{
		if (GetACSXenoTyrant() && GetACSXenoTyrant().IsAlive())
		{
			if (ACS_can_xeno_switch())
			{
				ACS_refresh_xeno_switch_cooldown();

				XenoSwitchToggle();
			}
		}
	}

	var xenoToggle 						: bool;

	function XenoSwitchToggle()
	{
		if (!xenoToggle)
		{
			ACSXenoTyrantAddAbility();
			ACSXenoSoldiersAddAbility();

			xenoToggle = true;
		}
		else
		{
			ACSXenoTyrantnRemoveAbility();
			ACSXenoSoldiersRemoveAbility();

			xenoToggle = false;
		}

		ACSXenoArmoredWorkersSwapAbility();
	}

	function THE_EYE()
	{
		if (!thePlayer.IsCiri()
		&& ACS_Enabled())
		{
			Scabbard_Thing();

			Transformation_Control();

			Human_Ice_Breathe_Controller_Spawner();

			ACS_Ether_Sword_Control();

			ACS_Helm_Equip();

			Guiding_Light();

			if ( !theGame.IsDialogOrCutscenePlaying() 
			&& !thePlayer.IsInNonGameplayCutscene() 
			&& !thePlayer.IsInGameplayScene() 
			&& !theGame.IsCurrentlyPlayingNonGameplayScene()
			&& !theGame.IsFading()
			&& !theGame.IsBlackscreen()
			&& !theGame.IsPaused() 
			&& !theGame.GetPhotomodeEnabled() 
			&& !thePlayer.IsInCutsceneIntro() 
			)
			{
				if (!theGame.IsUberMovementEnabled())
				{
					theGame.EnableUberMovement( true );
				}

				//FocusModeOverrideCamera();

				Aerondight_Check();

				ACS_Armor_Functions();

				ACS_GPS_Entity_Move();

				ACS_Potestaquisitor_GPS();

				Shallow_Water_Unblock_Hack();

				removeEffectsFromPlayer();

				Sword_Hold_Forcer();

				Critical_Low_Health_Fix();

				Sword_Persistent_Effects();

				Player_In_Combat();

				FUCKING_SECOND_LIFE_HACK();

				Nekker_Guardian_Check();

				LookatLoop();

				DisableCameraAnim();

				InterruptChargeAttackForSwappedBeh();

				ACS_Remove_Monster_Fear();

				Enemy_Death_Effects();

				Glide_Stop();

				Manual_Camera_Control();

				ACS_EnemyBehSwitch_Watcher();

				SwordWalkCancelFallback();

				ACS_QuestTrackControl();

				ACS_MeditationControl();

				ACS_BuffsDisplay();

				Durability_Always_Max();

				AutoRead();

				GetACSMageInCombatCheck();

				GetACSCloakVampInCombatCheck();

				Mage_Idle_Action();

				ACS_Never_Time_Out();

				ACSWildHuntRidersRideTowardsPlayer();

				XenoSwitch();

				if(thePlayer.HasBuff(EET_OverEncumbered))
				{
					thePlayer.RemoveAllBuffsOfType(EET_OverEncumbered);
				}

				thePlayer.RemoveTimer( 'BorderTeleportFadeOutTimer' );
			}
		}
	}

	function NPC_Fear_Reaction_Geralt()
	{
		if (thePlayer.HasTag('ACS_AardPull_Active'))
		{
			ACS_Bats_Summon();
		}	
	}

	function ACS_Bruxa_Camo_Sonar_Timer_Actual()
	{
		if (ACS_Bruxa_Camo_Sonar_2())
		{
			ACS_Bruxa_Camo_Sonar_2().DestroyEffect('fx_sonar');

			ACS_Bruxa_Camo_Sonar_2().PlayEffect('fx_sonar');
			ACS_Bruxa_Camo_Sonar_2().PlayEffect('fx_sonar');
			ACS_Bruxa_Camo_Sonar_2().PlayEffect('fx_sonar');
			ACS_Bruxa_Camo_Sonar_2().PlayEffect('fx_sonar');
			ACS_Bruxa_Camo_Sonar_2().PlayEffect('fx_sonar');

			ACS_Bruxa_Camo_Sonar_2().StopEffect('fx_sonar');
		}
		
		if (ACS_Bruxa_Camo_Sonar())
		{
			ACS_Bruxa_Camo_Sonar().DestroyEffect('sonar_mesh');

			ACS_Bruxa_Camo_Sonar().PlayEffect('sonar_mesh');
			ACS_Bruxa_Camo_Sonar().PlayEffect('sonar_mesh');
			ACS_Bruxa_Camo_Sonar().PlayEffect('sonar_mesh');
			ACS_Bruxa_Camo_Sonar().PlayEffect('sonar_mesh');
			ACS_Bruxa_Camo_Sonar().PlayEffect('sonar_mesh');

			ACS_Bruxa_Camo_Sonar().StopEffect('sonar_mesh');

			ACS_Bruxa_Camo_Sonar().DestroyEffect('sonar');

			ACS_Bruxa_Camo_Sonar().PlayEffect('sonar');
			ACS_Bruxa_Camo_Sonar().PlayEffect('sonar');
			ACS_Bruxa_Camo_Sonar().PlayEffect('sonar');
			ACS_Bruxa_Camo_Sonar().PlayEffect('sonar');
			ACS_Bruxa_Camo_Sonar().PlayEffect('sonar');

			ACS_Bruxa_Camo_Sonar().StopEffect('sonar');
		}

		ACS_Bruxa_Camo_Sonar_NPC_Play_Effect();
	}

	function NPC_Fear_Reaction()
	{
		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInRange( 100, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];
				
				curTargetVitality = npc.GetStat( BCS_Vitality );

				maxTargetVitality = npc.GetStatMax( BCS_Vitality );

				curTargetEssence = npc.GetStat( BCS_Essence );

				maxTargetEssence = npc.GetStatMax( BCS_Essence );

				animatedComponentA = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );	
				
				if ( npc == thePlayer  )
					continue;
				
				if(!theGame.IsDialogOrCutscenePlaying()
				&& !thePlayer.IsUsingHorse() 
				&& !thePlayer.IsUsingVehicle()
				&& !npc.IsUsingHorse()
				&& !npc.IsUsingVehicle()
				&& npc.IsHuman()
				&& !npc.HasTag('ACS_Final_Fear_Stack')
				)
				{				
					actor.RemoveBuffImmunity_AllNegative();

					actor.RemoveBuffImmunity_AllCritical();

					npc.RemoveBuffImmunity_AllNegative();

					npc.RemoveBuffImmunity_AllCritical();

					targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) ;

					if( targetDistance <= 4 * 4 ) 
					{
						if (!npc.HasTag('fear_end'))
						{
							animatedComponentA.PlaySlotAnimationAsync ( '', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );

							npc.AddTag('fear_end');
						}	
					}
					else if( targetDistance > 4 * 4 && targetDistance <= 100 * 100 ) 
					{
						npc.RemoveTag('fear_end');
						
						if (curTargetVitality <= maxTargetVitality * 0.25)
						{
							animatedComponentA.PlaySlotAnimationAsync ( 'reaction_surrender_escape', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
						}
						else if (curTargetVitality > maxTargetVitality * 0.25 && curTargetVitality <= maxTargetVitality * 0.5)
						{
							fear_index_1 = RandDifferent(this.previous_fear_index_1 , 8);

							switch (fear_index_1) 
							{	
								case 7:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_right_180_rp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 6:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_right_180_lp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 5:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_left_90_rp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 4:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_left_90_lp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 3:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_left_45_rp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 2:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_turn_left_45_lp', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 1:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_2', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								default:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_ex_scared_loop_1', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;		
							}
							
							this.previous_fear_index_1 = fear_index_1;
						}
						else
						{
							fear_index_1 = RandDifferent(this.previous_fear_index_1 , 5);

							switch (fear_index_1) 
							{	
								case 4:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_work_standing_nervous_scarred_stop', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 3:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_work_standing_nervous_scarred_start', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 2:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_work_standing_nervous_scarred_loop_03', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								case 1:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_work_standing_nervous_scarred_loop_02', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;

								default:
								animatedComponentA.PlaySlotAnimationAsync ( 'man_work_standing_nervous_scarred_loop_01', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 0.9f));
								break;		
							}
							
							this.previous_fear_index_1 = fear_index_1;
						}
					}
				}	
			}
		}
	}

	function NPC_Death_Fear_Reaction()
	{
		var movementAdjustorNPC											: CMovementAdjustor;
		var ticketNPC													: SMovementAdjustmentRequestTicket;

		actors.Clear();

		//actors = thePlayer.GetNPCsAndPlayersInRange( 100, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		//actors = thePlayer.GetNPCsAndPlayersInRange( 100, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		theGame.GetActorsByTag( 'ACS_Final_Fear_Stack', actors );	

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];
				
				curTargetVitality = npc.GetStat( BCS_Vitality );

				maxTargetVitality = npc.GetStatMax( BCS_Vitality );

				curTargetEssence = npc.GetStat( BCS_Essence );

				maxTargetEssence = npc.GetStatMax( BCS_Essence );

				animatedComponentA = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );

				movementAdjustorNPC = npc.GetMovingAgentComponent().GetMovementAdjustor();

				targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), npc.GetWorldPosition() ) ;
				
				if(!theGame.IsDialogOrCutscenePlaying()
				&& !thePlayer.IsUsingHorse() 
				&& !thePlayer.IsUsingVehicle()
				&& !npc.IsUsingHorse()
				&& !npc.IsUsingVehicle()
				&& npc.IsHuman()
				&& npc.IsMan()
				&& !npc.HasTag('ACS_Swapped_To_Shield')
				&& !thePlayer.IsInNonGameplayCutscene() 
				&& !thePlayer.IsInGameplayScene() 
				&& !theGame.IsCurrentlyPlayingNonGameplayScene()
				&& !theGame.IsFading()
				&& !theGame.IsBlackscreen()
				&& !theGame.IsPaused() 
				&& !theGame.GetPhotomodeEnabled() 
				&& !thePlayer.IsInCutsceneIntro() 
				&& npc.IsAlive()
				)								
				{
					ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Fear_Rotate');
					movementAdjustorNPC.CancelByName( 'ACS_NPC_Fear_Rotate' );
					movementAdjustorNPC.CancelAll();

					ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Fear_Rotate' );
					movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.25 );
					movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 500000 );

					npc.SetGuarded(false);

					npc.DrainStamina( ESAT_FixedValue, npc.GetStatMax( BCS_Stamina ), 10 );

					npc.AddEffectDefault( EET_Blindness, npc, 'console' );

					npc.AddEffectDefault( EET_BleedingTracking, npc, 'console' );

					(npc.GetInventory().GetItemEntityUnsafe( npc.GetInventory().GetItemFromSlot( 'r_weapon' ) )).SetHideInGame(true);

					if (npc.HasTag('ACS_Scared_On_Ground'))
					{
						if( targetDistance <= 4 * 4 ) 
						{
							if( RandF() < 0.125 ) 
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('man_ex_scared_ground_loop_1');
								fear_anim_names.PushBack('man_ex_scared_ground_loop_2');

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f));
							}
							else
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('man_ex_scared_ground_start_1');
								fear_anim_names.PushBack('man_ex_scared_ground_start_2');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f));
							}	
						}
						else if( targetDistance > 4 * 4 && targetDistance <= 100 * 100 ) 
						{
							if( RandF() < 0.875 ) 
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('man_ex_scared_ground_loop_1');
								fear_anim_names.PushBack('man_ex_scared_ground_loop_2');

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f));
							}
							else
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('man_ex_scared_ground_start_1');
								fear_anim_names.PushBack('man_ex_scared_ground_start_2');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 0.5f));
							}
						}
					}
					else if (npc.HasTag('ACS_Scared_Standing'))
					{
						if( targetDistance <= 4 * 4 ) 
						{
							if( RandF() < 0.125 ) 
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('scared_loop');
								fear_anim_names.PushBack('scared_loop_1');
								fear_anim_names.PushBack('scared_loop_2');
								fear_anim_names.PushBack('scared_loop_3');
								fear_anim_names.PushBack('man_ex_scared_loop_1');
								fear_anim_names.PushBack('man_ex_scared_loop_2');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f));
							}
							else
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('dialogue_man_ex_scared_run_loop');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer, RandRangeF(225,135) );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
							}
						}
						else if( targetDistance > 4 * 4 && targetDistance <= 100 * 100 ) 
						{
							if( RandF() < 0.875 ) 
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('scared_loop');
								fear_anim_names.PushBack('scared_loop_1');
								fear_anim_names.PushBack('scared_loop_2');
								fear_anim_names.PushBack('scared_loop_3');
								fear_anim_names.PushBack('man_ex_scared_loop_1');
								fear_anim_names.PushBack('man_ex_scared_loop_2');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(1.f, 1.f));
							}
							else
							{
								fear_anim_names.Clear();

								fear_anim_names.PushBack('dialogue_man_ex_scared_run_loop');

								movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer, RandRangeF(225,135) );

								animatedComponentA.PlaySlotAnimationAsync ( fear_anim_names[RandRange(fear_anim_names.Size())], 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.25f));
							}
						}
					}
				}	
			}
		}
	}

	function ACS_Shout_Actual()
	{
		thePlayer.PlayEffectSingle('shout'); 
		thePlayer.StopEffect('shout');
	}

	function ACS_Stop_Shout_Actual()
	{
		thePlayer.StopEffect('shout');
	}

	function ACS_Blood_Spray_Actual()
	{
		thePlayer.PlayEffectSingle('shout'); 
		thePlayer.StopEffect('shout');
	}

	function ACS_Stop_Blood_Spray_Actual()
	{
		thePlayer.StopEffect('shout');
	}

	function HumanDeathCrawlLoop()
	{
		var crawl_temp								: CEntityTemplate;
		var crawl_controller						: CEntity;

		deathactors.Clear();

		deathactors = thePlayer.GetNPCsAndPlayersInRange( 100, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile );

		if( deathactors.Size() > 0 )
		{
			for( i = 0; i < deathactors.Size(); i += 1 )
			{
				npc = (CNewNPC)deathactors[i];

				actor = deathactors[i];
				
				if(
				npc.IsHuman()
				)
				{
					if (!npc.HasTag('ACS_Crawl_Controller_Attached'))
					{
						crawl_temp = (CEntityTemplate)LoadResource( 

						"dlc\dlc_acs\data\entities\other\human_death_crawl_controller.w2ent"
						
						, true );

						crawl_controller = (CEntity)theGame.CreateEntity( crawl_temp, npc.GetWorldPosition() + Vector( 0, 0, -20 ) );

						crawl_controller.CreateAttachment( npc, 'pelvis', Vector(0,0,0), EulerAngles(0,0,0) );

						npc.AddTag('ACS_Crawl_Controller_Attached');
					}
				}	
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function ACS_StaminaDrain( i : int )
	{
		if (ACS_StaminaCostAction_Enabled())
		{
			if (i == 1)
			{
				thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_LightAttackStaminaCost(), ACS_LightAttackStaminaRegenDelay() );
			}
			else if (i == 2)
			{
				thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_HeavyAttackStaminaCost(), ACS_HeavyAttackStaminaRegenDelay() );
			}
			else if (i == 3)
			{
				thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_SpecialAttackStaminaCost(), ACS_SpecialAttackStaminaRegenDelay() );
			}
			else if (i == 4)
			{
				thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * ACS_DodgeStaminaCost(), ACS_DodgeStaminaRegenDelay() );
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function go_plough_yourself()
	{
		MovementAdjust();
		
		if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}    
		
		//PlayerPlayAnimation( 'high_standing_sad_gesture_go_plough_yourself');

		if ( !thePlayer.IsAnyWeaponHeld() )
		{
			if( RandF() < 0.5 ) 
			{
				if( RandF() < 0.5 ) 
				{
					PlayerPlayAnimation('high_standing_sad_gesture_go_plough_yourself');
				}
				else
				{
					PlayerPlayAnimation('locomotion_idle_proud_gesture_bend_forward');
				}
			}
			else
			{
				if( RandF() < 0.5 ) 
				{
					PlayerPlayAnimation('locomotion_idle_proud_gesture_annouce');
				}
				else
				{
					PlayerPlayAnimation('locomotion_idle_proud_gesture_pound_chest');
				}
			}
		}
		else
		{
			PlayerPlayAnimation('locomotion_idle_proud_gesture_annouce');
		}
	}

	function taunted_npc_destroy()
	{
		//actors = GetActorsInRange(thePlayer, 10, 10 );

		//actors = GetActorsInRange(thePlayer, 100, 100, 'ACS_taunted' );

		actors.Clear();

		theGame.GetActorsByTag( 'ACS_taunted', actors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc_ANIMATION_CANCEL = (CNewNPC)actors[i];

				npcactor_ANIMATION_CANCEL = (CActor)actors[i];

				if ( npc_ANIMATION_CANCEL == thePlayer || npc_ANIMATION_CANCEL.HasTag('smokeman') )
					continue;
				
				if(
				//npc_ANIMATION_CANCEL.IsHuman()
				//&& ACS_AttitudeCheck( npcactor_ANIMATION_CANCEL )
				//&& thePlayer.IsInCombat()
				ACS_CombatTaunt_Enabled()
				//&& npc_ANIMATION_CANCEL.HasTag('ACS_taunted')
				)
				{	
					npc_ANIMATION_CANCEL.Destroy();
				}
			}
		}
	}

	function ACS_Hit_Reaction()
	{
		if ( CiriCheck()
		&& FinisherCheck() 
		&& HitAnimCheck()
		&& WraithModeCheck()
		&& BruxaBiteCheck())
		{
			//thePlayer.StopAllEffects();

			if (
			thePlayer.HasTag('quen_sword_equipped')
			)
			{
				Olgierd_Hit_Reaction();
			}
			else if (
			(thePlayer.HasTag('aard_secondary_sword_equipped'))
			)
			{
				Axe_Hit_Reaction();
			}
			else if (
			(thePlayer.HasTag('quen_secondary_sword_equipped'))
			)
			{
				Spear_Hit_Reaction();
			}
			else if (
			(thePlayer.HasTag('axii_sword_equipped'))
			)
			{
				//ACS_Blink_Hit_Reaction();

				Gregoire_Hit_Reaction();
			}
			else if (
			(thePlayer.HasTag('axii_secondary_sword_equipped'))
			)
			{
				if (ACS_GetItem_Katana_Steel() || ACS_GetItem_Katana_Silver())
				{
					Axe_Hit_Reaction();
				}
				else
				{
					Gregoire_Hit_Reaction();
				}
			}
			else if (
			(thePlayer.HasTag('yrden_sword_equipped')
			|| thePlayer.HasTag('yrden_secondary_sword_equipped'))
			)
			{
				Imlerith_Hit_Reaction();
			}
			else if (
			(thePlayer.HasTag('vampire_claws_equipped')
			|| thePlayer.HasTag('aard_sword_equipped'))
			)
			{
				Dettlaff_Hit_Reaction();
			}
		}
	}

	function Olgierd_Hit_Reaction()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }
															
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (RandF() < 0.5)
			{
				PlayerPlayAnimation('full_hit_reaction_with_fast_shadow_attack_001_ACS');
			}
			else
			{
				PlayerPlayAnimation('full_hit_pirouette_reaction_with_fast_shadow_attack_001_ACS');
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (RandF() < 0.5)
			{
				PlayerPlayAnimation('full_hit_reaction_with_fast_shadow_attack_001_ACS');
			}
			else
			{
				PlayerPlayAnimation('full_hit_pirouette_reaction_with_fast_shadow_attack_001_ACS');
			}
		}
	}

	function Gregoire_Hit_Reaction()
	{
		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }
															
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (RandF() < 0.5)
			{
				PlayerPlayAnimation('man_npc_longsword_kick_rp_ACS');
			}
			else
			{
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (RandF() < 0.5)
			{
				PlayerPlayAnimation( 'man_npc_longsword_kick_rp_ACS');
			}
			else
			{
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
			}
		}
	}

	function Spear_Hit_Reaction()
	{
		geraltRandomGiantAttackAlt();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 3  ); }
																
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
	}

	function Dettlaff_Hit_Reaction()
	{
		geraltClawWhirlReactionAttack();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }
																
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
	}

	function Imlerith_Hit_Reaction()
	{
		geraltRandomGiantAttack();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 3  ); }
																
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
	}

	function Axe_Hit_Reaction()
	{
		geraltRandomAxeSpecialAttackAlt();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 3  ); }
															
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function GetCurrentMeleeWeapon() : EPlayerWeapon
	{
		if (thePlayer.IsWeaponHeld('silversword'))
		{
			return PW_Silver;
		}
		else if (thePlayer.IsWeaponHeld('steelsword'))
		{
			return PW_Steel;
		}
		else if (thePlayer.IsWeaponHeld('fist'))
		{
			return PW_Fists;
		}
		else
		{
			return PW_None;
		}
	}

	function UpdateBehGraph( optional init : bool )
	{	
		weapontype = GetCurrentMeleeWeapon();
		
		if ( weapontype == PW_None )
		{
			weapontype = PW_Fists;
		}
		
		thePlayer.SetBehaviorVariable( 'WeaponType', 0);
		
		if ( thePlayer.HasTag('vampire_claws_equipped') && thePlayer.IsInCombat() )
		{
			thePlayer.SetBehaviorVariable( 'playerWeapon', (int) PW_Steel );
			thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) PW_Steel );
		}
		else
		{
			thePlayer.SetBehaviorVariable( 'playerWeapon', (int) weapontype ); ACS_Theft_Prevention_9 ();
			thePlayer.SetBehaviorVariable( 'playerWeaponForOverlay', (int) weapontype );
		}
		
		if ( thePlayer.IsUsingHorse() )
		{
			thePlayer.SetBehaviorVariable( 'isOnHorse', 1.0 );
		}
		else
		{
			thePlayer.SetBehaviorVariable( 'isOnHorse', 0.0 );
		}
		
		switch ( weapontype )
		{
			case PW_Steel:
				thePlayer.SetBehaviorVariable( 'SelectedWeapon', 0, true);
				thePlayer.SetBehaviorVariable( 'isHoldingWeaponR', 1.0, true );
				if ( init )
					res = thePlayer.RaiseEvent('DrawWeaponInstant');
				break;
			case PW_Silver:
				thePlayer.SetBehaviorVariable( 'SelectedWeapon', 1, true);
				thePlayer.SetBehaviorVariable( 'isHoldingWeaponR', 1.0, true );
				if ( init )
					res = thePlayer.RaiseEvent('DrawWeaponInstant');
				break;
			default:
				thePlayer.SetBehaviorVariable( 'isHoldingWeaponR', 0.0, true );
				break;
		}
	}

	function forest_god_effects()
	{
		forest_god_fx.Clear();
		forest_god_fx.PushBack('hand_fx4');
		forest_god_fx.PushBack('hand_fx3');
		forest_god_fx.PushBack('torso_fx1');
		forest_god_fx.PushBack('pelvis_fx1');
		forest_god_fx.PushBack('r_bicep_fx1');
		forest_god_fx.PushBack('l_bicep_fx1');
		forest_god_fx.PushBack('l_forearmRoll_fx1');
		forest_god_fx.PushBack('r_forearmRoll_fx1');
		forest_god_fx.PushBack('l_foot_fx1'); 
		forest_god_fx.PushBack('r_foot_fx1'); 
		forest_god_fx.PushBack('r_shin_fx1'); 
		forest_god_fx.PushBack('l_shin_fx1'); 
		forest_god_fx.PushBack('torso2_fx1'); 
		forest_god_fx.PushBack('l_kneeRoll_fx1'); 
		forest_god_fx.PushBack('r_kneeRoll_fx1'); 
		forest_god_fx.PushBack('r_bicep2_fx1'); 
		forest_god_fx.PushBack('l_bicep2_fx1'); 
		forest_god_fx.PushBack('l_forearmRoll1_fx1'); 
		forest_god_fx.PushBack('r_forearmRoll1_fx1'); 
		forest_god_fx.PushBack('torso3_fx1'); 
	}

	function forest_god_demonic_effects()
	{
		forest_god_demonic_fx.Clear();

		forest_god_demonic_fx.PushBack('demonic_possession');
		forest_god_demonic_fx.PushBack('demonic_possession_r_hand');
		forest_god_demonic_fx.PushBack('demonic_possession_l_hand');
		forest_god_demonic_fx.PushBack('demonic_possession_torso');
		forest_god_demonic_fx.PushBack('demonic_possession_pelvis');
		forest_god_demonic_fx.PushBack('demonic_possession_r_bicep');
		forest_god_demonic_fx.PushBack('demonic_possession_l_bicep');
		forest_god_demonic_fx.PushBack('demonic_possession_l_forearmRoll');
		forest_god_demonic_fx.PushBack('demonic_possession_r_forearmRoll'); 
		forest_god_demonic_fx.PushBack('demonic_possession_l_foot'); 
		forest_god_demonic_fx.PushBack('demonic_possession_r_foot'); 
		forest_god_demonic_fx.PushBack('demonic_possession_r_shin'); 
		forest_god_demonic_fx.PushBack('demonic_possession_l_shin'); 
		forest_god_demonic_fx.PushBack('demonic_possession_torso2'); 
		forest_god_demonic_fx.PushBack('demonic_possession_l_kneeRoll'); 
		forest_god_demonic_fx.PushBack('demonic_possession_r_kneeRoll'); 
		forest_god_demonic_fx.PushBack('demonic_possession_r_bicep2'); 
		forest_god_demonic_fx.PushBack('demonic_possession_l_bicep2'); 
		forest_god_demonic_fx.PushBack('demonic_possession_l_forearmRoll1'); 
		forest_god_demonic_fx.PushBack('demonic_possession_r_forearmRoll1'); 
		forest_god_demonic_fx.PushBack('demonic_possession_torso3'); 
	}

	function forest_god_demonic_effect_actual()
	{
		forest_god_demonic_effects();

		ACS_Forest_God().StopEffect(forest_god_demonic_fx[forest_god_demonic_fx.Size()]);

		ACS_Forest_God().PlayEffectSingle(forest_god_demonic_fx[forest_god_demonic_fx.Size()]);
	}

	function ACS_Forest_God_Spikes_Actual()
	{
		if (ACS_Forest_God().IsInCombat())
		{
			forest_god_effects();

			ACS_Forest_God().StopEffect(forest_god_fx[forest_god_fx.Size()]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().PlayEffect(forest_god_fx[RandRange(forest_god_fx.Size())]);

			ACS_Forest_God().StopEffect(forest_god_fx[forest_god_fx.Size()]);
		}
		
		if (!ACS_Forest_God().IsAlive())
		{
			//thePlayer.inv.AddAnItem( 'Emerald flawless', 50 );

			//thePlayer.inv.AddAnItem( 'Diamond flawless', 50 );

			//thePlayer.inv.AddAnItem( 'Ruby flawless', 50 );

			RemoveTimer('ACS_Forest_God_Spikes');
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function sword_destroy()
	{
		if ( !theGame.IsDialogOrCutscenePlaying() )
		{
			if ( !thePlayer.IsAnyWeaponHeld() || thePlayer.IsWeaponHeld('fist') )
			{
				//if (thePlayer.HasTag('quen_sword_equipped'))
				//{
					QuenSwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('axii_sword_equipped'))
				//{
					AxiiSwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('aard_sword_equipped'))
				//{
					AardSwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('yrden_sword_equipped'))
				//{
					YrdenSwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
				//{
					QuenSecondarySwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
				//{
					AxiiSecondarySwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
				//{
					AardSecondarySwordDestroyIMMEDIATE();
				//}
				//else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
				//{
					YrdenSecondarySwordDestroyIMMEDIATE();
				//}

				IgniBowDestroyIMMEDIATE();

				AxiiBowDestroyIMMEDIATE();

				AardBowDestroyIMMEDIATE();

				YrdenBowDestroyIMMEDIATE();

				QuenBowDestroyIMMEDIATE();

				IgniCrossbowDestroyIMMEDIATE();

				AxiiCrossbowDestroyIMMEDIATE();

				AardCrossbowDestroyIMMEDIATE();

				YrdenCrossbowDestroyIMMEDIATE();

				QuenCrossbowDestroyIMMEDIATE();

				if (thePlayer.HasTag('ACS_Holster_Sword_Effect'))
				{
					thePlayer.RemoveTag('ACS_Holster_Sword_Effect');
				}
			}
		}
	}

	function sword_summon_effect()
	{
		if ( ACS_GetWeaponMode() == 0 
		|| ACS_GetWeaponMode() == 1
		|| ACS_GetWeaponMode() == 2 )
		{
			if (thePlayer.HasTag('quen_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				quen_sword_summon();
				thePlayer.SoundEvent("fx_fire_sizzle_small");
			}
			else if (thePlayer.HasTag('axii_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				axii_sword_summon();
				thePlayer.SoundEvent("fx_fire_sizzle_small");
			}
			else if (thePlayer.HasTag('aard_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				aard_sword_summon();
				thePlayer.SoundEvent("fx_fire_sizzle_small");
			}
			else if (thePlayer.HasTag('yrden_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				yrden_sword_summon();
				thePlayer.SoundEvent("fx_fire_sizzle_small");
			}
			else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				quen_secondary_sword_summon();
				thePlayer.SoundEvent("fx_fire_sizzle_small");
			}
			else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				axii_secondary_sword_summon();
				thePlayer.SoundEvent("fx_fire_sizzle_small");
			}
			else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				aard_secondary_sword_summon();
				thePlayer.SoundEvent("fx_fire_sizzle_small");
			}
			else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				yrden_secondary_sword_summon();
				thePlayer.SoundEvent("fx_fire_sizzle_small");
			}
			else if (
			thePlayer.HasTag('igni_secondary_sword_equipped')
			|| thePlayer.HasTag('igni_sword_equipped'))
			{
				if (!thePlayer.HasTag('igni_sword_effect_played'))
				{
					thePlayer.PlayEffectSingle('embers_particles_test');
					thePlayer.StopEffect('embers_particles_test');
					igni_sword_summon();
					thePlayer.SoundEvent("fx_fire_sizzle_small");
				}

				if (!thePlayer.HasTag('ACS_HideWeaponOnDodge')
				&& !thePlayer.HasTag('in_wraith')
				&& !thePlayer.HasTag('blood_sucking')
				&& !GetACSArmorEtherSword()
				)
				{
					ACSGetEquippedSwordUpdateEnhancements_Permaglow();
				}
			}
		}
		else if (ACS_GetWeaponMode() == 3)
		{
			if (thePlayer.HasTag('aard_sword_equipped'))
			{
				thePlayer.PlayEffectSingle('embers_particles_test');
				thePlayer.StopEffect('embers_particles_test');
				aard_sword_summon();
				thePlayer.SoundEvent("fx_fire_sizzle_small");
			}
			else if (
			thePlayer.HasTag('igni_secondary_sword_equipped')
			|| thePlayer.HasTag('igni_sword_equipped'))
			{
				if (!thePlayer.HasTag('ACS_HideWeaponOnDodge')
				&& !thePlayer.HasTag('in_wraith')
				&& !thePlayer.HasTag('blood_sucking')
				&& !GetACSArmorEtherSword()
				)
				{
					ACSGetEquippedSwordUpdateEnhancements_Permaglow();
				}
			}
		}
	}

	function dagger_summon_effect()
	{
		//ACS_Dagger().PlayEffectSingle('fire_sparks_trail');

		//ACS_Dagger().PlayEffectSingle('runeword1_fire_trail');

		ACS_Dagger().PlayEffectSingle('fast_attack_buff_hit');
	}

	function yrden_sidearm_summon_effect()
	{
		ACS_Yrden_Sidearm_1().PlayEffect('fire_sparks_trail');
		ACS_Yrden_Sidearm_1().PlayEffect('runeword1_fire_trail');
		ACS_Yrden_Sidearm_1().PlayEffect('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_2().PlayEffect('fire_sparks_trail');
		ACS_Yrden_Sidearm_2().PlayEffect('runeword1_fire_trail');
		ACS_Yrden_Sidearm_2().PlayEffect('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_3().PlayEffect('fire_sparks_trail');
		ACS_Yrden_Sidearm_3().PlayEffect('runeword1_fire_trail');
		ACS_Yrden_Sidearm_3().PlayEffect('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_1().StopEffect('fire_sparks_trail');
		ACS_Yrden_Sidearm_1().StopEffect('runeword1_fire_trail');
		ACS_Yrden_Sidearm_1().StopEffect('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_2().StopEffect('fire_sparks_trail');
		ACS_Yrden_Sidearm_2().StopEffect('runeword1_fire_trail');
		ACS_Yrden_Sidearm_2().StopEffect('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_3().StopEffect('fire_sparks_trail');
		ACS_Yrden_Sidearm_3().StopEffect('runeword1_fire_trail');
		ACS_Yrden_Sidearm_3().StopEffect('fast_attack_buff_hit');

		ACS_Yrden_Sidearm_UpdateEnhancements();

		thePlayer.SoundEvent("fx_fire_sizzle_small");
	}

	function Weapon_Summon_Effect_Delay()
	{
		if (!thePlayer.HasTag('blood_sucking') )
		{
			PlayerPlayAnimationInterrupt( '' );
		}

		if(thePlayer.IsInCombat())
		{
			RemoveTimer('ACS_Weapon_Summon_Delay');
			AddTimer('ACS_Weapon_Summon_Delay', 0.25, false);
		}
		else
		{
			RemoveTimer('ACS_Weapon_Summon_Delay');
			AddTimer('ACS_Weapon_Summon_Delay', 0.75, false);
		}
	}

	function ACS_Set_Player_Scale_Actual()
	{
		if (!thePlayer.IsCiri())
		{
			RemoveTimer('Grow_Geralt_Immediate_Repeat');
			RemoveTimer('Grow_Geralt_Repeat');
			
			playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
			playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

			if ( theGame.IsDialogOrCutscenePlaying() 
			|| thePlayer.IsInNonGameplayCutscene() 
			|| thePlayer.IsInGameplayScene()
			|| thePlayer.IsUsingHorse() 
			|| thePlayer.IsUsingVehicle()
			|| thePlayer.IsPerformingFinisher()
			|| thePlayer.HasTag('ACS_IsPerformingFinisher')
			|| theGame.IsCurrentlyPlayingNonGameplayScene()
			|| theGame.IsFading()
			|| theGame.IsBlackscreen()
			|| theGame.IsPaused() 
			|| theGame.GetPhotomodeEnabled() 
			|| thePlayer.IsInCutsceneIntro() 
			//|| thePlayer.IsInsideInteraction()
			//|| thePlayer.IsInsideHorseInteraction()
			)
			{
				if (ACS_Player_Scale() != 1)
				{
					if (thePlayer.HasTag('ACS_Player_Scale_Revert'))
					{
						thePlayer.RemoveTag('ACS_Player_Scale_Revert');
					}

					if (!thePlayer.HasTag('ACS_Player_Scale_Force_Changed'))
					{
						//RemoveTimer('ACS_Embers_Timer');

						//thePlayer.StopAllEffects();

						thePlayer.PlayEffectSingle('ethereal_appear');
						thePlayer.StopEffect('ethereal_appear');

						thePlayer.PlayEffectSingle('special_attack_only_black_fx');
						thePlayer.StopEffect('special_attack_only_black_fx');

						thePlayer.AddTag('ACS_Player_Scale_Force_Changed');
					}
				}

				playerAnimcomp.SetScale(Vector(1,1,1,0));
			}
			else
			{
				if (thePlayer.HasTag('in_wraith'))
				{
					playerAnimcomp.SetScale(Vector(1,1,1,0));
				}
				else
				{
					if (ACS_Player_Scale() != 1)
					{
						if (thePlayer.HasTag('ACS_Player_Scale_Force_Changed'))
						{
							thePlayer.RemoveTag('ACS_Player_Scale_Force_Changed');
						}

						if (!thePlayer.HasTag('ACS_Player_Scale_Revert'))
						{
							//thePlayer.StopAllEffects();
							
							thePlayer.PlayEffectSingle('ethereal_appear');
							thePlayer.StopEffect('ethereal_appear');

							thePlayer.PlayEffectSingle('special_attack_only_black_fx');
							thePlayer.StopEffect('special_attack_only_black_fx');

							//AddTimer('ACS_Embers_Timer', 0.01f, true); 

							thePlayer.AddTag('ACS_Player_Scale_Revert');
						}
					}

					playerAnimcomp.SetScale(Vector(ACS_Player_Scale(),ACS_Player_Scale(),ACS_Player_Scale(),ACS_Player_Scale()));
				}
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Shrink_Geralt( delay : float )
	{
		RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		RemoveTimer('ACS_Set_Player_Scale');

		if (!thePlayer.HasTag('ACS_Size_Adjusted'))
		{
			thePlayer.AddTag('ACS_Size_Adjusted');
		}

		RemoveTimer('Grow_Geralt_Delay');
		RemoveTimer('Shrink_Geralt_Repeat');
		RemoveTimer('ACS_Set_Player_Scale');
		RemoveTimer('Remove_Player_Grow_Immediate');
		RemoveTimer('Grow_Geralt_Immediate_Repeat');
		RemoveTimer('Grow_Geralt_Repeat');

		AddTimer('Shrink_Geralt_Repeat', 0.01, true);

		AddTimer('Grow_Geralt_Delay', delay / thePlayer.GetAnimationTimeMultiplier(), false);
	}

	timer function Shrink_Geralt_Repeat( time : float , id : int )
	{
		Shrink_Geralt_Actual();
	}

	function Shrink_Geralt_Actual()
	{
		playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
		playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

		if (size > (ACS_Player_Scale() - (ACS_Player_Scale()*0.11)))
		{
			size -= ACS_Player_Scale()*0.01;

			playerAnimcomp.SetScale(Vector(size,size,size,size));
		}
		else if (size == (ACS_Player_Scale() - (ACS_Player_Scale()*0.11)))
		{
			RemoveTimer('Shrink_Geralt_Repeat');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	timer function Grow_Geralt_Delay( time : float , id : int )
	{
		Grow_Geralt();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Grow_Geralt()
	{
		RemoveTimer('Shrink_Geralt_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		RemoveTimer('Grow_Geralt_Repeat');
		RemoveTimer('Remove_Player_Grow_Immediate');

		AddTimer('Grow_Geralt_Repeat', 0.01, true);
	}

	function Grow_Geralt_Actual()
	{
		playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
		playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

		if (size < ACS_Player_Scale())
		{
			size += ACS_Player_Scale()*0.0025;

			playerAnimcomp.SetScale(Vector(size,size,size,size));
		}
		else if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Repeat');
		}
	}

	timer function Grow_Geralt_Repeat( time : float , id : int )
	{
		Grow_Geralt_Actual();

		if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Repeat');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Grow_Geralt_Immediate()
	{
		RemoveTimer('Grow_Geralt_Delay');
		RemoveTimer('Grow_Geralt_Repeat');
		RemoveTimer('Shrink_Geralt_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		RemoveTimer('Remove_Player_Grow_Immediate');
		RemoveTimer('ACS_Set_Player_Scale');

		if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Immediate_Repeat');
		}
		else
		{
			AddTimer('Grow_Geralt_Immediate_Repeat', 0.01, true);
			AddTimer('Remove_Player_Grow_Immediate', 0.75, false);
		}
	}

	function Grow_Geralt_Immediate_Actual()
	{
		playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
		playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

		if (size < ACS_Player_Scale())
		{
			size += ACS_Player_Scale() * 0.01;

			playerAnimcomp.SetScale(Vector(size,size,size,size));
		}
	}

	timer function Grow_Geralt_Immediate_Repeat( time : float , id : int )
	{
		Grow_Geralt_Immediate_Actual();

		if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Immediate_Repeat');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Grow_Geralt_Immediate_Fast()
	{
		RemoveTimer('Grow_Geralt_Delay');
		RemoveTimer('Grow_Geralt_Repeat');
		RemoveTimer('Shrink_Geralt_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Repeat');
		RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		RemoveTimer('Remove_Player_Grow_Immediate');
		RemoveTimer('ACS_Set_Player_Scale');

		if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		}
		else
		{
			AddTimer('Grow_Geralt_Immediate_Fast_Repeat', 0.01, true);
			AddTimer('Remove_Player_Grow_Immediate', 0.75, false);
		}
	}

	function Grow_Geralt_Immediate_Fast_Actual()
	{
		playerAnimcomp = thePlayer.GetComponentByClassName('CAnimatedComponent');
		playerMeshcomp = thePlayer.GetComponentByClassName('CMeshComponent');

		if (size < ACS_Player_Scale())
		{
			size += ACS_Player_Scale() * 0.01;

			playerAnimcomp.SetScale(Vector(size,size,size,size));
		}
	}

	timer function Grow_Geralt_Immediate_Fast_Repeat( time : float , id : int )
	{
		Grow_Geralt_Immediate_Fast_Actual();

		if (size == ACS_Player_Scale())
		{
			AddTimer( 'ACS_Set_Player_Scale', 0.01, true );
			RemoveTimer('Grow_Geralt_Immediate_Fast_Repeat');
		}
	}

	function Death_Delay_Animation_Actual()
	{
		thePlayer.StopAllEffects();
		thePlayer.PlayEffectSingle('ethereal_debuff');
		thePlayer.StopEffect('ethereal_debuff');

		if ( ACS_GetWeaponMode() == 0 
		|| ACS_GetWeaponMode() == 1
		|| ACS_GetWeaponMode() == 2 )
		{
			//PlayerPlayAnimation( 'bruxa_death_burning_ACS', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );
		}

		if( RandF() < 0.5 ) 
		{ 
			//PlayerPlayAnimation( 'man_geralt_sword_tornado_right', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );
		}
		else
		{
			//PlayerPlayAnimation( 'man_geralt_sword_tornado_left', 'PLAYER_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0) );
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	timer function Ghoul_Venom_Delay(deltaTime : float , id : int)
	{
		Ghoul_Venom();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function SetFireBearFlameOnProcess( flag : bool )
	{
		ACS_Fire_Bear_FlameOn_Process = flag;
	}

	function SetFireBearFireLineProcess( flag : bool )
	{
		ACS_Fire_Bear_FireLine_Process = flag;
	}

	function SetFireBearFireballProcess( flag : bool )
	{
		ACS_Fire_Bear_Fireball_Process = flag;
	}

	function SetFireBearMeteorProcess( flag : bool )
	{
		ACS_Fire_Bear_Meteor_Process = flag;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function SetKnightmareIgniProcess( flag : bool )
	{
		ACS_Knightmare_Igni_Process = flag;
	}

	function SetKnightmareShoutProcess( flag : bool )
	{
		ACS_Knightmare_Shout_Process = flag;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function SetSheWhoKnowsProjectileProcess( flag : bool )
	{
		ACS_She_Who_Knows_Throw_Projectile_Process = flag;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function SetVampireMonsterFlyingProcess( flag : bool )
	{
		ACS_Vampire_Monster_Flying_Process = flag;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function SetVampireMonsterSpawnProcess( flag : bool )
	{
		ACS_Vampire_Monster_Spawn_Process = flag;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function SetRageProcess( flag : bool )
	{
		ACS_Rage_Process = flag;
	}

	function GetRageProcess() : bool 
	{
		return ACS_Rage_Process;
	}

	timer function ACS_Rage_Delay(deltaTime : float , id : int)
	{
		ACS_Rage_Marker();
	}

	timer function ACS_Rage_Remove(deltaTime : float , id : int)
	{
		actors_in_rage.Clear();

		theGame.GetActorsByTag( 'ACS_In_Rage', actors_in_rage );	

		for( i = 0; i < actors_in_rage.Size(); i += 1 )
		{
			npc = (CNewNPC)actors_in_rage[i];

			npc.ClearAnimationSpeedMultipliers();

			npc.RemoveBuffImmunity_AllNegative('ACS_Rage');

			npc.RemoveBuffImmunity_AllCritical('ACS_Rage');

			npc.SetImmortalityMode( AIM_None, AIC_Combat ); 

			npc.SetCanPlayHitAnim(true); 

			actors_in_rage[i].ClearAnimationSpeedMultipliers();

			actors_in_rage[i].RemoveBuffImmunity_AllNegative('ACS_Rage');

			actors_in_rage[i].RemoveBuffImmunity_AllCritical('ACS_Rage');

			actors_in_rage[i].SetImmortalityMode( AIM_None, AIC_Combat ); 

			actors_in_rage[i].SetCanPlayHitAnim(true); 

			actors_in_rage[i].RemoveTag('ACS_Pre_Rage');

			actors_in_rage[i].RemoveTag('ACS_In_Rage');

			((CNewNPC)npc).SetAttitude(thePlayer, AIA_Hostile);
		}

		ACS_Rage_Markers_Destroy();

		ACS_Rage_Markers_Player_Destroy();

		SetRageProcess(false);
	}

	timer function rage_counter_dodge_reset(deltaTime : float , id : int)
	{
		rage_counter_dodge -= rage_counter_dodge;
	}

	function Rage_Counter_Dodge_Manager( i : int )
	{
		rage_counter_dodge += 1;

		RemoveTimer('rage_counter_dodge_reset');

		AddTimer('rage_counter_dodge_reset', 1, false);

		if( rage_counter_dodge == i ) 
		{
			RemoveTimer('rage_counter_dodge_reset');

			ACS_Rage_Marker_Manager();

			rage_counter_dodge -= rage_counter_dodge;
		}
	}

	timer function rage_counter_light_attack_reset(deltaTime : float , id : int)
	{
		rage_counter_light_attack -= rage_counter_light_attack;
	}

	function Rage_Counter_Light_Attack_Manager( i : int )
	{
		rage_counter_light_attack += 1;

		RemoveTimer('rage_counter_light_attack_reset');

		AddTimer('rage_counter_light_attack_reset', 2, false);

		if( rage_counter_light_attack == i ) 
		{
			RemoveTimer('rage_counter_light_attack_reset');

			ACS_Rage_Marker_Manager();

			rage_counter_light_attack -= rage_counter_light_attack;
		}
	}

	timer function rage_counter_heavy_attack_reset(deltaTime : float , id : int)
	{
		rage_counter_heavy_attack -= rage_counter_heavy_attack;
	}

	function Rage_Counter_Heavy_Attack_Manager( i : int )
	{
		rage_counter_heavy_attack += 1;

		RemoveTimer('rage_counter_heavy_attack_reset');

		AddTimer('rage_counter_heavy_attack_reset', 2, false);

		if( rage_counter_heavy_attack == i ) 
		{
			RemoveTimer('rage_counter_heavy_attack_reset');

			ACS_Rage_Marker_Manager();

			rage_counter_heavy_attack -= rage_counter_heavy_attack;
		}
	}

	timer function rage_counter_special_attack_reset(deltaTime : float , id : int)
	{
		rage_counter_special_attack -= rage_counter_special_attack;
	}

	function Rage_Counter_Special_Attack_Manager( i : int )
	{
		rage_counter_special_attack += 1;

		RemoveTimer('rage_counter_special_attack_reset');

		AddTimer('rage_counter_special_attack_reset', 2, false);

		if( rage_counter_special_attack == i ) 
		{
			RemoveTimer('rage_counter_special_attack_reset');

			ACS_Rage_Marker_Manager();

			rage_counter_special_attack -= rage_counter_special_attack;
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	timer function ACS_Tentacle_Damage_Delay(deltaTime : float , id : int)
	{
		ACS_Tentacle_Damage_Actual();
	}

	timer function ACS_Tentacle_Remove(deltaTime : float , id : int)
	{
		GetACSTentacleAnchor().BreakAttachment(); 
		GetACSTentacleAnchor().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSTentacleAnchor().DestroyAfter(0.0125);

		GetACSTentacle_1().BreakAttachment(); 
		GetACSTentacle_1().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSTentacle_1().DestroyAfter(0.0125);

		GetACSTentacle_2().BreakAttachment(); 
		GetACSTentacle_2().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSTentacle_2().DestroyAfter(0.0125);

		GetACSTentacle_3().BreakAttachment(); 
		GetACSTentacle_3().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		GetACSTentacle_3().DestroyAfter(0.0125);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	timer function ACS_Combo_Counter_Reset_Timer(deltaTime : float , id : int)
	{
		ACS_Combo_Mode_Reset_Hard();
	}

	function ACS_Combo_Mode_Reset()
	{
		RemoveTimer('ACS_Combo_Counter_Reset_Timer');
		AddTimer('ACS_Combo_Counter_Reset_Timer', 2, false);
	}

	function ACS_Combo_Mode_Reset_Hard()
	{
		combo_counter_damage -= combo_counter_damage;

		combo_counter_claw_fist_light -= combo_counter_claw_fist_light;

		combo_counter_claw_fist_heavy -= combo_counter_claw_fist_heavy;

		combo_counter_fist_attack -= combo_counter_fist_attack;

		combo_counter_fist_attack_heavy -= combo_counter_fist_attack_heavy;

		combo_counter_kick -= combo_counter_kick;

		combo_counter_push -= combo_counter_push;

		combo_counter_punch -= combo_counter_punch;

		combo_counter_igni_counter -= combo_counter_igni_counter;

		combo_counter_aard_counter -= combo_counter_aard_counter;

		combo_counter_quen_counter -= combo_counter_quen_counter;

		combo_counter_yrden_counter -= combo_counter_yrden_counter;

		combo_counter_axii_counter -= combo_counter_axii_counter;

		combo_counter_spear_counter -= combo_counter_spear_counter;

		combo_counter_greg_counter -= combo_counter_greg_counter;

		combo_counter_hammer_counter -= combo_counter_hammer_counter;

		combo_counter_axe_counter -= combo_counter_axe_counter;

		combo_counter_heavy_claw_attack -= combo_counter_heavy_claw_attack;

		combo_counter_claw_attack -= combo_counter_claw_attack;

		combo_counter_claw_attack_alt -= combo_counter_claw_attack_alt;

		combo_counter_claw_heavy_attack -= combo_counter_claw_heavy_attack;

		combo_counter_claw_heavy_attack_alt -= combo_counter_claw_heavy_attack_alt;

		combo_counter_claw_light_attack -= combo_counter_claw_light_attack;

		combo_counter_claw_light_attack_alt -= combo_counter_claw_light_attack_alt;

		combo_counter_attack_special_dash -= combo_counter_attack_special_dash;

		combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;

		combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;

		combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;

		combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;

		combo_counter_geralt_special_attack -= combo_counter_geralt_special_attack;

		combo_counter_geralt_light_attack_bear -= combo_counter_geralt_light_attack_bear;

		combo_counter_geralt_light_attack_forward_bear -= combo_counter_geralt_light_attack_forward_bear;

		combo_counter_geralt_heavy_attack_bear -= combo_counter_geralt_heavy_attack_bear;

		combo_counter_geralt_heavy_attack_forward_bear -= combo_counter_geralt_heavy_attack_forward_bear;

		combo_counter_geralt_special_attack_bear -= combo_counter_geralt_special_attack_bear;

		combo_counter_geralt_light_attack_cat -= combo_counter_geralt_light_attack_cat;

		combo_counter_geralt_light_attack_forward_cat -= combo_counter_geralt_light_attack_forward_cat;

		combo_counter_geralt_heavy_attack_cat -= combo_counter_geralt_heavy_attack_cat;

		combo_counter_geralt_heavy_attack_forward_cat -= combo_counter_geralt_heavy_attack_forward_cat;

		combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;

		combo_counter_geralt_light_attack_griffin -= combo_counter_geralt_light_attack_griffin;

		combo_counter_geralt_light_attack_forward_griffin -= combo_counter_geralt_light_attack_forward_griffin;

		combo_counter_geralt_heavy_attack_griffin -= combo_counter_geralt_heavy_attack_griffin;

		combo_counter_geralt_heavy_attack_forward_griffin -= combo_counter_geralt_heavy_attack_forward_griffin;

		combo_counter_geralt_special_attack_griffin -= combo_counter_geralt_special_attack_griffin;

		combo_counter_geralt_light_attack_manticore -= combo_counter_geralt_light_attack_manticore;

		combo_counter_geralt_light_attack_forward_manticore -= combo_counter_geralt_light_attack_forward_manticore;

		combo_counter_geralt_heavy_attack_manticore -= combo_counter_geralt_heavy_attack_manticore;

		combo_counter_geralt_heavy_attack_forward_manticore -= combo_counter_geralt_heavy_attack_forward_manticore;

		combo_counter_geralt_special_attack_manticore -= combo_counter_geralt_special_attack_manticore;

		combo_counter_geralt_light_attack_viper -= combo_counter_geralt_light_attack_viper;

		combo_counter_geralt_light_attack_forward_viper -= combo_counter_geralt_light_attack_forward_viper;

		combo_counter_geralt_heavy_attack_viper -= combo_counter_geralt_heavy_attack_viper;

		combo_counter_geralt_heavy_attack_forward_viper -= combo_counter_geralt_heavy_attack_forward_viper;

		combo_counter_geralt_special_attack_viper -= combo_counter_geralt_special_attack_viper;


		combo_counter_olgierd_attack -= combo_counter_olgierd_attack;

		combo_counter_olgierd_heavy_attack -= combo_counter_olgierd_heavy_attack;

		combo_counter_olgierd_heavy_attack_alt -= combo_counter_olgierd_heavy_attack_alt;

		combo_counter_olgierd_light_attack -= combo_counter_olgierd_light_attack;

		combo_counter_olgierd_light_attack_alt -= combo_counter_olgierd_light_attack_alt;

		combo_counter_olgierd_pirouette -= combo_counter_olgierd_pirouette;

		combo_counter_olgierd_combo_attack -= combo_counter_olgierd_combo_attack;

		combo_counter_eredin_attack -= combo_counter_eredin_attack;

		combo_counter_shield_attack -= combo_counter_shield_attack;

		combo_counter_shield_attack_alt -= combo_counter_shield_attack_alt;

		combo_counter_shield_attack_special_alt -= combo_counter_shield_attack_special_alt;

		combo_counter_shield_heavy_attack -= combo_counter_shield_heavy_attack;

		combo_counter_shield_heavy_attack_alt -= combo_counter_shield_heavy_attack_alt;

		combo_counter_shield_light_attack -= combo_counter_shield_light_attack;

		combo_counter_shield_light_attack_alt -= combo_counter_shield_light_attack_alt;

		combo_counter_shield_special_attack -= combo_counter_shield_special_attack;

		combo_counter_shield_special_attack_alt -= combo_counter_shield_special_attack_alt;

		combo_counter_eredin_combo_attack -= combo_counter_eredin_combo_attack;

		combo_counter_eredin_combo_attack_alt -= combo_counter_eredin_combo_attack_alt;

		combo_counter_eredin_heavy_attack -= combo_counter_eredin_heavy_attack;

		combo_counter_eredin_heavy_attack_alt -= combo_counter_eredin_heavy_attack_alt;

		combo_counter_eredin_light_attack -= combo_counter_eredin_light_attack;

		combo_counter_eredin_light_attack_alt -= combo_counter_eredin_light_attack_alt;

		combo_counter_eredin_special_attack -= combo_counter_eredin_special_attack;

		combo_counter_eredin_special_attack_alt -= combo_counter_eredin_special_attack_alt;

		combo_counter_imlerith_attack -= combo_counter_imlerith_attack;

		combo_counter_imlerith_berserk_attack -= combo_counter_imlerith_berserk_attack;

		combo_counter_imlerith_walk_attack -= combo_counter_imlerith_walk_attack;

		combo_counter_imlerith_combo_attack -= combo_counter_imlerith_combo_attack;

		combo_counter_imlerith_heavy_attack -= combo_counter_imlerith_heavy_attack;

		combo_counter_imlerith_heavy_attack_alt -= combo_counter_imlerith_heavy_attack_alt;

		combo_counter_imlerith_light_attack -= combo_counter_imlerith_light_attack;

		combo_counter_imlerith_light_attack_alt -= combo_counter_imlerith_light_attack_alt;

		combo_counter_imlerith_special_attack -= combo_counter_imlerith_special_attack;

		combo_counter_imlerith_special_attack_alt -= combo_counter_imlerith_special_attack_alt;

		combo_counter_spear_attack -= combo_counter_spear_attack;

		combo_counter_spear_attack_alt -= combo_counter_spear_attack_alt;

		combo_counter_spear_heavy_attack -= combo_counter_spear_heavy_attack;

		combo_counter_spear_heavy_attack_alt -= combo_counter_spear_heavy_attack_alt;

		combo_counter_spear_light_attack -= combo_counter_spear_light_attack;

		combo_counter_spear_light_attack_alt -= combo_counter_spear_light_attack_alt;

		combo_counter_spear_special_attack -= combo_counter_spear_special_attack;

		combo_counter_spear_special_attack_alt -= combo_counter_spear_special_attack_alt;

		combo_counter_hammer_attack -= combo_counter_hammer_attack;

		combo_counter_hammer_attack_alt -= combo_counter_hammer_attack_alt;

		combo_counter_hammer_heavy_attack -= combo_counter_hammer_heavy_attack;

		combo_counter_hammer_heavy_attack_alt -= combo_counter_hammer_heavy_attack_alt;

		combo_counter_hammer_light_attack -= combo_counter_hammer_light_attack;

		combo_counter_hammer_light_attack_alt -= combo_counter_hammer_light_attack_alt;

		combo_counter_hammer_special_attack -= combo_counter_hammer_special_attack;

		combo_counter_hammer_special_attack_alt -= combo_counter_hammer_special_attack_alt;

		combo_counter_axe_attack -= combo_counter_axe_attack;

		combo_counter_axe_attack_alt -= combo_counter_axe_attack_alt;

		combo_counter_axe_heavy_attack -= combo_counter_axe_heavy_attack;

		combo_counter_axe_heavy_attack_alt -= combo_counter_axe_heavy_attack_alt;

		combo_counter_axe_light_attack -= combo_counter_axe_light_attack;

		combo_counter_axe_light_attack_alt -= combo_counter_axe_light_attack_alt;

		combo_counter_axe_special_attack -= combo_counter_axe_special_attack;

		combo_counter_axe_special_attack_alt -= combo_counter_axe_special_attack_alt;

		combo_counter_greg_attack -= combo_counter_greg_attack;

		combo_counter_greg_attack_alt -= combo_counter_greg_attack_alt;

		combo_counter_greg_heavy_attack -= combo_counter_greg_heavy_attack;

		combo_counter_greg_heavy_attack_alt -= combo_counter_greg_heavy_attack_alt;

		combo_counter_greg_light_attack -= combo_counter_greg_light_attack;

		combo_counter_greg_light_attack_alt -= combo_counter_greg_light_attack_alt;

		combo_counter_greg_special_attack -= combo_counter_greg_special_attack;

		combo_counter_greg_special_attack_alt -= combo_counter_greg_special_attack_alt;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function blood_trail_effects()
	{
		blood_fx.Clear();
		blood_fx.PushBack('default_blood_trail');
		blood_fx.PushBack('cutscene_blood_trail');
		blood_fx.PushBack('cutscene_blood_trail_02');
		blood_fx.PushBack('blood_trail_horseriding');
		blood_fx.PushBack('blood_trail_finisher');
		blood_fx.PushBack('fast_trail_blood_fx');
		blood_fx.PushBack('weapon_blood');
		blood_fx.PushBack('weapon_blood_stage1');
		blood_fx.PushBack('weapon_blood_stage2'); 
	}
	
	function weapon_blood_fx()
	{
		blood_trail_effects();

		/*
		ACS_Sword_Trail_1().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_2().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_4().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_5().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_6().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_7().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_red');

		ACS_Sword_Trail_8().StopEffect('aerondight_blood_red');
		ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_red');
		*/

		if (thePlayer.HasTag('axii_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				axii_sword_1().StopEffect('default_blood_trail');
				axii_sword_1().StopEffect('cutscene_blood_trail');
				axii_sword_1().StopEffect('blood_trail_horseriding');
				axii_sword_1().StopEffect('blood_trail_finisher');
				axii_sword_1().StopEffect('fast_trail_blood_fx');
				axii_sword_1().StopEffect('weapon_blood');
				axii_sword_1().StopEffect('weapon_blood_stage1');
				axii_sword_1().StopEffect('weapon_blood_stage2');

				axii_sword_2().StopEffect('default_blood_trail');
				axii_sword_2().StopEffect('cutscene_blood_trail');
				axii_sword_2().StopEffect('blood_trail_horseriding');
				axii_sword_2().StopEffect('blood_trail_finisher');
				axii_sword_2().StopEffect('fast_trail_blood_fx');
				axii_sword_2().StopEffect('weapon_blood');
				axii_sword_2().StopEffect('weapon_blood_stage1');
				axii_sword_2().StopEffect('weapon_blood_stage2');

				axii_sword_3().StopEffect('default_blood_trail');
				axii_sword_3().StopEffect('cutscene_blood_trail');
				axii_sword_3().StopEffect('blood_trail_horseriding');
				axii_sword_3().StopEffect('blood_trail_finisher');
				axii_sword_3().StopEffect('fast_trail_blood_fx');
				axii_sword_3().StopEffect('weapon_blood');
				axii_sword_3().StopEffect('weapon_blood_stage1');
				axii_sword_3().StopEffect('weapon_blood_stage2');

				axii_sword_4().StopEffect('default_blood_trail');
				axii_sword_4().StopEffect('cutscene_blood_trail');
				axii_sword_4().StopEffect('blood_trail_horseriding');
				axii_sword_4().StopEffect('blood_trail_finisher');
				axii_sword_4().StopEffect('fast_trail_blood_fx');
				axii_sword_4().StopEffect('weapon_blood');
				axii_sword_4().StopEffect('weapon_blood_stage1');
				axii_sword_4().StopEffect('weapon_blood_stage2');

				axii_sword_5().StopEffect('default_blood_trail');
				axii_sword_5().StopEffect('cutscene_blood_trail');
				axii_sword_5().StopEffect('blood_trail_horseriding');
				axii_sword_5().StopEffect('blood_trail_finisher');
				axii_sword_5().StopEffect('fast_trail_blood_fx');
				axii_sword_5().StopEffect('weapon_blood');
				axii_sword_5().StopEffect('weapon_blood_stage1');
				axii_sword_5().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				axii_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_sword_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_sword_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				axii_secondary_sword_1().StopEffect('default_blood_trail');
				axii_secondary_sword_1().StopEffect('cutscene_blood_trail');
				axii_secondary_sword_1().StopEffect('blood_trail_horseriding');
				axii_secondary_sword_1().StopEffect('blood_trail_finisher');
				axii_secondary_sword_1().StopEffect('fast_trail_blood_fx');
				axii_secondary_sword_1().StopEffect('weapon_blood');
				axii_secondary_sword_1().StopEffect('weapon_blood_stage1');
				axii_secondary_sword_1().StopEffect('weapon_blood_stage2');

				axii_secondary_sword_2().StopEffect('default_blood_trail');
				axii_secondary_sword_2().StopEffect('cutscene_blood_trail');
				axii_secondary_sword_2().StopEffect('blood_trail_horseriding');
				axii_secondary_sword_2().StopEffect('blood_trail_finisher');
				axii_secondary_sword_2().StopEffect('fast_trail_blood_fx');
				axii_secondary_sword_2().StopEffect('weapon_blood');
				axii_secondary_sword_2().StopEffect('weapon_blood_stage1');
				axii_secondary_sword_2().StopEffect('weapon_blood_stage2');

				axii_secondary_sword_3().StopEffect('default_blood_trail');
				axii_secondary_sword_3().StopEffect('cutscene_blood_trail');
				axii_secondary_sword_3().StopEffect('blood_trail_horseriding');
				axii_secondary_sword_3().StopEffect('blood_trail_finisher');
				axii_secondary_sword_3().StopEffect('fast_trail_blood_fx');
				axii_secondary_sword_3().StopEffect('weapon_blood');
				axii_secondary_sword_3().StopEffect('weapon_blood_stage1');
				axii_secondary_sword_3().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				axii_secondary_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_secondary_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//axii_secondary_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				quen_sword_1().StopEffect('default_blood_trail');
				quen_sword_1().StopEffect('cutscene_blood_trail');
				quen_sword_1().StopEffect('blood_trail_horseriding');
				quen_sword_1().StopEffect('blood_trail_finisher');
				quen_sword_1().StopEffect('fast_trail_blood_fx');
				quen_sword_1().StopEffect('weapon_blood');
				quen_sword_1().StopEffect('weapon_blood_stage1');
				quen_sword_1().StopEffect('weapon_blood_stage2');

				quen_sword_2().StopEffect('default_blood_trail');
				quen_sword_2().StopEffect('cutscene_blood_trail');
				quen_sword_2().StopEffect('blood_trail_horseriding');
				quen_sword_2().StopEffect('blood_trail_finisher');
				quen_sword_2().StopEffect('fast_trail_blood_fx');
				quen_sword_2().StopEffect('weapon_blood');
				quen_sword_2().StopEffect('weapon_blood_stage1');
				quen_sword_2().StopEffect('weapon_blood_stage2');

				quen_sword_3().StopEffect('default_blood_trail');
				quen_sword_3().StopEffect('cutscene_blood_trail');
				quen_sword_3().StopEffect('blood_trail_horseriding');
				quen_sword_3().StopEffect('blood_trail_finisher');
				quen_sword_3().StopEffect('fast_trail_blood_fx');
				quen_sword_3().StopEffect('weapon_blood');
				quen_sword_3().StopEffect('weapon_blood_stage1');
				quen_sword_3().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				quen_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_2().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				quen_secondary_sword_1().StopEffect('default_blood_trail');
				quen_secondary_sword_1().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_1().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_1().StopEffect('blood_trail_finisher');
				quen_secondary_sword_1().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_1().StopEffect('weapon_blood');
				quen_secondary_sword_1().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_1().StopEffect('weapon_blood_stage2');

				quen_secondary_sword_2().StopEffect('default_blood_trail');
				quen_secondary_sword_2().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_2().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_2().StopEffect('blood_trail_finisher');
				quen_secondary_sword_2().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_2().StopEffect('weapon_blood');
				quen_secondary_sword_2().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_2().StopEffect('weapon_blood_stage2');

				quen_secondary_sword_3().StopEffect('default_blood_trail');
				quen_secondary_sword_3().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_3().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_3().StopEffect('blood_trail_finisher');
				quen_secondary_sword_3().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_3().StopEffect('weapon_blood');
				quen_secondary_sword_3().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_3().StopEffect('weapon_blood_stage2');

				quen_secondary_sword_4().StopEffect('default_blood_trail');
				quen_secondary_sword_4().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_4().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_4().StopEffect('blood_trail_finisher');
				quen_secondary_sword_4().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_4().StopEffect('weapon_blood');
				quen_secondary_sword_4().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_4().StopEffect('weapon_blood_stage2');

				quen_secondary_sword_5().StopEffect('default_blood_trail');
				quen_secondary_sword_5().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_5().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_5().StopEffect('blood_trail_finisher');
				quen_secondary_sword_5().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_5().StopEffect('weapon_blood');
				quen_secondary_sword_5().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_5().StopEffect('weapon_blood_stage2');

				quen_secondary_sword_6().StopEffect('default_blood_trail');
				quen_secondary_sword_6().StopEffect('cutscene_blood_trail');
				quen_secondary_sword_6().StopEffect('blood_trail_horseriding');
				quen_secondary_sword_6().StopEffect('blood_trail_finisher');
				quen_secondary_sword_6().StopEffect('fast_trail_blood_fx');
				quen_secondary_sword_6().StopEffect('weapon_blood');
				quen_secondary_sword_6().StopEffect('weapon_blood_stage1');
				quen_secondary_sword_6().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				quen_secondary_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				quen_secondary_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_secondary_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_secondary_sword_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_secondary_sword_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//quen_secondary_sword_6().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_2().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_4().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_5().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_5().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_6().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_6().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_7().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_7().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_8().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_8().PlayEffectSingle('aerondight_blood_red');

			aard_blade_1().StopEffect('default_blood_trail');
			aard_blade_1().StopEffect('cutscene_blood_trail');
			aard_blade_1().StopEffect('blood_trail_horseriding');
			aard_blade_1().StopEffect('blood_trail_finisher');
			aard_blade_1().StopEffect('fast_trail_blood_fx');
			aard_blade_1().StopEffect('weapon_blood');
			aard_blade_1().StopEffect('weapon_blood_stage1');
			aard_blade_1().StopEffect('weapon_blood_stage2');

			aard_blade_2().StopEffect('default_blood_trail');
			aard_blade_2().StopEffect('cutscene_blood_trail');
			aard_blade_2().StopEffect('blood_trail_horseriding');
			aard_blade_2().StopEffect('blood_trail_finisher');
			aard_blade_2().StopEffect('fast_trail_blood_fx');
			aard_blade_2().StopEffect('weapon_blood');
			aard_blade_2().StopEffect('weapon_blood_stage1');
			aard_blade_2().StopEffect('weapon_blood_stage2');

			aard_blade_3().StopEffect('default_blood_trail');
			aard_blade_3().StopEffect('cutscene_blood_trail');
			aard_blade_3().StopEffect('blood_trail_horseriding');
			aard_blade_3().StopEffect('blood_trail_finisher');
			aard_blade_3().StopEffect('fast_trail_blood_fx');
			aard_blade_3().StopEffect('weapon_blood');
			aard_blade_3().StopEffect('weapon_blood_stage1');
			aard_blade_3().StopEffect('weapon_blood_stage2');

			aard_blade_4().StopEffect('default_blood_trail');
			aard_blade_4().StopEffect('cutscene_blood_trail');
			aard_blade_4().StopEffect('blood_trail_horseriding');
			aard_blade_4().StopEffect('blood_trail_finisher');
			aard_blade_4().StopEffect('fast_trail_blood_fx');
			aard_blade_4().StopEffect('weapon_blood');
			aard_blade_4().StopEffect('weapon_blood_stage1');
			aard_blade_4().StopEffect('weapon_blood_stage2');

			aard_blade_5().StopEffect('default_blood_trail');
			aard_blade_5().StopEffect('cutscene_blood_trail');
			aard_blade_5().StopEffect('blood_trail_horseriding');
			aard_blade_5().StopEffect('blood_trail_finisher');
			aard_blade_5().StopEffect('fast_trail_blood_fx');
			aard_blade_5().StopEffect('weapon_blood');
			aard_blade_5().StopEffect('weapon_blood_stage1');
			aard_blade_5().StopEffect('weapon_blood_stage2');

			aard_blade_6().StopEffect('default_blood_trail');
			aard_blade_6().StopEffect('cutscene_blood_trail');
			aard_blade_6().StopEffect('blood_trail_horseriding');
			aard_blade_6().StopEffect('blood_trail_finisher');
			aard_blade_6().StopEffect('fast_trail_blood_fx');
			aard_blade_6().StopEffect('weapon_blood');
			aard_blade_6().StopEffect('weapon_blood_stage1');
			aard_blade_6().StopEffect('weapon_blood_stage2');

			aard_blade_7().StopEffect('default_blood_trail');
			aard_blade_7().StopEffect('cutscene_blood_trail');
			aard_blade_7().StopEffect('blood_trail_horseriding');
			aard_blade_7().StopEffect('blood_trail_finisher');
			aard_blade_7().StopEffect('fast_trail_blood_fx');
			aard_blade_7().StopEffect('weapon_blood');
			aard_blade_7().StopEffect('weapon_blood_stage1');
			aard_blade_7().StopEffect('weapon_blood_stage2');

			aard_blade_8().StopEffect('default_blood_trail');
			aard_blade_8().StopEffect('cutscene_blood_trail');
			aard_blade_8().StopEffect('blood_trail_horseriding');
			aard_blade_8().StopEffect('blood_trail_finisher');
			aard_blade_8().StopEffect('fast_trail_blood_fx');
			aard_blade_8().StopEffect('weapon_blood');
			aard_blade_8().StopEffect('weapon_blood_stage1');
			aard_blade_8().StopEffect('weapon_blood_stage2');

			aard_blade_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_6().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_7().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			aard_blade_8().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
		}
		else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				aard_secondary_sword_1().StopEffect('default_blood_trail');
				aard_secondary_sword_1().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_1().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_1().StopEffect('blood_trail_finisher');
				aard_secondary_sword_1().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_1().StopEffect('weapon_blood');
				aard_secondary_sword_1().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_1().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_2().StopEffect('default_blood_trail');
				aard_secondary_sword_2().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_2().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_2().StopEffect('blood_trail_finisher');
				aard_secondary_sword_2().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_2().StopEffect('weapon_blood');
				aard_secondary_sword_2().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_2().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_3().StopEffect('default_blood_trail');
				aard_secondary_sword_3().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_3().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_3().StopEffect('blood_trail_finisher');
				aard_secondary_sword_3().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_3().StopEffect('weapon_blood');
				aard_secondary_sword_3().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_3().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_4().StopEffect('default_blood_trail');
				aard_secondary_sword_4().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_4().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_4().StopEffect('blood_trail_finisher');
				aard_secondary_sword_4().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_4().StopEffect('weapon_blood');
				aard_secondary_sword_4().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_4().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_5().StopEffect('default_blood_trail');
				aard_secondary_sword_5().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_5().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_5().StopEffect('blood_trail_finisher');
				aard_secondary_sword_5().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_5().StopEffect('weapon_blood');
				aard_secondary_sword_5().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_5().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_6().StopEffect('default_blood_trail');
				aard_secondary_sword_6().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_6().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_6().StopEffect('blood_trail_finisher');
				aard_secondary_sword_6().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_6().StopEffect('weapon_blood');
				aard_secondary_sword_6().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_6().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_7().StopEffect('default_blood_trail');
				aard_secondary_sword_7().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_7().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_7().StopEffect('blood_trail_finisher');
				aard_secondary_sword_7().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_7().StopEffect('weapon_blood');
				aard_secondary_sword_7().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_7().StopEffect('weapon_blood_stage2');

				aard_secondary_sword_8().StopEffect('default_blood_trail');
				aard_secondary_sword_8().StopEffect('cutscene_blood_trail');
				aard_secondary_sword_8().StopEffect('blood_trail_horseriding');
				aard_secondary_sword_8().StopEffect('blood_trail_finisher');
				aard_secondary_sword_8().StopEffect('fast_trail_blood_fx');
				aard_secondary_sword_8().StopEffect('weapon_blood');
				aard_secondary_sword_8().StopEffect('weapon_blood_stage1');
				aard_secondary_sword_8().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				aard_secondary_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_6().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_7().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				//aard_secondary_sword_8().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('yrden_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_2().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_4().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_4().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				yrden_sword_1().StopEffect('default_blood_trail');
				yrden_sword_1().StopEffect('cutscene_blood_trail');
				yrden_sword_1().StopEffect('blood_trail_horseriding');
				yrden_sword_1().StopEffect('blood_trail_finisher');
				yrden_sword_1().StopEffect('fast_trail_blood_fx');
				yrden_sword_1().StopEffect('weapon_blood');
				yrden_sword_1().StopEffect('weapon_blood_stage1');
				yrden_sword_1().StopEffect('weapon_blood_stage2');

				yrden_sword_2().StopEffect('default_blood_trail');
				yrden_sword_2().StopEffect('cutscene_blood_trail');
				yrden_sword_2().StopEffect('blood_trail_horseriding');
				yrden_sword_2().StopEffect('blood_trail_finisher');
				yrden_sword_2().StopEffect('fast_trail_blood_fx');
				yrden_sword_2().StopEffect('weapon_blood');
				yrden_sword_2().StopEffect('weapon_blood_stage1');
				yrden_sword_2().StopEffect('weapon_blood_stage2');

				yrden_sword_3().StopEffect('default_blood_trail');
				yrden_sword_3().StopEffect('cutscene_blood_trail');
				yrden_sword_3().StopEffect('blood_trail_horseriding');
				yrden_sword_3().StopEffect('blood_trail_finisher');
				yrden_sword_3().StopEffect('fast_trail_blood_fx');
				yrden_sword_3().StopEffect('weapon_blood');
				yrden_sword_3().StopEffect('weapon_blood_stage1');
				yrden_sword_3().StopEffect('weapon_blood_stage2');

				yrden_sword_4().StopEffect('default_blood_trail');
				yrden_sword_4().StopEffect('cutscene_blood_trail');
				yrden_sword_4().StopEffect('blood_trail_horseriding');
				yrden_sword_4().StopEffect('blood_trail_finisher');
				yrden_sword_4().StopEffect('fast_trail_blood_fx');
				yrden_sword_4().StopEffect('weapon_blood');
				yrden_sword_4().StopEffect('weapon_blood_stage1');
				yrden_sword_4().StopEffect('weapon_blood_stage2');

				yrden_sword_5().StopEffect('default_blood_trail');
				yrden_sword_5().StopEffect('cutscene_blood_trail');
				yrden_sword_5().StopEffect('blood_trail_horseriding');
				yrden_sword_5().StopEffect('blood_trail_finisher');
				yrden_sword_5().StopEffect('fast_trail_blood_fx');
				yrden_sword_5().StopEffect('weapon_blood');
				yrden_sword_5().StopEffect('weapon_blood_stage1');
				yrden_sword_5().StopEffect('weapon_blood_stage2');

				yrden_sword_6().StopEffect('default_blood_trail');
				yrden_sword_6().StopEffect('cutscene_blood_trail');
				yrden_sword_6().StopEffect('blood_trail_horseriding');
				yrden_sword_6().StopEffect('blood_trail_finisher');
				yrden_sword_6().StopEffect('fast_trail_blood_fx');
				yrden_sword_6().StopEffect('weapon_blood');
				yrden_sword_6().StopEffect('weapon_blood_stage1');
				yrden_sword_6().StopEffect('weapon_blood_stage2');

				yrden_sword_7().StopEffect('default_blood_trail');
				yrden_sword_7().StopEffect('cutscene_blood_trail');
				yrden_sword_7().StopEffect('blood_trail_horseriding');
				yrden_sword_7().StopEffect('blood_trail_finisher');
				yrden_sword_7().StopEffect('fast_trail_blood_fx');
				yrden_sword_7().StopEffect('weapon_blood');
				yrden_sword_7().StopEffect('weapon_blood_stage1');
				yrden_sword_7().StopEffect('weapon_blood_stage2');

				yrden_sword_8().StopEffect('default_blood_trail');
				yrden_sword_8().StopEffect('cutscene_blood_trail');
				yrden_sword_8().StopEffect('blood_trail_horseriding');
				yrden_sword_8().StopEffect('blood_trail_finisher');
				yrden_sword_8().StopEffect('fast_trail_blood_fx');
				yrden_sword_8().StopEffect('weapon_blood');
				yrden_sword_8().StopEffect('weapon_blood_stage1');
				yrden_sword_8().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				yrden_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_6().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_7().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_sword_8().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_1().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_2().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_2().PlayEffectSingle('aerondight_blood_red');

			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			if (ACS_GetWeaponMode() == 0
			|| ACS_GetWeaponMode() == 1
			|| ACS_GetWeaponMode() == 2
			)
			{
				yrden_secondary_sword_1().StopEffect('default_blood_trail');
				yrden_secondary_sword_1().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_1().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_1().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_1().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_1().StopEffect('weapon_blood');
				yrden_secondary_sword_1().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_1().StopEffect('weapon_blood_stage2');

				yrden_secondary_sword_2().StopEffect('default_blood_trail');
				yrden_secondary_sword_2().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_2().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_2().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_2().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_2().StopEffect('weapon_blood');
				yrden_secondary_sword_2().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_2().StopEffect('weapon_blood_stage2');

				yrden_secondary_sword_3().StopEffect('default_blood_trail');
				yrden_secondary_sword_3().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_3().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_3().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_3().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_3().StopEffect('weapon_blood');
				yrden_secondary_sword_3().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_3().StopEffect('weapon_blood_stage2');

				yrden_secondary_sword_4().StopEffect('default_blood_trail');
				yrden_secondary_sword_4().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_4().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_4().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_4().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_4().StopEffect('weapon_blood');
				yrden_secondary_sword_4().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_4().StopEffect('weapon_blood_stage2');

				yrden_secondary_sword_5().StopEffect('default_blood_trail');
				yrden_secondary_sword_5().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_5().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_5().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_5().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_5().StopEffect('weapon_blood');
				yrden_secondary_sword_5().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_5().StopEffect('weapon_blood_stage2');

				yrden_secondary_sword_6().StopEffect('default_blood_trail');
				yrden_secondary_sword_6().StopEffect('cutscene_blood_trail');
				yrden_secondary_sword_6().StopEffect('blood_trail_horseriding');
				yrden_secondary_sword_6().StopEffect('blood_trail_finisher');
				yrden_secondary_sword_6().StopEffect('fast_trail_blood_fx');
				yrden_secondary_sword_6().StopEffect('weapon_blood');
				yrden_secondary_sword_6().StopEffect('weapon_blood_stage1');
				yrden_secondary_sword_6().StopEffect('weapon_blood_stage2');

				/*
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				*/

				yrden_secondary_sword_1().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_secondary_sword_2().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_secondary_sword_3().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_secondary_sword_4().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_secondary_sword_5().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
				yrden_secondary_sword_6().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				ACSGetEquippedSword().StopEffect('default_blood_trail');
				ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
				ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
				ACSGetEquippedSword().StopEffect('blood_trail_finisher');
				ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
				ACSGetEquippedSword().StopEffect('weapon_blood');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
				ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

				ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
			}
		}
		else if (thePlayer.HasTag('igni_sword_equipped')
		|| thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped_TAG')
		|| thePlayer.HasTag('igni_secondary_sword_equipped_TAG')
		)
		{
			ACS_Sword_Trail_3().StopEffect('aerondight_blood_red');
			ACS_Sword_Trail_3().PlayEffectSingle('aerondight_blood_red');

			ACSGetEquippedSword().StopEffect('default_blood_trail');
			ACSGetEquippedSword().StopEffect('cutscene_blood_trail');
			ACSGetEquippedSword().StopEffect('blood_trail_horseriding');
			ACSGetEquippedSword().StopEffect('blood_trail_finisher');
			ACSGetEquippedSword().StopEffect('fast_trail_blood_fx');
			ACSGetEquippedSword().StopEffect('weapon_blood');
			ACSGetEquippedSword().StopEffect('weapon_blood_stage1');
			ACSGetEquippedSword().StopEffect('weapon_blood_stage2');

			ACSGetEquippedSword().PlayEffectSingle(blood_fx[RandRange(blood_fx.Size())]);
		}
	}

	function green_weapon_blood_fx()
	{
		ACS_Sword_Trail_1().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_1().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_1().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_1().PlayEffect('aerondight_blood_green');

		ACS_Sword_Trail_2().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_2().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_2().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_2().PlayEffect('aerondight_blood_green');

		ACS_Sword_Trail_3().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_3().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_3().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_3().PlayEffect('aerondight_blood_green');

		ACS_Sword_Trail_4().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_4().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_4().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_4().PlayEffect('aerondight_blood_green');

		ACS_Sword_Trail_5().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_5().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_5().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_5().PlayEffect('aerondight_blood_green');

		ACS_Sword_Trail_6().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_6().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_6().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_6().PlayEffect('aerondight_blood_green');

		ACS_Sword_Trail_7().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_7().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_7().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_7().PlayEffect('aerondight_blood_green');

		ACS_Sword_Trail_8().StopEffect('aerondight_blood_green');
		ACS_Sword_Trail_8().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_8().PlayEffect('aerondight_blood_green');
		ACS_Sword_Trail_8().PlayEffect('aerondight_blood_green');
	}

	function black_weapon_blood_fx()
	{
		ACS_Sword_Trail_1().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_1().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_1().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_1().PlayEffect('aerondight_blood_black');

		ACS_Sword_Trail_2().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_2().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_2().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_2().PlayEffect('aerondight_blood_black');

		ACS_Sword_Trail_3().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_3().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_3().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_3().PlayEffect('aerondight_blood_black');

		ACS_Sword_Trail_4().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_4().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_4().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_4().PlayEffect('aerondight_blood_black');

		ACS_Sword_Trail_5().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_5().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_5().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_5().PlayEffect('aerondight_blood_black');

		ACS_Sword_Trail_6().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_6().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_6().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_6().PlayEffect('aerondight_blood_black');

		ACS_Sword_Trail_7().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_7().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_7().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_7().PlayEffect('aerondight_blood_black');

		ACS_Sword_Trail_8().StopEffect('aerondight_blood_black');
		ACS_Sword_Trail_8().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_8().PlayEffect('aerondight_blood_black');
		ACS_Sword_Trail_8().PlayEffect('aerondight_blood_black');
	}

	function yellow_weapon_blood_fx()
	{
		ACS_Sword_Trail_1().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_1().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_1().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_1().PlayEffect('aerondight_blood_yellow');

		ACS_Sword_Trail_2().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_2().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_2().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_2().PlayEffect('aerondight_blood_yellow');

		ACS_Sword_Trail_3().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_3().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_3().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_3().PlayEffect('aerondight_blood_yellow');

		ACS_Sword_Trail_4().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_4().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_4().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_4().PlayEffect('aerondight_blood_yellow');

		ACS_Sword_Trail_5().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_5().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_5().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_5().PlayEffect('aerondight_blood_yellow');

		ACS_Sword_Trail_6().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_6().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_6().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_6().PlayEffect('aerondight_blood_yellow');

		ACS_Sword_Trail_7().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_7().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_7().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_7().PlayEffect('aerondight_blood_yellow');

		ACS_Sword_Trail_8().StopEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_8().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_8().PlayEffect('aerondight_blood_yellow');
		ACS_Sword_Trail_8().PlayEffect('aerondight_blood_yellow');
	}

	function aerondight_sword_trail()
	{
		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffect('charge_10');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('aerondight_special_trail');
		}
		else if (thePlayer.HasTag('axii_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffect('charge_10');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('aerondight_special_trail');
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffect('aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('charge_10');
			ACS_Sword_Trail_1().PlayEffect('charge_10');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffect('charge_10');

			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffect('charge_10');

			ACS_Sword_Trail_4().StopEffect('charge_10');
			ACS_Sword_Trail_4().PlayEffect('charge_10');

			ACS_Sword_Trail_5().StopEffect('charge_10');
			ACS_Sword_Trail_5().PlayEffect('charge_10');

			ACS_Sword_Trail_6().StopEffect('charge_10');
			ACS_Sword_Trail_6().PlayEffect('charge_10');

			ACS_Sword_Trail_7().StopEffect('charge_10');
			ACS_Sword_Trail_7().PlayEffect('charge_10');

			ACS_Sword_Trail_8().StopEffect('charge_10');
			ACS_Sword_Trail_8().PlayEffect('charge_10');
		}
		else if (thePlayer.HasTag('yrden_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffect('aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('charge_10');
			ACS_Sword_Trail_1().PlayEffect('charge_10');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffect('charge_10');

			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffect('charge_10');

			ACS_Sword_Trail_4().StopEffect('charge_10');
			ACS_Sword_Trail_4().PlayEffect('charge_10');

			ACS_Sword_Trail_5().StopEffect('charge_10');
			ACS_Sword_Trail_5().PlayEffect('charge_10');

			ACS_Sword_Trail_6().StopEffect('charge_10');
			ACS_Sword_Trail_6().PlayEffect('charge_10');

			ACS_Sword_Trail_7().StopEffect('charge_10');
			ACS_Sword_Trail_7().PlayEffect('charge_10');

			ACS_Sword_Trail_8().StopEffect('charge_10');
			ACS_Sword_Trail_8().PlayEffect('charge_10');
		}
		else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_1().StopEffect('charge_10');
			ACS_Sword_Trail_1().PlayEffect('charge_10');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffect('charge_10');

			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffect('charge_10');

			ACS_Sword_Trail_4().StopEffect('charge_10');
			ACS_Sword_Trail_4().PlayEffect('charge_10');

			ACS_Sword_Trail_5().StopEffect('charge_10');
			ACS_Sword_Trail_5().PlayEffect('charge_10');

			ACS_Sword_Trail_6().StopEffect('charge_10');
			ACS_Sword_Trail_6().PlayEffect('charge_10');

			ACS_Sword_Trail_7().StopEffect('charge_10');
			ACS_Sword_Trail_7().PlayEffect('charge_10');

			ACS_Sword_Trail_8().StopEffect('charge_10');
			ACS_Sword_Trail_8().PlayEffect('charge_10');
		}
		else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffect('charge_10');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('aerondight_special_trail');
		}
		else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffect('aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('charge_10');
			ACS_Sword_Trail_1().PlayEffect('charge_10');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffect('charge_10');

			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffect('charge_10');

			ACS_Sword_Trail_4().StopEffect('charge_10');
			ACS_Sword_Trail_4().PlayEffect('charge_10');

			ACS_Sword_Trail_5().StopEffect('charge_10');
			ACS_Sword_Trail_5().PlayEffect('charge_10');

			ACS_Sword_Trail_6().StopEffect('charge_10');
			ACS_Sword_Trail_6().PlayEffect('charge_10');

			ACS_Sword_Trail_7().StopEffect('charge_10');
			ACS_Sword_Trail_7().PlayEffect('charge_10');

			ACS_Sword_Trail_8().StopEffect('charge_10');
			ACS_Sword_Trail_8().PlayEffect('charge_10');
		}
		else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffect('aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffect('aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('charge_10');
			ACS_Sword_Trail_1().PlayEffect('charge_10');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffect('charge_10');

			ACS_Sword_Trail_3().StopEffect('charge_10');
			ACS_Sword_Trail_3().PlayEffect('charge_10');

			ACS_Sword_Trail_4().StopEffect('charge_10');
			ACS_Sword_Trail_4().PlayEffect('charge_10');

			ACS_Sword_Trail_5().StopEffect('charge_10');
			ACS_Sword_Trail_5().PlayEffect('charge_10');

			ACS_Sword_Trail_6().StopEffect('charge_10');
			ACS_Sword_Trail_6().PlayEffect('charge_10');

			ACS_Sword_Trail_7().StopEffect('charge_10');
			ACS_Sword_Trail_7().PlayEffect('charge_10');

			ACS_Sword_Trail_8().StopEffect('charge_10');
			ACS_Sword_Trail_8().PlayEffect('charge_10');
		}
		else if (
		thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped'))
		{
			//ACS_Sword_Trail_1().StopEffect('aerondight_glow_sword');
			ACS_Sword_Trail_1().PlayEffect('aerondight_glow_sword');
			ACS_Sword_Trail_1().StopEffect('aerondight_glow_sword');

			//ACS_Sword_Trail_1().StopEffect('aerondight_glow_sword_orig');
			//ACS_Sword_Trail_1().PlayEffect('aerondight_glow_sword_orig');
			//ACS_Sword_Trail_1().StopEffect('aerondight_glow_sword_orig');

			ACS_Sword_Trail_2().StopEffect('charge_10');
			ACS_Sword_Trail_2().PlayEffect('charge_10');

			ACS_Sword_Trail_2().StopEffect('aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('aerondight_special_trail');
		}
	}

	function iris_sword_trail()
	{
		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('red_aerondight_special_trail');
		}
		else if (thePlayer.HasTag('axii_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('red_aerondight_special_trail');
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffect('red_aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffect('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffect('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffect('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffect('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffect('red_charge_10');
		}
		else if (thePlayer.HasTag('yrden_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffect('red_aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffect('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffect('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffect('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffect('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffect('red_charge_10');
		}
		else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffect('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffect('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffect('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffect('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffect('red_charge_10');
		}
		else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('red_aerondight_special_trail');
		}
		else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffect('red_aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffect('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffect('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffect('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffect('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffect('red_charge_10');
		}
		else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_1().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_3().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_3().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_4().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_4().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_5().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_5().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_6().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_6().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_7().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_7().PlayEffect('red_aerondight_special_trail');

			ACS_Sword_Trail_8().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_8().PlayEffect('red_aerondight_special_trail');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffect('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffect('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffect('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffect('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffect('red_charge_10');
		}
		else if (
		thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped'))
		{
			//ACS_Sword_Trail_1().PlayEffect('pre_special_attack_iris');
			//ACS_Sword_Trail_1().StopEffect('pre_special_attack_iris');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_aerondight_special_trail');
			ACS_Sword_Trail_2().PlayEffect('red_aerondight_special_trail');
		}
	}

	function ACS_Armor_Ether_Sword_Trail()
	{
		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffect('light_trail_extended_fx_red');
		}
		else if (thePlayer.HasTag('axii_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffect('light_trail_extended_fx_red');
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_1().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_4().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_4().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_5().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_5().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_6().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_6().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_7().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_7().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_8().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_8().PlayEffect('light_trail_extended_fx_red');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffect('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffect('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffect('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffect('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffect('red_charge_10');
		}
		else if (thePlayer.HasTag('yrden_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_1().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_4().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_4().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_5().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_5().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_6().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_6().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_7().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_7().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_8().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_8().PlayEffect('light_trail_extended_fx_red');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffect('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffect('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffect('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffect('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffect('red_charge_10');
		}
		else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_1().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_4().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_4().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_5().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_5().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_6().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_6().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_7().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_7().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_8().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_8().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffect('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffect('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffect('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffect('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffect('red_charge_10');
		}
		else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffect('light_trail_extended_fx_red');
		}
		else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_1().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_4().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_4().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_5().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_5().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_6().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_6().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_7().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_7().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_8().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_8().PlayEffect('light_trail_extended_fx_red');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffect('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffect('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffect('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffect('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffect('red_charge_10');
		}
		else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_1().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_3().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_3().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_4().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_4().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_5().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_5().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_6().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_6().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_7().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_7().PlayEffect('light_trail_extended_fx_red');

			ACS_Sword_Trail_8().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_8().PlayEffect('light_trail_extended_fx_red');


			ACS_Sword_Trail_1().StopEffect('red_charge_10');
			ACS_Sword_Trail_1().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_3().StopEffect('red_charge_10');
			ACS_Sword_Trail_3().PlayEffect('red_charge_10');

			ACS_Sword_Trail_4().StopEffect('red_charge_10');
			ACS_Sword_Trail_4().PlayEffect('red_charge_10');

			ACS_Sword_Trail_5().StopEffect('red_charge_10');
			ACS_Sword_Trail_5().PlayEffect('red_charge_10');

			ACS_Sword_Trail_6().StopEffect('red_charge_10');
			ACS_Sword_Trail_6().PlayEffect('red_charge_10');

			ACS_Sword_Trail_7().StopEffect('red_charge_10');
			ACS_Sword_Trail_7().PlayEffect('red_charge_10');

			ACS_Sword_Trail_8().StopEffect('red_charge_10');
			ACS_Sword_Trail_8().PlayEffect('red_charge_10');
		}
		else if (
		thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped'))
		{
			//ACS_Sword_Trail_1().PlayEffect('pre_special_attack_iris');
			//ACS_Sword_Trail_1().StopEffect('pre_special_attack_iris');

			ACS_Sword_Trail_2().StopEffect('red_charge_10');
			ACS_Sword_Trail_2().PlayEffect('red_charge_10');

			ACS_Sword_Trail_2().StopEffect('light_trail_extended_fx_red');
			ACS_Sword_Trail_2().PlayEffect('light_trail_extended_fx_red');
		}
	}

	function ciri_sword_trail()
	{
		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffect('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffect('fury_trail');
		}
		else if (thePlayer.HasTag('axii_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffect('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffect('fury_trail');
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('fury_trail');
			ACS_Sword_Trail_1().PlayEffect('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffect('fury_trail');

			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffect('fury_trail');

			ACS_Sword_Trail_4().StopEffect('fury_trail');
			ACS_Sword_Trail_4().PlayEffect('fury_trail');

			ACS_Sword_Trail_5().StopEffect('fury_trail');
			ACS_Sword_Trail_5().PlayEffect('fury_trail');

			ACS_Sword_Trail_6().StopEffect('fury_trail');
			ACS_Sword_Trail_6().PlayEffect('fury_trail');

			ACS_Sword_Trail_7().StopEffect('fury_trail');
			ACS_Sword_Trail_7().PlayEffect('fury_trail');

			ACS_Sword_Trail_8().StopEffect('fury_trail');
			ACS_Sword_Trail_8().PlayEffect('fury_trail');
		}
		else if (thePlayer.HasTag('yrden_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('fury_trail');
			ACS_Sword_Trail_1().PlayEffect('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffect('fury_trail');

			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffect('fury_trail');

			ACS_Sword_Trail_4().StopEffect('fury_trail');
			ACS_Sword_Trail_4().PlayEffect('fury_trail');

			ACS_Sword_Trail_5().StopEffect('fury_trail');
			ACS_Sword_Trail_5().PlayEffect('fury_trail');

			ACS_Sword_Trail_6().StopEffect('fury_trail');
			ACS_Sword_Trail_6().PlayEffect('fury_trail');

			ACS_Sword_Trail_7().StopEffect('fury_trail');
			ACS_Sword_Trail_7().PlayEffect('fury_trail');

			ACS_Sword_Trail_8().StopEffect('fury_trail');
			ACS_Sword_Trail_8().PlayEffect('fury_trail');
		}
		else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('fury_trail');
			ACS_Sword_Trail_1().PlayEffect('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffect('fury_trail');

			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffect('fury_trail');

			ACS_Sword_Trail_4().StopEffect('fury_trail');
			ACS_Sword_Trail_4().PlayEffect('fury_trail');

			ACS_Sword_Trail_5().StopEffect('fury_trail');
			ACS_Sword_Trail_5().PlayEffect('fury_trail');

			ACS_Sword_Trail_6().StopEffect('fury_trail');
			ACS_Sword_Trail_6().PlayEffect('fury_trail');

			ACS_Sword_Trail_7().StopEffect('fury_trail');
			ACS_Sword_Trail_7().PlayEffect('fury_trail');

			ACS_Sword_Trail_8().StopEffect('fury_trail');
			ACS_Sword_Trail_8().PlayEffect('fury_trail');
		}
		else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffect('fury_trail');
		}
		else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('fury_trail');
			ACS_Sword_Trail_1().PlayEffect('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffect('fury_trail');

			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffect('fury_trail');

			ACS_Sword_Trail_4().StopEffect('fury_trail');
			ACS_Sword_Trail_4().PlayEffect('fury_trail');

			ACS_Sword_Trail_5().StopEffect('fury_trail');
			ACS_Sword_Trail_5().PlayEffect('fury_trail');

			ACS_Sword_Trail_6().StopEffect('fury_trail');
			ACS_Sword_Trail_6().PlayEffect('fury_trail');

			ACS_Sword_Trail_7().StopEffect('fury_trail');
			ACS_Sword_Trail_7().PlayEffect('fury_trail');

			ACS_Sword_Trail_8().StopEffect('fury_trail');
			ACS_Sword_Trail_8().PlayEffect('fury_trail');
		}
		else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Sword_Trail_1().StopEffect('fury_trail');
			ACS_Sword_Trail_1().PlayEffect('fury_trail');

			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffect('fury_trail');

			ACS_Sword_Trail_3().StopEffect('fury_trail');
			ACS_Sword_Trail_3().PlayEffect('fury_trail');

			ACS_Sword_Trail_4().StopEffect('fury_trail');
			ACS_Sword_Trail_4().PlayEffect('fury_trail');

			ACS_Sword_Trail_5().StopEffect('fury_trail');
			ACS_Sword_Trail_5().PlayEffect('fury_trail');

			ACS_Sword_Trail_6().StopEffect('fury_trail');
			ACS_Sword_Trail_6().PlayEffect('fury_trail');

			ACS_Sword_Trail_7().StopEffect('fury_trail');
			ACS_Sword_Trail_7().PlayEffect('fury_trail');

			ACS_Sword_Trail_8().StopEffect('fury_trail');
			ACS_Sword_Trail_8().PlayEffect('fury_trail');
		}
		else if (
		thePlayer.HasTag('igni_secondary_sword_equipped')
		|| thePlayer.HasTag('igni_sword_equipped'))
		{
			ACS_Sword_Trail_2().StopEffect('fury_trail');
			ACS_Sword_Trail_2().PlayEffect('fury_trail');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function VampVoiceEffects_Effort()
	{
		vamp_sound_names.Clear();

		if (thePlayer.HasBuff(EET_BlackBlood))
		{
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_taunt_claws");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big_short");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_roar");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_heavy_charge");
		}
		else
		{
			vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_effort");
			//vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_snarl");
			vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_hiss");
		}

		if (RandF() < 0.75)
		{
			thePlayer.SoundEvent(vamp_sound_names[RandRange(vamp_sound_names.Size())]);
		}
	}

	function VampVoiceEffects_Effort_Big()
	{
		vamp_sound_names.Clear();

		if (thePlayer.HasBuff(EET_BlackBlood))
		{
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_taunt_claws");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big_short");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_roar");
			vamp_sound_names.PushBack("monster_dettlaff_monster_voice_heavy_charge");
		}
		else
		{
			vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_effort_big");
			//vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_snarl");
			vamp_sound_names.PushBack("monster_dettlaff_vampire_voice_hiss");
		}

		if (RandF() < 0.75)
		{
			thePlayer.SoundEvent(vamp_sound_names[RandRange(vamp_sound_names.Size())]);
		}
	}

	function VampVoiceEffects_Monster()
	{
		vamp_sound_names.Clear();
		vamp_sound_names.PushBack("monster_dettlaff_monster_voice_taunt_claws");
		vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big");
		vamp_sound_names.PushBack("monster_dettlaff_monster_voice_effort_big_short");
		vamp_sound_names.PushBack("monster_dettlaff_monster_voice_roar");
		vamp_sound_names.PushBack("monster_dettlaff_monster_voice_heavy_charge");

		if (RandF() < 0.5)
		{
			thePlayer.SoundEvent(vamp_sound_names[RandRange(vamp_sound_names.Size())]);
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Remove_On_Hit_Tags()
	{
		//actors = GetActorsInRange(thePlayer, 100, 100);

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInRange( 100, 100);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actor = (CActor)actors[i];

				if (actor.HasTag('aard_light_attack_primer'))
				{
					actor.RemoveTag('aard_light_attack_primer');
				}
				else if (actor.HasTag('aard_heavy_attack_primer'))
				{
					actor.RemoveTag('aard_heavy_attack_primer');
				}
				else if (actor.HasTag('axii_light_attack_primer'))
				{
					actor.RemoveTag('axii_light_attack_primer');
				}
				else if (actor.HasTag('axii_heavy_attack_primer'))
				{
					actor.RemoveTag('axii_heavy_attack_primer');
				}
				else if (actor.HasTag('yrden_light_attack_primer'))
				{
					actor.RemoveTag('yrden_light_attack_primer');
				}
				else if (actor.HasTag('yrden_heavy_attack_primer'))
				{
					actor.RemoveTag('yrden_heavy_attack_primer');
				}
				else if (actor.HasTag('quen_light_attack_primer'))
				{
					actor.RemoveTag('quen_light_attack_primer');
				}
				else if (actor.HasTag('quen_heavy_attack_primer'))
				{
					actor.RemoveTag('quen_heavy_attack_primer');
				}
				else if (actor.HasTag('igni_light_attack_primer'))
				{
					actor.RemoveTag('igni_light_attack_primer');
				}
				else if (actor.HasTag('igni_heavy_attack_primer'))
				{
					actor.RemoveTag('igni_heavy_attack_primer');
				}	
			}
		}

		PrimerMarkDestroy();
	}

	function Remove_Combat_Target_Tag()
	{
		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInRange( 100, 100);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actor = (CActor)actors[i];

				if (actor.HasTag('ACS_Combat_Target'))
				{
					actor.RemoveTag('ACS_Combat_Target');
				}
			}
		}
	}

	function PrimerMarkDestroy()
	{
		marks.Clear();
			
		theGame.GetEntitiesByTag( 'PrimerMark', marks );
	
		for( i=0; i<marks.Size(); i+=1 )
		{	
			mark = (CEntity)marks[i];	
			mark.BreakAttachment();
			mark.Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -100) );
			mark.Destroy();
		}
	}

	function BerserkMarkDestroy()
	{
		marks_2.Clear();
			
		theGame.GetEntitiesByTag( 'BerserkMark', marks_2 );
	
		for( i=0; i<marks_2.Size(); i+=1 )
		{	
			mark = (CEntity)marks_2[i];	
			mark.BreakAttachment();
			mark.Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -100) );
			mark.Destroy();
		}
	}

	function fill_acs_steel_weapons_array()
	{
		steel_weapon_names.Clear();

		steel_weapon_names.PushBack('ACS_Spear_1');
		steel_weapon_names.PushBack('ACS_Spear_2');
		steel_weapon_names.PushBack('ACS_Wild_Hunt_Spear');
		steel_weapon_names.PushBack('ACS_Halberd_1');
		steel_weapon_names.PushBack('ACS_Halberd_2');
		steel_weapon_names.PushBack('ACS_Wild_Hunt_Halberd');
		steel_weapon_names.PushBack('ACS_Guisarme_1');
		steel_weapon_names.PushBack('ACS_Guisarme_2');
		steel_weapon_names.PushBack('ACS_Long_Metal_Pole');
		steel_weapon_names.PushBack('ACS_Mace_1');
		steel_weapon_names.PushBack('ACS_Mace_2');
		steel_weapon_names.PushBack('ACS_Axe_1');
		steel_weapon_names.PushBack('ACS_Axe_2');
		steel_weapon_names.PushBack('ACS_Great_Axe_1');
		steel_weapon_names.PushBack('ACS_Great_Axe_2');
		steel_weapon_names.PushBack('ACS_Wild_Hunt_Axe_1');
		steel_weapon_names.PushBack('ACS_Dwarven_Axe');
		steel_weapon_names.PushBack('ACS_Dwarven_Hammer');
		steel_weapon_names.PushBack('ACS_Twohanded_Hammer_1');
		steel_weapon_names.PushBack('ACS_Twohanded_Hammer_2');
		steel_weapon_names.PushBack('ACS_Wild_Hunt_Hammer');
		steel_weapon_names.PushBack('ACS_Hatchet');
		steel_weapon_names.PushBack('ACS_Small_Blackjack');
		steel_weapon_names.PushBack('ACS_Club');
		steel_weapon_names.PushBack('ACS_Blackjack');
		steel_weapon_names.PushBack('ACS_Poker');
		steel_weapon_names.PushBack('ACS_Staff');
		steel_weapon_names.PushBack('ACS_Lucerne_Hammer');
		steel_weapon_names.PushBack('ACS_Wand');
		steel_weapon_names.PushBack('ACS_Oar');
		steel_weapon_names.PushBack('ACS_Pickaxe');
		steel_weapon_names.PushBack('ACS_Shovel');
		steel_weapon_names.PushBack('ACS_Broom');
		steel_weapon_names.PushBack('ACS_Paling');
		steel_weapon_names.PushBack('ACS_Pitchfork');
		steel_weapon_names.PushBack('ACS_Rake');
		steel_weapon_names.PushBack('ACS_Scoop');
		steel_weapon_names.PushBack('ACS_Scythe');
		steel_weapon_names.PushBack('ACS_Shepherd_Stick');
		steel_weapon_names.PushBack('ACS_Gregoire_Sword');
		steel_weapon_names.PushBack('ACS_Nazairi_Mace');
		steel_weapon_names.PushBack('ACS_Hakland_Spear');
		steel_weapon_names.PushBack('ACS_Imlerith_Mace');
		steel_weapon_names.PushBack('ACS_Eredin_Sword');
		steel_weapon_names.PushBack('ACS_Caranthir_Staff');
		steel_weapon_names.PushBack('ACS_Wild_Hunt_Axe_2');
		//steel_weapon_names.PushBack('ACS_Giant_Weapon_1');
		steel_weapon_names.PushBack('ACS_Giant_Weapon_2');
		steel_weapon_names.PushBack('ACS_Giant_Weapon_3');
		//steel_weapon_names.PushBack('ACS_Knight_Lance_1');
		//steel_weapon_names.PushBack('ACS_Knight_Lance_2');
		steel_weapon_names.PushBack('ACS_Zoltan_Axe');
	}

	function fill_acs_silver_weapons_array()
	{
		silver_weapon_names.Clear();

		silver_weapon_names.PushBack('ACS_Spear_1_Silver');
		silver_weapon_names.PushBack('ACS_Spear_2_Silver');
		silver_weapon_names.PushBack('ACS_Wild_Hunt_Spear_Silver');
		silver_weapon_names.PushBack('ACS_Halberd_1_Silver');
		silver_weapon_names.PushBack('ACS_Halberd_2_Silver');
		silver_weapon_names.PushBack('ACS_Wild_Hunt_Halberd_Silver');
		silver_weapon_names.PushBack('ACS_Guisarme_1_Silver');
		silver_weapon_names.PushBack('ACS_Guisarme_2_Silver');
		silver_weapon_names.PushBack('ACS_Long_Metal_Pole_Silver');
		silver_weapon_names.PushBack('ACS_Great_Axe_1_Silver');
		silver_weapon_names.PushBack('ACS_Great_Axe_2_Silver');
		silver_weapon_names.PushBack('ACS_Wild_Hunt_Axe_1_Silver');
		silver_weapon_names.PushBack('ACS_Twohanded_Hammer_1_Silver');
		silver_weapon_names.PushBack('ACS_Twohanded_Hammer_2_Silver');
		silver_weapon_names.PushBack('ACS_Wild_Hunt_Hammer_Silver');
		silver_weapon_names.PushBack('ACS_Gregoire_Sword_Silver');
		silver_weapon_names.PushBack('ACS_Hakland_Spear_Silver');
		silver_weapon_names.PushBack('ACS_Imlerith_Mace_Silver');
		silver_weapon_names.PushBack('ACS_Eredin_Sword_Silver');
		silver_weapon_names.PushBack('ACS_Caranthir_Staff_Silver');
		//weapon_names.PushBack('ACS_Giant_Weapon_1_Silver');
		silver_weapon_names.PushBack('ACS_Giant_Weapon_2_Silver');
		silver_weapon_names.PushBack('ACS_Giant_Weapon_3_Silver');
		//silver_weapon_names.PushBack('ACS_Knight_Lance_1_Silver');
		//silver_weapon_names.PushBack('ACS_Knight_Lance_2_Silver');
		silver_weapon_names.PushBack('ACS_Zoltan_Axe_Silver');
	}

	function ACS_Add_Weapons_To_Inventory(action: W3DamageAction)
	{
		fill_acs_steel_weapons_array();

		fill_acs_silver_weapons_array();

		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		if ( playerAttacker && npc && !npc.HasTag('ACS_Add_Weapon_To_Inventory') && ACS_GetWeaponMode() == 3 )
		{
			if (npc.IsMonster())
			{
				if( RandF() < 0.45 ) 
				{
					((CActor)npc).GetInventory().AddAnItem( silver_weapon_names[RandRange(silver_weapon_names.Size())] , 1 );
				}
			}
			else if (!npc.IsMonster())
			{
				if( RandF() < 0.75 ) 
				{
					((CActor)npc).GetInventory().AddAnItem( steel_weapon_names[RandRange(steel_weapon_names.Size())] , 1 );
				}
			}

			npc.AddTag('ACS_Add_Weapon_To_Inventory');
		}
	}

	function ACS_Add_Wolven_Fang(action: W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		if ( playerAttacker 
		&& npc 
		&& !npc.HasTag('ACS_Add_Wolven_Fang') 
		&& npc.GetReadableName() == "quests\sidequests\skellige\quest_files\sq201_curse\characters\sq201_morkvarg.w2ent"
		)
		{
			((CActor)npc).GetInventory().AddAnItem( 'acs_wolven_fang', 1 );

			npc.AddTag('ACS_Add_Wolven_Fang');
		}
	}

	function ACS_Weapon_Art_Effects(action: W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		damage_action = (W3Action_Attack)action;

		sword_dmg = action.GetDamageDealt();
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if (playerAttacker && npc && thePlayer.HasTag('ACS_Sparagmos_Active') )
		{
			ACS_Sparagmos_Damage();

			if (npc.UsesVitality()) 
			{ 
				damageMax = npc.GetStat( BCS_Vitality ) * 0.15; 
			} 
			else if (npc.UsesEssence()) 
			{ 
				damageMax = npc.GetStat( BCS_Essence ) * 0.15; 
			} 

			dmg = new W3DamageAction in theGame.damageMgr;
			
			dmg.Initialize(thePlayer, npc, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
			
			dmg.SetHitReactionType( EHRT_Heavy, true);

			dmg.SetIgnoreArmor(true);

			dmg.SetIgnoreImmortalityMode(false);

			dmg.SetForceExplosionDismemberment();

			dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

			dmg.AddEffectInfo( EET_Burning, 3 );
			
			if( !npc.IsImmuneToBuff( EET_HeavyKnockdown ) && !npc.IsImmuneToBuff( EET_Ragdoll ) && !npc.HasBuff( EET_HeavyKnockdown ) && !npc.HasBuff( EET_Ragdoll ) ) 
			{
				//dmg.AddEffectInfo( EET_HeavyKnockdown, 0.5 );
			}
				
			theGame.damageMgr.ProcessAction( dmg );
				
			delete dmg;	

			return;
		}

		if (playerAttacker && npc && thePlayer.HasTag('ACS_Storm_Spear_Active') )
		{
			thePlayer.SoundEvent("magic_man_sand_gust");

			ACS_Storm_Spear_Damage();

			if (npc.UsesVitality()) 
			{ 
				damageMax = npc.GetStat( BCS_Vitality ) * 0.15; 
			} 
			else if (npc.UsesEssence()) 
			{ 
				damageMax = npc.GetStat( BCS_Essence ) * 0.15; 
			} 

			dmg = new W3DamageAction in theGame.damageMgr;
			
			dmg.Initialize(thePlayer, npc, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
			
			dmg.SetHitReactionType( EHRT_Heavy, true);

			dmg.SetIgnoreArmor(true);

			dmg.SetIgnoreImmortalityMode(false);

			dmg.SetForceExplosionDismemberment();

			dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

			dmg.AddEffectInfo( EET_Confusion, 1 );

			dmg.AddEffectInfo( EET_Stagger, 1 );
				
			theGame.damageMgr.ProcessAction( dmg );
				
			delete dmg;	

			return;
		}
	}

	function Detonation_Weapon_Effects_Switch()
	{
		var vACS_Detonation_Weapon_Effects_Switch : cACS_Detonation_Weapon_Effects_Switch;
		vACS_Detonation_Weapon_Effects_Switch = new cACS_Detonation_Weapon_Effects_Switch in this;
				
		vACS_Detonation_Weapon_Effects_Switch.ACS_Detonation_Weapon_Effects_Switch_Engage();
	}

	function Passive_Weapon_Effects_Switch()
	{
		var vACS_Passive_Weapon_Effects_Switch : cACS_Passive_Weapon_Effects_Switch;
		vACS_Passive_Weapon_Effects_Switch = new cACS_Passive_Weapon_Effects_Switch in this;
				
		vACS_Passive_Weapon_Effects_Switch.ACS_Passive_Weapon_Effects_Switch_Engage();
	}

	function Drain_Energy()
	{
		var vACS_Drain_Energy : cACS_Drain_Energy;
		vACS_Drain_Energy = new cACS_Drain_Energy in this;
				
		vACS_Drain_Energy.ACS_Drain_Energy_Engage();
	}

	function Marker_Switch()
	{
		var vACS_Marker_Switch : cACS_Marker_Switch;
		vACS_Marker_Switch = new cACS_Marker_Switch in this;
		
		vACS_Marker_Switch.ACS_Marker_Switch_Engage();
	}

	function Aard_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		damage_action = (W3Action_Attack)action;

		sword_dmg = action.GetDamageDealt();
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if (playerAttacker && npc && thePlayer.HasTag('aard_sword_equipped') ) 
		{ 
			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("cmb_play_hit_heavy");
			
			//weapon_blood_fx();

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('aard_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					Drain_Energy();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Bleeding, 3 );

							dmg.AddEffectInfo( EET_Confusion, 0.5 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					ACS_AOE_Bloodarc_LVL_1();
					//ACS_AOE_Waterarc_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

					thePlayer.GainStat( BCS_Vitality, heal * 4 ); 
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('aard_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					Drain_Energy();

					actors.Clear();
						
					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{	
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Bleeding, 5 );

							dmg.AddEffectInfo( EET_Confusion, 0.75 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					ACS_AOE_Bloodarc_LVL_1();
					//ACS_AOE_Waterarc_LVL_1();

					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );

					thePlayer.GainStat( BCS_Vitality, heal * 8 ); 
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('aard_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					Drain_Energy();

					actors.Clear();
						
					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Bleeding, 10 );

							dmg.AddEffectInfo( EET_Confusion, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					ACS_AOE_Bloodarc_LVL_2();
					//ACS_AOE_Waterarc_LVL_2();

					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );

					thePlayer.GainStat( BCS_Vitality, heal * 16 ); 
				}
				else
				{							
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if (thePlayer.IsGuarded())
						{
							thePlayer.GainStat( BCS_Vitality, heal /4 ); 
						}
						else
						{
							thePlayer.GainStat( BCS_Vitality, heal/2 ); 
						}

						Passive_Weapon_Effects_Switch();
						aard_blade_trail();
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if (thePlayer.IsGuarded())
						{
							thePlayer.GainStat( BCS_Vitality, heal /2 ); 
						}
						else
						{
							thePlayer.GainStat( BCS_Vitality, heal ); 
						}

						Passive_Weapon_Effects_Switch();
						aard_blade_trail();
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if (thePlayer.IsGuarded())
						{
							thePlayer.GainStat( BCS_Vitality, heal ); 
						}
						else
						{
							thePlayer.GainStat( BCS_Vitality, heal * 2 ); 
						}

						Passive_Weapon_Effects_Switch();
						aard_blade_trail();
					}

					if( !npc.HasTag('aard_light_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('aard_light_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}	
	}

	function Aard_Secondary_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		damage_action = (W3Action_Attack)action;

		sword_dmg = action.GetDamageDealt();
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if (playerAttacker && npc && thePlayer.HasTag('aard_secondary_sword_equipped') )
		{ 
			theSound.SoundEvent("cmb_play_hit_heavy");

			thePlayer.IncreaseUninterruptedHitsCount();	
			
			//weapon_blood_fx();

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('aard_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Confusion, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					ACS_AOE_Waterpillar_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('aard_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Confusion, 2 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Sandpillar_LVL_2();
					ACS_AOE_Waterpillar_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('aard_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Confusion, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Sandpillar_LVL_3();
					ACS_AOE_Waterpillar_LVL_2();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('aard_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{									
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								aard_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' );						
							}
						}		
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								aard_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' );							
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								aard_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' );					
							}
						}
					}

					if( !npc.HasTag('aard_heavy_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('aard_heavy_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Yrden_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		damage_action = (W3Action_Attack)action;

		sword_dmg = action.GetDamageDealt();
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('yrden_sword_equipped') ) 
		{ 
			thePlayer.IncreaseUninterruptedHitsCount();	

			if ( ACS_GetWeaponMode() == 0 )
			{
				if ( ACS_GetArmigerModeWeaponType() == 0 )
				{
					theSound.SoundEvent("cmb_play_hit_heavy");
				}
				else if ( ACS_GetArmigerModeWeaponType() == 1 )
				{
					npc.SoundEvent("monster_knight_giant_cmb_weapon_hit_add", 'head');
				}
			}
			else if ( ACS_GetWeaponMode() == 1 )
			{
				if ( ACS_GetFocusModeWeaponType() == 0 )
				{
					theSound.SoundEvent("cmb_play_hit_heavy");
				}
				else if ( ACS_GetFocusModeWeaponType() == 1 )
				{
					npc.SoundEvent("monster_knight_giant_cmb_weapon_hit_add", 'head');
				}
			}
			else if ( ACS_GetWeaponMode() == 2 )
			{
				if ( ACS_GetHybridModeWeaponType() == 0 )
				{
					theSound.SoundEvent("cmb_play_hit_heavy");
				}
				else if ( ACS_GetHybridModeWeaponType() == 1 )
				{
					npc.SoundEvent("monster_knight_giant_cmb_weapon_hit_add", 'head');
				}
			}
			else if ( ACS_GetWeaponMode() == 3 )
			{
				if ( ACS_GetItem_Imlerith_Steel_FOR_SLICING() )
				{
					theSound.SoundEvent("cmb_play_hit_heavy");
				}
				else if ( ACS_GetItem_Imlerith_Steel_FOR_THUNKING() )
				{
					npc.SoundEvent("monster_knight_giant_cmb_weapon_hit_add", 'head');
				}
			}
			
			//weapon_blood_fx();
			
			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('yrden_heavy_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_YrdenHealthDrain, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					ACS_AOE_Magic_Missiles_LVL_1();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('yrden_heavy_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);
					for( i = 0; i < actors.Size(); i += 1 )
					{
						actortarget = (CActor)actors[i];

						dmg = new W3DamageAction in theGame.damageMgr;
						dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
						dmg.SetProcessBuffsIfNoDamage(true);
			
						dmg.AddEffectInfo( EET_YrdenHealthDrain, 2 );
			
						theGame.damageMgr.ProcessAction( dmg );
								
						delete dmg;	
					}
						
					//ACS_AOE_Magic_Missiles_LVL_2();
					ACS_AOE_Magic_Missiles_LVL_1();

					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('yrden_heavy_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_YrdenHealthDrain, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Magic_Missiles_LVL_3();
					ACS_AOE_Magic_Missiles_LVL_2();

					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{								
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								yrden_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								yrden_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Stagger ) && !npc.HasBuff( EET_Stagger ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								yrden_sword_trail();	
								npc.AddEffectDefault( EET_Stagger, npc, 'console' ); 							
							}
						}
					}

					if( !npc.HasTag('yrden_light_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('yrden_light_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Yrden_Secondary_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		damage_action = (W3Action_Attack)action;

		sword_dmg = action.GetDamageDealt();
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('yrden_secondary_sword_equipped')  ) 
		{ 
			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("monster_cloud_giant_cmb_weapon_hit_add", 'head');
			
			//weapon_blood_fx();
			
			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('yrden_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
							
							if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 1 );
							}
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					ACS_Yrden_Lightning_LVL_1();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('yrden_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);

							if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 2 );
							}
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_Yrden_Lightning_LVL_2();
					ACS_Yrden_Lightning_LVL_1();

					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('yrden_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);

							if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 3 );
							}
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_Yrden_Lightning_LVL_3();
					ACS_Yrden_Lightning_LVL_2();

					Remove_On_Hit_Tags();
					npc.RemoveTag('yrden_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{						
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_HeavyKnockdown ) && !npc.IsImmuneToBuff( EET_Ragdoll ) && !npc.HasBuff( EET_HeavyKnockdown ) && !npc.HasBuff( EET_Ragdoll ) ) 
							{ 
								Passive_Weapon_Effects_Switch();	
								yrden_secondary_sword_trail();	
								npc.AddEffectDefault( EET_HeavyKnockdown, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_HeavyKnockdown ) && !npc.IsImmuneToBuff( EET_Ragdoll ) && !npc.HasBuff( EET_HeavyKnockdown ) && !npc.HasBuff( EET_Ragdoll ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								yrden_secondary_sword_trail();	
								npc.AddEffectDefault( EET_HeavyKnockdown, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_HeavyKnockdown ) && !npc.IsImmuneToBuff( EET_Ragdoll ) && !npc.HasBuff( EET_HeavyKnockdown ) && !npc.HasBuff( EET_Ragdoll ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								yrden_secondary_sword_trail();	
								npc.AddEffectDefault( EET_HeavyKnockdown, npc, 'console' ); 							
							}
						}
					}
					
					if( !npc.HasTag('yrden_heavy_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('yrden_heavy_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Axii_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		damage_action = (W3Action_Attack)action;

		sword_dmg = action.GetDamageDealt();
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('axii_sword_equipped')  )
		{ 
			//ACS_Finisher_Internal();

			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("cmb_play_hit_heavy");
			
			//weapon_blood_fx();
			
			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('axii_heavy_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_SlowdownFrost, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					ACS_AOE_Ice_Spear_LVL_1();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('axii_heavy_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_SlowdownFrost, 2 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Ice_Spear_LVL_2();
					ACS_AOE_Ice_Spear_LVL_1();

					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('axii_heavy_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_SlowdownFrost, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Ice_Spear_LVL_3();
					ACS_AOE_Ice_Spear_LVL_2();

					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{		
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}

					if( !npc.HasTag('axii_light_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('axii_light_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		} 
	}

	function Axii_Secondary_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		damage_action = (W3Action_Attack)action;

		sword_dmg = action.GetDamageDealt();
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('axii_secondary_sword_equipped') )
		{
			//ACS_Finisher_Internal();

			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("cmb_play_hit_heavy");
			
			//weapon_blood_fx();

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('axii_light_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
					
							dmg.AddEffectInfo( EET_Frozen, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
					
					ACS_AOE_Freeze_LVL_1();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('axii_light_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
					
							dmg.AddEffectInfo( EET_Frozen, 2 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Freeze_LVL_2();
					ACS_AOE_Freeze_LVL_1();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('axii_light_attack_primer') ) 
				{
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
					
							dmg.AddEffectInfo( EET_Frozen, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Freeze_LVL_3();
					ACS_AOE_Freeze_LVL_2();
						
					Remove_On_Hit_Tags();
					npc.RemoveTag('axii_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{									
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_secondary_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_secondary_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_SlowdownFrost ) && !npc.HasBuff( EET_SlowdownFrost ) ) 
							{
								Passive_Weapon_Effects_Switch();
								axii_secondary_sword_trail();		
								npc.AddEffectDefault( EET_SlowdownFrost, npc, 'console' ); 							
							}
						}
					}
					
					if( !npc.HasTag('axii_heavy_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('axii_heavy_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Quen_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		damage_action = (W3Action_Attack)action;

		sword_dmg = action.GetDamageDealt();
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('quen_sword_equipped')  )
		{ 
			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("cmb_play_hit_heavy");
			
			//weapon_blood_fx();

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('quen_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Blindness, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					ACS_AOE_Sandstorm_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('quen_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();
						
					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Blindness, 2 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Sandstorm_LVL_2();
					ACS_AOE_Sandstorm_LVL_1();

					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('quen_heavy_attack_primer') 
				) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();
						
					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Blindness, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Sandstorm_LVL_3();
					ACS_AOE_Sandstorm_LVL_2();

					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_heavy_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{							
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Blindness ) && !npc.HasBuff( EET_Blindness ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								//quen_sword_glow();	
								quen_sword_trail();
								npc.AddEffectDefault( EET_Blindness, npc, 'console' ); 						
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Blindness ) && !npc.HasBuff( EET_Blindness ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								//quen_sword_glow();	
								quen_sword_trail();
								npc.AddEffectDefault( EET_Blindness, npc, 'console' ); 						
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Blindness ) && !npc.HasBuff( EET_Blindness ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								//quen_sword_glow();	
								quen_sword_trail();
								npc.AddEffectDefault( EET_Blindness, npc, 'console' ); 						
							}
						}
					}

					if( !npc.HasTag('quen_light_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('quen_light_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Quen_Secondary_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		damage_action = (W3Action_Attack)action;

		sword_dmg = action.GetDamageDealt();
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		if ( playerAttacker && npc && thePlayer.HasTag('quen_secondary_sword_equipped')  )
		{
			thePlayer.IncreaseUninterruptedHitsCount();	

			npc.SoundEvent("cmb_play_hit_heavy");

			//weapon_blood_fx();

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('quen_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Paralyzed, 1 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					ACS_AOE_Sandpillar_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if( curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('quen_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Paralyzed, 2 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Sandpillar_LVL_2();
					ACS_AOE_Sandpillar_LVL_1();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if( curAdrenaline == maxAdrenaline
				&& npc.HasTag('quen_light_attack_primer') ) 
				{	
					Detonation_Weapon_Effects_Switch();

					actors.Clear();

					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
				
							dmg.AddEffectInfo( EET_Paralyzed, 3 );
				
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}
						
					//ACS_AOE_Sandpillar_LVL_3();
					ACS_AOE_Sandpillar_LVL_2();
						
					Remove_On_Hit_Tags();
						
					npc.RemoveTag('quen_light_attack_primer');
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else
				{									
					if( curAdrenaline >= maxAdrenaline/3
					&& curAdrenaline < maxAdrenaline * 2/3)
					{
						if( RandF() < 0.0625 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Slowdown ) && !npc.HasBuff( EET_Slowdown ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								quen_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Slowdown, npc, 'console' ); 						
							}
						}
					}
					else if( curAdrenaline >= maxAdrenaline * 2/3
					&& curAdrenaline < maxAdrenaline)
					{
						if( RandF() < 0.125 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Slowdown ) && !npc.HasBuff( EET_Slowdown ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								quen_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Slowdown, npc, 'console' ); 						
							}
						}
					}
					else if( curAdrenaline == maxAdrenaline ) 
					{
						if( RandF() < 0.25 ) 
						{ 
							if( !npc.IsImmuneToBuff( EET_Slowdown ) && !npc.HasBuff( EET_Slowdown ) ) 
							{ 	
								Passive_Weapon_Effects_Switch();
								quen_secondary_sword_trail();	
								npc.AddEffectDefault( EET_Slowdown, npc, 'console' ); 						
							}
						}
					}

					if( !npc.HasTag('quen_heavy_attack_primer') ) 
					{
						Marker_Switch();
						npc.AddTag('quen_heavy_attack_primer');
					}
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Igni_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		if ( playerAttacker && npc && thePlayer.HasTag('igni_sword_equipped_TAG') ) 
		{ 
			actortarget.SoundEvent("cmb_play_hit_heavy");

			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( !npc.HasTag('igni_light_attack_primer') ) 
				{
					Passive_Weapon_Effects_Switch();
					Marker_Switch();
					npc.AddTag('igni_light_attack_primer');
				}
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function Igni_Secondary_Sword_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;
	
		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);

		if ( playerAttacker && npc && thePlayer.HasTag('igni_secondary_sword_equipped_TAG') )
		{	
			actortarget.SoundEvent("cmb_play_hit_heavy");
			
			if (ACS_OnHitEffects_Enabled()
			&& ACS_GetWeaponMode() == 0)
			{
				if( curAdrenaline >= maxAdrenaline/3
				&& curAdrenaline < maxAdrenaline * 2/3
				&& npc.HasTag('igni_light_attack_primer'))
				{
					Detonation_Weapon_Effects_Switch();
							
					npc.OnIgniHit( NULL );

					actors.Clear();
							
					actors = thePlayer.GetNPCsAndPlayersInRange( 1.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
									
							dmg.SetForceExplosionDismemberment();
									
							dmg.AddEffectInfo( EET_Burning, 1 );
									
							dmg.AddEffectInfo( EET_Stagger, 1 );
									
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					ACS_AOE_Igni_Blast_LVL_1();
							
					Remove_On_Hit_Tags();
					//PrimerMarkDestroy();
					npc.RemoveTag('igni_light_attack_primer');
						
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
				}
				else if (curAdrenaline >= maxAdrenaline * 2/3
				&& curAdrenaline < maxAdrenaline
				&& npc.HasTag('igni_light_attack_primer'))
				{
					Detonation_Weapon_Effects_Switch();
							
					npc.OnIgniHit( NULL );

					actors.Clear();
							
					actors = thePlayer.GetNPCsAndPlayersInRange( 2.5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
									
							dmg.SetForceExplosionDismemberment();
									
							dmg.AddEffectInfo( EET_Burning, 2 );

							if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 2 );
							}		
		
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Igni_Blast_LVL_2();
					ACS_AOE_Igni_Blast_LVL_1();

					Remove_On_Hit_Tags();
					//PrimerMarkDestroy();
					npc.RemoveTag('igni_light_attack_primer');
						
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				else if (curAdrenaline == maxAdrenaline 
				&& npc.HasTag('igni_light_attack_primer'))
				{
					Detonation_Weapon_Effects_Switch();
							
					npc.OnIgniHit( NULL );

					actors.Clear();
							
					actors = thePlayer.GetNPCsAndPlayersInRange( 5, 100, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

					if( actors.Size() > 0 )
					{
						for( i = 0; i < actors.Size(); i += 1 )
						{
							actortarget = (CActor)actors[i];

							dmg = new W3DamageAction in theGame.damageMgr;
							dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_None, CPS_Undefined, false, false, true, false);
							dmg.SetProcessBuffsIfNoDamage(true);
									
							dmg.SetForceExplosionDismemberment();
									
							dmg.AddEffectInfo( EET_Burning, 3 );
							
							if( !actortarget.IsImmuneToBuff( EET_HeavyKnockdown ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
							{
								dmg.AddEffectInfo( EET_HeavyKnockdown, 3 );
							}
									
							theGame.damageMgr.ProcessAction( dmg );
									
							delete dmg;	
						}
					}

					//ACS_AOE_Igni_Blast_LVL_3();
					ACS_AOE_Igni_Blast_LVL_2();

					Remove_On_Hit_Tags();
					//PrimerMarkDestroy();
					npc.RemoveTag('igni_light_attack_primer');
						
					thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3 );
				}
				/*
				else
				{
					Passive_Weapon_Effects_Switch();
				}
				*/
			}
			else
			{
				Passive_Weapon_Effects_Switch();
			}

			return;
		}
	}

	function ACS_Finisher_Or_Dismember (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;
		
		if (playerAttacker && npc &&
		( 
		thePlayer.HasTag('axii_sword_equipped') 
		|| thePlayer.HasTag('axii_secondary_sword_equipped') 
		|| thePlayer.HasTag('quen_sword_equipped') 
		) 
		)
		{
			if (npc.UsesVitality() && npc.IsHuman())
			{
				if (((CNewNPC)npc).GetNPCType() == ENGT_Guard
				|| npc.IsWoman())
				{
					ACS_Dismember_Internal();
				}
				else
				{
					ACS_Finisher_Internal();
				}	
			}
			else
			{
				if (npc.HasTag('ACS_Wild_Hunt_Rider')
				|| npc.HasTag('ACS_caretaker_shade'))
				{
					ACS_Dismember_Internal();
				}
				else
				{
					if (ACS_ExperimentalDismemberment_Enabled())
					{
						ACS_Dismember_Internal();
					}
				}
			}	
		}
	
		if (playerAttacker 
		&& npc 
		&& 
		( 
		thePlayer.HasTag('igni_sword_equipped') 
		|| thePlayer.HasTag('igni_secondary_sword_equipped') 
		|| thePlayer.HasTag('igni_sword_equipped_TAG') 
		|| thePlayer.HasTag('igni_secondary_sword_equipped_TAG') 
		) 
		)
		{
			if (thePlayer.HasTag('ACS_In_Ciri_Special_Attack'))
			{
				ACS_Dismember_Internal();
			}
			else
			{
				if (npc.UsesVitality() && npc.IsHuman())
				{
					if (((CNewNPC)npc).GetNPCType() == ENGT_Guard
					|| npc.IsWoman())
					{
						ACS_Dismember_Internal();
					}
					else
					{
						if( theGame.GetInGameConfigWrapper().GetVarValue( 'Gameplay', 'AutomaticFinishersEnabled' ) == "true" )
						{
							if (!npc.HasTag('ACS_Final_Fear_Stack'))
							{
								ACS_Finisher_Internal();
							}
						}
						else
						{
							if (ACS_ExperimentalDismemberment_Enabled())
							{
								ACS_Dismember_Internal();
							}
						}
					}
				}
				else
				{
					if (npc.HasTag('ACS_Wild_Hunt_Rider')
					|| npc.HasTag('ACS_caretaker_shade'))
					{
						ACS_Dismember_Internal();
					}
					else
					{
						if (ACS_ExperimentalDismemberment_Enabled())
						{
							ACS_Dismember_Internal();
						}
					}
				}
			}
		}

		if 
		(playerAttacker && npc &&
		( 
		thePlayer.HasTag('aard_sword_equipped') 
		|| thePlayer.HasTag('aard_secondary_sword_equipped') 
		|| thePlayer.HasTag('quen_secondary_sword_equipped') 
		|| thePlayer.HasTag('yrden_sword_equipped') 
		|| thePlayer.HasTag('yrden_secondary_sword_equipped') 
		)
		)
		{
			if (ACS_ExperimentalDismemberment_Enabled())
			{
				ACS_Dismember_Internal();
			}
		}

		if 
		(playerAttacker && npc &&
		( 
		thePlayer.HasTag('vampire_claws_equipped')
		)
		)
		{
			ACS_Dismember_Internal();
		}
	}
	
	function ACS_Shadow_Dash_On_Hit_Effects (action : W3DamageAction)
	{
		npc = (CActor)action.victim;

		playerAttacker = (CPlayer)action.attacker;

		npcPos = npc.GetWorldPosition();

		npcRot = npc.GetWorldRotation();
		
		curTargetVitality = npc.GetStat( BCS_Vitality );

		maxTargetVitality = npc.GetStatMax( BCS_Vitality );
		
		curTargetEssence = npc.GetStat( BCS_Essence );

		maxTargetEssence = npc.GetStatMax( BCS_Essence );

		maxAdrenaline = thePlayer.GetStatMax(BCS_Focus);
		
		curAdrenaline = thePlayer.GetStat(BCS_Focus);
		
		damage_action = (W3Action_Attack)action;

		sword_dmg = action.GetDamageDealt();
		
		targetRotationNPC = npc.GetWorldRotation();
		targetRotationNPC.Yaw = RandRangeF(360,1);
		targetRotationNPC.Pitch = RandRangeF(45,-45);
		
		playerVitality = thePlayer.GetStatMax( BCS_Vitality );
		
		heal = playerVitality * 0.025;

		if ( playerAttacker && npc && thePlayer.HasTag('ACS_Shadow_Dash_Empowered') )
		{
			actors.Clear();

			actors = thePlayer.GetNPCsAndPlayersInCone(2.5, VecHeading(thePlayer.GetHeadingVector()), 360, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

			if( actors.Size() > 0 )
			{
				for( i = 0; i < actors.Size(); i += 1 )
				{
					actortarget = (CActor)actors[i];

					actortarget.SoundEvent("cmb_play_hit_heavy");

					//damageMax = maxTargetVitality * 1/30; 

					dmg = new W3DamageAction in theGame.damageMgr;
					
					dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
					
					dmg.SetProcessBuffsIfNoDamage(true);
					
					dmg.SetHitReactionType( EHRT_Heavy, true);
					
					//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

					if( !actortarget.IsImmuneToBuff( EET_Stagger ) ) 
					{ 
						if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
						{
							if (thePlayer.HasTag('ACS_Shadowstep_Long_Buff'))
							{
								dmg.AddEffectInfo( EET_Stagger, 1 );
							}
							else
							{
								dmg.AddEffectInfo( EET_Stagger, 0.5 );
							}
						}
						else
						{
							if( !actortarget.IsImmuneToBuff( EET_Bleeding ) ) 
							{ 
								dmg.AddEffectInfo( EET_Bleeding, 3 );
							}
						}	
					}
						
					theGame.damageMgr.ProcessAction( dmg );
						
					delete dmg;	
				}
			}

			thePlayer.RemoveTag('ACS_Shadowstep_Long_Buff');

			thePlayer.RemoveTag('ACS_Shadow_Dash_Empowered');

			return;
		}
		else if ( playerAttacker && npc && (thePlayer.HasTag('yrden_sword_equipped') || thePlayer.HasTag('yrden_secondary_sword_equipped')) )
		{
			actors.Clear();

			actors = thePlayer.GetNPCsAndPlayersInCone(2.5, VecHeading(thePlayer.GetHeadingVector()), 360, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

			if( actors.Size() > 1 )
			{
				for( i = 0; i < actors.Size(); i += 1 )
				{
					actortarget = (CActor)actors[i];

					actortarget.SoundEvent("cmb_play_hit_heavy");

					//damageMax = maxTargetVitality * 1/30; 

					dmg = new W3DamageAction in theGame.damageMgr;
					
					dmg.Initialize(thePlayer, actortarget, thePlayer, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
					
					dmg.SetProcessBuffsIfNoDamage(true);
					
					dmg.SetHitReactionType( EHRT_Heavy, true);
					
					//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, damageMax );

					if( !actortarget.IsImmuneToBuff( EET_Stagger ) ) 
					{ 
						if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.IsImmuneToBuff( EET_Ragdoll ) && !actortarget.HasBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Ragdoll ) ) 
						{
							dmg.AddEffectInfo( EET_Stagger, 0.5 );
						}
						else
						{
							if( !actortarget.IsImmuneToBuff( EET_Bleeding ) ) 
							{ 
								dmg.AddEffectInfo( EET_Bleeding, 3 );
							}
						}	
					}
						
					theGame.damageMgr.ProcessAction( dmg );
						
					delete dmg;	
				}
			}

			return;
		}
	}

	function Blood_Spatter_Switch()
	{
		var vACS_Blood_Spatter_Switch : cACS_Blood_Spatter_Switch;
		vACS_Blood_Spatter_Switch = new cACS_Blood_Spatter_Switch in this;
				
		vACS_Blood_Spatter_Switch.ACS_Blood_Spatter_Switch_Engage();
	}
	
	function ACS_On_Hit_Effects (action : W3DamageAction)
	{	
		NPC_Death_Effects(action);

		ACS_Shadow_Dash_On_Hit_Effects(action);

		ACS_Add_Weapons_To_Inventory(action);

		ACS_Add_Wolven_Fang(action);

		ACS_Weapon_Art_Effects(action);

		ACS_Finisher_Or_Dismember(action);

		if (action.WasDodged() 
		|| action.IsDoTDamage() 
		|| !action.IsActionMelee()
		|| !action.DealtDamage()
		|| (((W3Action_Attack)action).IsParried())
		)
		{
			thePlayer.ResetUninterruptedHitsCount();
			return;
		}
		else
		{
			NPC_BloodCovered_Effect(action);

			Blood_Spatter_Switch();

			Aard_Sword_On_Hit_Effects(action);

			Aard_Secondary_Sword_On_Hit_Effects(action);

			Yrden_Sword_On_Hit_Effects(action);

			Yrden_Secondary_Sword_On_Hit_Effects(action);

			Axii_Sword_On_Hit_Effects(action);

			Axii_Secondary_Sword_On_Hit_Effects(action);

			Quen_Sword_On_Hit_Effects(action);

			Quen_Secondary_Sword_On_Hit_Effects(action);

			Igni_Sword_On_Hit_Effects(action);

			Igni_Secondary_Sword_On_Hit_Effects(action);
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function Gerry_Death_Scene_Actual()
	{
		var playerPos, newPlayerPos			: Vector;

		if (ACS_Transformation_Werewolf_Check())
		{
			DisableWerewolf();
		}

		playerPos = TraceFloor(thePlayer.GetWorldPosition());

		if( !theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 0.3 , newPlayerPos ) )
		{
			theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 4 , newPlayerPos );
			playerPos = newPlayerPos;
		}

		thePlayer.TeleportWithRotation(TraceFloor(playerPos), thePlayer.GetWorldRotation());

		thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Signs, 				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Death_Scene'); 
		thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Fists, 				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Jump,				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Dodge,				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Roll,				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Parry,				'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Movement,			'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Death_Scene');
		thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Death_Scene');

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} 
		
		RemoveTimer('Manual_Combat_Control_Remove');

		thePlayer.GetMovingAgentComponent().GetMovementAdjustor().CancelAll();

		thePlayer.BreakAttachment();

		thePlayer.StopEffect('blood');
		thePlayer.StopEffect('death_blood');
		thePlayer.StopEffect('heavy_hit');
		thePlayer.StopEffect('light_hit');
		thePlayer.StopEffect('blood_spill');
		thePlayer.StopEffect('fistfight_heavy_hit');
		thePlayer.StopEffect('heavy_hit_horseriding');
		thePlayer.StopEffect('fistfight_hit');
		thePlayer.StopEffect('critical hit');
		thePlayer.StopEffect('death_hit');
		thePlayer.StopEffect('blood_throat_cut');
		thePlayer.StopEffect('hit_back');
		thePlayer.StopEffect('standard_hit');
		thePlayer.StopEffect('critical_bleeding'); 
		thePlayer.StopEffect('fistfight_hit_back'); 
		thePlayer.StopEffect('heavy_hit_back'); 
		thePlayer.StopEffect('light_hit_back'); 

		thePlayer.PlayEffect('blood');
		thePlayer.PlayEffect('death_blood');
		thePlayer.PlayEffect('heavy_hit');
		thePlayer.PlayEffect('light_hit');
		thePlayer.PlayEffect('blood_spill');
		thePlayer.PlayEffect('fistfight_heavy_hit');
		thePlayer.PlayEffect('heavy_hit_horseriding');
		thePlayer.PlayEffect('fistfight_hit');
		thePlayer.PlayEffect('critical hit');
		thePlayer.PlayEffect('death_hit');
		thePlayer.PlayEffect('blood_throat_cut');
		thePlayer.PlayEffect('hit_back');
		thePlayer.PlayEffect('standard_hit');
		thePlayer.PlayEffect('critical_bleeding'); 
		thePlayer.PlayEffect('fistfight_hit_back'); 
		thePlayer.PlayEffect('heavy_hit_back'); 
		thePlayer.PlayEffect('light_hit_back'); 

		thePlayer.StopEffect('blood');
		thePlayer.StopEffect('death_blood');
		thePlayer.StopEffect('heavy_hit');
		thePlayer.StopEffect('light_hit');
		thePlayer.StopEffect('blood_spill');
		thePlayer.StopEffect('fistfight_heavy_hit');
		thePlayer.StopEffect('heavy_hit_horseriding');
		thePlayer.StopEffect('fistfight_hit');
		thePlayer.StopEffect('critical hit');
		thePlayer.StopEffect('death_hit');
		thePlayer.StopEffect('blood_throat_cut');
		thePlayer.StopEffect('hit_back');
		thePlayer.StopEffect('standard_hit');
		thePlayer.StopEffect('critical_bleeding'); 
		thePlayer.StopEffect('fistfight_hit_back'); 
		thePlayer.StopEffect('heavy_hit_back'); 
		thePlayer.StopEffect('light_hit_back'); 

		thePlayer.PlayEffect('blood');
		thePlayer.PlayEffect('death_blood');
		thePlayer.PlayEffect('heavy_hit');
		thePlayer.PlayEffect('light_hit');
		thePlayer.PlayEffect('blood_spill');
		thePlayer.PlayEffect('fistfight_heavy_hit');
		thePlayer.PlayEffect('heavy_hit_horseriding');
		thePlayer.PlayEffect('fistfight_hit');
		thePlayer.PlayEffect('critical hit');
		thePlayer.PlayEffect('death_hit');
		thePlayer.PlayEffect('blood_throat_cut');
		thePlayer.PlayEffect('hit_back');
		thePlayer.PlayEffect('standard_hit');
		thePlayer.PlayEffect('critical_bleeding'); 
		thePlayer.PlayEffect('fistfight_hit_back'); 
		thePlayer.PlayEffect('heavy_hit_back'); 
		thePlayer.PlayEffect('light_hit_back'); 

		thePlayer.StopEffect('blood');
		thePlayer.StopEffect('death_blood');
		thePlayer.StopEffect('heavy_hit');
		thePlayer.StopEffect('light_hit');
		thePlayer.StopEffect('blood_spill');
		thePlayer.StopEffect('fistfight_heavy_hit');
		thePlayer.StopEffect('heavy_hit_horseriding');
		thePlayer.StopEffect('fistfight_hit');
		thePlayer.StopEffect('critical hit');
		thePlayer.StopEffect('death_hit');
		thePlayer.StopEffect('blood_throat_cut');
		thePlayer.StopEffect('hit_back');
		thePlayer.StopEffect('standard_hit');
		thePlayer.StopEffect('critical_bleeding'); 
		thePlayer.StopEffect('fistfight_hit_back'); 
		thePlayer.StopEffect('heavy_hit_back'); 
		thePlayer.StopEffect('light_hit_back'); 

		thePlayer.PlayEffect('blood');
		thePlayer.PlayEffect('death_blood');
		thePlayer.PlayEffect('heavy_hit');
		thePlayer.PlayEffect('light_hit');
		thePlayer.PlayEffect('blood_spill');
		thePlayer.PlayEffect('fistfight_heavy_hit');
		thePlayer.PlayEffect('heavy_hit_horseriding');
		thePlayer.PlayEffect('fistfight_hit');
		thePlayer.PlayEffect('critical hit');
		thePlayer.PlayEffect('death_hit');
		thePlayer.PlayEffect('blood_throat_cut');
		thePlayer.PlayEffect('hit_back');
		thePlayer.PlayEffect('standard_hit');
		thePlayer.PlayEffect('critical_bleeding'); 
		thePlayer.PlayEffect('fistfight_hit_back'); 
		thePlayer.PlayEffect('heavy_hit_back'); 
		thePlayer.PlayEffect('light_hit_back');

		thePlayer.StopEffect('blood');
		thePlayer.StopEffect('death_blood');
		thePlayer.StopEffect('heavy_hit');
		thePlayer.StopEffect('light_hit');
		thePlayer.StopEffect('blood_spill');
		thePlayer.StopEffect('fistfight_heavy_hit');
		thePlayer.StopEffect('heavy_hit_horseriding');
		thePlayer.StopEffect('fistfight_hit');
		thePlayer.StopEffect('critical hit');
		thePlayer.StopEffect('death_hit');
		thePlayer.StopEffect('blood_throat_cut');
		thePlayer.StopEffect('hit_back');
		thePlayer.StopEffect('standard_hit');
		thePlayer.StopEffect('critical_bleeding'); 
		thePlayer.StopEffect('fistfight_hit_back'); 
		thePlayer.StopEffect('heavy_hit_back'); 
		thePlayer.StopEffect('light_hit_back'); 

		thePlayer.PlayEffect('blood');
		thePlayer.PlayEffect('death_blood');
		thePlayer.PlayEffect('heavy_hit');
		thePlayer.PlayEffect('light_hit');
		thePlayer.PlayEffect('blood_spill');
		thePlayer.PlayEffect('fistfight_heavy_hit');
		thePlayer.PlayEffect('heavy_hit_horseriding');
		thePlayer.PlayEffect('fistfight_hit');
		thePlayer.PlayEffect('critical hit');
		thePlayer.PlayEffect('death_hit');
		thePlayer.PlayEffect('blood_throat_cut');
		thePlayer.PlayEffect('hit_back');
		thePlayer.PlayEffect('standard_hit');
		thePlayer.PlayEffect('critical_bleeding'); 
		thePlayer.PlayEffect('fistfight_hit_back'); 
		thePlayer.PlayEffect('heavy_hit_back'); 
		thePlayer.PlayEffect('light_hit_back');

		thePlayer.StopEffect('covered_blood_red_ACS');
		thePlayer.PlayEffect('covered_blood_red_ACS');

		if( RandF() < 0.5 ) 
        { 
			scene = (CStoryScene)(LoadResource("dlc\dlc_acs\data\scenes\mq1060_03a_geralt_dead.w2scene", true));
		}
		else
		{
			if( RandF() < 0.5 ) 
        	{
				scene = (CStoryScene)(LoadResource("dlc\dlc_acs\data\scenes\mq1060_03a_geralt_dead_1_hand_wounded_knockdown.w2scene", true));
			}
			else
			{
				scene = (CStoryScene)(LoadResource("dlc\dlc_acs\data\scenes\mq1060_03a_geralt_dead_throat_cut.w2scene", true));
			}
		}
					
		theGame.GetStorySceneSystem().PlayScene(scene, "Input");

		RemoveTimer('KillGerry' );
		AddTimer('KillGerry', 6, false);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function shield_play_anim()
	{
		RemoveTimer('ACS_ShieldEntityDamage');

		RemoveTimer('ACS_ShieldEntityDamage_2');

		RemoveTimer('ACS_ShieldEntityDamageShort');

		shieldAnimatedComponent = (CAnimatedComponent)ACS_Shield_Entity().GetComponentByClassName( 'CAnimatedComponent' );	

		actor = (CActor)( thePlayer.GetDisplayTarget() );

		shieldMovementAdjustor = ((CMovingPhysicalAgentComponent)ACS_Shield_Entity().GetMovingAgentComponent()).GetMovementAdjustor();

		shieldMovementAdjustor.CancelAll();
		
		shieldTicket = shieldMovementAdjustor.CreateNewRequest( 'ACS_Shield_Movement_Adjust' );

		shieldMovementAdjustor.AdjustmentDuration( shieldTicket, 0.25 );
		//shieldMovementAdjustor.ShouldStartAt(shieldTicket, ACS_Shield_Entity().GetWorldPosition());
		shieldMovementAdjustor.MaxRotationAdjustmentSpeed( shieldTicket, 50000 );
		shieldMovementAdjustor.MaxLocationAdjustmentSpeed( shieldTicket, 50000 );
		//shieldMovementAdjustor.AdjustLocationVertically( shieldTicket, true );
		//shieldMovementAdjustor.ScaleAnimationLocationVertically( shieldTicket, true );

		shieldMovementAdjustor.RotateTo( shieldTicket, VecHeading(thePlayer.GetHeadingVector()) );

		acs_shield_attack_index_1 = RandDifferent(this.previous_acs_shield_attack_index_1 , 7);

		switch (acs_shield_attack_index_1) 
		{	
			case 6:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			AddTimer('ACS_ShieldEntityDamage_2', 1.25, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_counter_attack', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f) );
			break;

			case 5:
			AddTimer('ACS_ShieldEntityDamageShort', 0.5, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_back', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;

			case 4:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_right_swing', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;
				
			case 3:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_right', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;

			case 2:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_left_swing', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;	
				
			case 1:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_left', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;

			default:
			AddTimer('ACS_ShieldEntityDamage', 0.75, false);

			shieldAnimatedComponent.PlaySlotAnimationAsync ( 'monster_lessun_attack_center', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.9f, 1.0f));
			break;
		}
			
		this.previous_acs_shield_attack_index_1 = acs_shield_attack_index_1;

		/*
		ACS_Shield_Entity().StopEffect('yrden_shock');
		ACS_Shield_Entity().PlayEffectSingle('yrden_shock');

		ACS_Shield_Entity().StopEffect('yrden_slowdown');
		ACS_Shield_Entity().PlayEffectSingle('yrden_slowdown');

		ACS_Shield_Entity().StopEffect('yrden_paralysis');
		ACS_Shield_Entity().PlayEffectSingle('yrden_paralysis');

		ACS_Shield_Entity().PlayEffectSingle('demonic_possession');
		ACS_Shield_Entity().StopEffect('demonic_possession');
		*/
	}

	function ShieldEntityDamageActual()
	{
		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(6, VecHeading(thePlayer.GetHeadingVector()), 90, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

				actortarget = (CActor)actors[i];

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.SetIgnoreImmortalityMode(false);
				
				//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.20; 

					damageMin = maxTargetVitality * 0.145; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.225; 
					
					damageMin = maxTargetEssence * 0.145; 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Stagger ) ) 
				{ 
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");
			}
		}
	}

	function ShieldEntityDamageShortActual()
	{
		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(4, VecHeading(thePlayer.GetHeadingVector()), 60, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

				actortarget = (CActor)actors[i];

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.SetIgnoreImmortalityMode(false);
				
				//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.20; 

					damageMin = maxTargetVitality * 0.145; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.225; 
					
					damageMin = maxTargetEssence * 0.145; 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				if( !actortarget.IsImmuneToBuff( EET_Stagger ) && !actortarget.HasBuff( EET_Stagger ) ) 
				{ 
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function FinisherCheck() : bool
	{
		if ( thePlayer.IsPerformingFinisher() 
		|| thePlayer.HasTag('ACS_IsPerformingFinisher')
		|| thePlayer.IsCrossbowHeld() 
		|| !ACS_BuffCheck())
		{
			return false;
		}
		else
		{
			return true;
		}
	}
	
	function CiriCheck() : bool
	{
		if ( thePlayer.IsCiri() )
		{
			return false;
		}
		else
		{
			return true;
		}
	}

	function WraithModeCheck() : bool
	{
		if ( thePlayer.HasTag('in_wraith') )
		{
			return false;
		}
		else
		{
			return true;
		}
	}

	function BruxaBiteCheck() : bool
	{
		if ( thePlayer.HasTag('blood_sucking') )
		{
			return false;
		}
		else
		{
			return true;
		}
	}

	function HitAnimCheck() : bool
	{
		if ( thePlayer.IsInHitAnim() )
		{
			return false;
		}
		else
		{
			return true;
		}
	}

	function StaminaCheck() : bool
	{
		if ( thePlayer.GetStat( BCS_Stamina ) <= thePlayer.GetStatMax( BCS_Stamina ) * 0.15 )
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	function VampireClawsStaminaCheck() : bool
	{
		if ( thePlayer.GetStat( BCS_Stamina ) <= thePlayer.GetStatMax( BCS_Stamina ) * 0.05 )
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	function FinisherDistanceCheck(finisherActor : CActor) : bool
	{
		if ( VecDistanceSquared2D( thePlayer.GetWorldPosition(), finisherActor.GetNearestPointInBothPersonalSpaces( thePlayer.GetWorldPosition() ) ) < 2.75f * 2.75f
		&& ( thePlayer.HasTag('axii_sword_equipped') 
		|| thePlayer.HasTag('axii_secondary_sword_equipped') 
		|| thePlayer.HasTag('quen_sword_equipped') 
		|| thePlayer.HasTag('igni_sword_equipped') 
		|| thePlayer.HasTag('igni_secondary_sword_equipped'))
		)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ACS_Setup_Light_Attack_Internal()
	{
		vACS_Setup_Combat_Action_Light = new cACS_Setup_Combat_Action_Light in this; 
		
		vACS_Setup_Combat_Action_Light.Setup_Combat_Action_Light_Engage();
	}

	function ACS_Setup_Heavy_Attack_Internal()
	{
		vACS_Setup_Combat_Action_Heavy = new cACS_Setup_Combat_Action_Heavy in this; 
		
		vACS_Setup_Combat_Action_Heavy.Setup_Combat_Action_Heavy_Engage();
	}

	function ClawFistLightAttack()
	{
		if (thePlayer.IsActionAllowed(EIAB_LightAttacks)
		&& CiriCheck() 
		&& FinisherCheck()
		&& WraithModeCheck() 
		&& BruxaBiteCheck()
		&& HitAnimCheck())
		{
			DeactivateThings();

			ACS_ThingsThatShouldBeRemoved();

			if (ACS_GetWeaponMode() == 0)
			{
				if (ACS_GetFistMode() == 0)
				{
					ACS_PrimaryWeaponSwitch();

					ACS_Setup_Combat_Action_Light();
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawLightAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					ACS_PrimaryWeaponSwitch();

					ShockwaveFistLightAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 1)
			{
				if (ACS_GetFistMode() == 0)
				{
					ACS_PrimaryWeaponSwitch();

					ACS_Setup_Combat_Action_Light();
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawLightAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					ACS_PrimaryWeaponSwitch();

					ShockwaveFistLightAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 2)
			{
				if (ACS_GetFistMode() == 0)
				{
					ACS_PrimaryWeaponSwitch();

					ACS_Setup_Combat_Action_Light();
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawLightAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					ACS_PrimaryWeaponSwitch();

					ShockwaveFistLightAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				if (ACS_GetItem_VampClaw() || ACS_GetItem_VampClaw_Shades())
				{
					VampClawLightAttack();
				}
				else
				{
					ACS_PrimaryWeaponSwitch();

					ACS_Setup_Combat_Action_Light();
				}
			}

			DeactivateThings();
		}
	}

	function ClawFistHeavyAttack()
	{
		if (thePlayer.IsActionAllowed(EIAB_HeavyAttacks)
		&& CiriCheck() 
		&& FinisherCheck()
		&& WraithModeCheck() 
		&& BruxaBiteCheck()
		&& HitAnimCheck())
		{
			DeactivateThings();

			ACS_ThingsThatShouldBeRemoved_NoBruxaTackleOrPortableAard();

			ACS_ExplorationDelayHack();

			RemoveTimer('ACS_ResetAnimation');
			RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

			if (ACS_GetWeaponMode() == 0)
			{
				if (ACS_GetFistMode() == 0)
				{
					ACS_PrimaryWeaponSwitch();

					ACS_Setup_Combat_Action_Heavy();	
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawHeavyAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					ACS_PrimaryWeaponSwitch();

					ShockwaveFistHeavyAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 1)
			{
				if (ACS_GetFistMode() == 0)
				{
					ACS_PrimaryWeaponSwitch();

					ACS_Setup_Combat_Action_Heavy();	
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawHeavyAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					ACS_PrimaryWeaponSwitch();

					ShockwaveFistHeavyAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 2)
			{
				if (ACS_GetFistMode() == 0)
				{
					ACS_PrimaryWeaponSwitch();

					ACS_Setup_Combat_Action_Heavy();	
				}
				else if (ACS_GetFistMode() == 1)
				{
					VampClawHeavyAttack();
				}
				else if (ACS_GetFistMode() == 2)
				{
					ACS_PrimaryWeaponSwitch();

					ShockwaveFistHeavyAttack();
				}
			}
			else if (ACS_GetWeaponMode() == 3)
			{
				if (ACS_GetItem_VampClaw() || ACS_GetItem_VampClaw_Shades())
				{
					VampClawHeavyAttack();
				}
				else
				{
					ACS_PrimaryWeaponSwitch();

					thePlayer.SetupCombatAction( EBAT_HeavyAttack, BS_Pressed );
				}
			}

			DeactivateThings();
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function GuardAttack()
	{
		if( GuardAttackCallTime + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
		{
			GuardAttackDoubleTap = true;
		}
		else
		{
			GuardAttackDoubleTap = false;	
		}

		if ( thePlayer.IsActionAllowed(EIAB_Parry) )
		{
			if (
			CiriCheck() 
			&& HitAnimCheck()
			&& FinisherCheck()
			&& BruxaBiteCheck()
			)
			{
				DeactivateThings();

				ACS_ThingsThatShouldBeRemoved();

				ACS_ExplorationDelayHack();

				vACS_Shield_Summon = new cACS_Shield_Summon in this;

				if ( WraithModeCheck() )
				{
					if (ACS_GetWeaponMode() == 0)
					{
						if ( ACS_StaminaBlockAction_Enabled() 
						&& StaminaCheck()
						)
						{							 
							if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
						}
						else
						{
							ACS_StaminaDrain(1);

							if (theInput.GetActionValue('GI_AxisLeftY') > 0.5 )
							{
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_doubletap_attack())
									{
										ACS_refresh_guard_doubletap_attack_cooldown();

										if 
										( 
											(ACS_SwordArray_Enabled() 
											&& (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus) ))
											|| thePlayer.HasTag('Swords_Ready')
										)
										{	
											ACS_Sword_Array();
										}
										else
										{
											RandomKickActual();
										}
									}
								}
								else
								{	
									if ( !thePlayer.IsWeaponHeld( 'fist' ) && !thePlayer.HasTag('vampire_claws_equipped') )
									{
										if ( thePlayer.GetEquippedSign() == ST_Igni )
										{
											if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 0)
											{
												IgniCounterActual();
											}
											else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 1)
											{
												QuenCounterActual();
											}
											else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 2)
											{
												AxiiCounterActual();
											}
											else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 3)
											{
												AardCounterActual();
											}
											else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 4)
											{
												YrdenCounterActual();
											}
										}
										else if ( thePlayer.GetEquippedSign() == ST_Axii )
										{
											if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 0)
											{
												IgniCounterActual();
											}
											else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 1)
											{
												QuenCounterActual();
											}
											else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 2)
											{
												AxiiCounterActual();
											}
											else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 3)
											{
												AardCounterActual();
											}
											else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 4)
											{
												YrdenCounterActual();
											}
										}
										else if ( thePlayer.GetEquippedSign() == ST_Aard )
										{
											if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 0)
											{
												IgniCounterActual();
											}
											else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 1)
											{
												QuenCounterActual();
											}
											else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 2)
											{
												AxiiCounterActual();
											}
											else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 3)
											{
												AardCounterActual();
											}
											else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 4)
											{
												YrdenCounterActual();
											}
										}
										else if ( thePlayer.GetEquippedSign() == ST_Quen )
										{
											if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 0)
											{
												IgniCounterActual();
											}
											else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 1)
											{
												QuenCounterActual();
											}
											else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 2)
											{
												AxiiCounterActual();
											}
											else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 3)
											{
												AardCounterActual();
											}
											else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 4)
											{
												YrdenCounterActual();
											}
										}
										else if ( thePlayer.GetEquippedSign() == ST_Yrden )
										{
											if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 0)
											{
												IgniCounterActual();
											}
											else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 1)
											{
												QuenCounterActual();
											}
											else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 2)
											{
												AxiiCounterActual();
											}
											else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 3)
											{
												AardCounterActual();
											}
											else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 4)
											{
												YrdenCounterActual();
											}
										}
									}
									else
									{	
										if (ACS_can_perform_guard_attack()
										&& ACS_GetFistMode() == 1)
										{
											ACS_refresh_guard_attack_cooldown();
																		
											geraltRandomVampireCounter();

											thePlayer.SetAnimationSpeedMultiplier(1.5  );

											RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
											
											ACS_StaminaDrain(1);
										}
									}
								}
													
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
							else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5 )
							{		
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_attack()
									&& ACS_SummonedShades_Enabled()
									)
									{
										ACS_refresh_guard_attack_cooldown();

										if (!thePlayer.HasTag('summoned_shades'))
										{
											ACS_EventHackAttack();

											PlayerPlayAnimation( 'man_geralt_yrden_ground');	
																	
											if(thePlayer.IsInCombat()){ACS_Spawn_Shades();}
															
											thePlayer.AddTag('summoned_shades');
										}
									}
								}
								else
								{
									if (thePlayer.IsHardLockEnabled())
									{
										if (ACS_can_perform_beam_attack()
										&& ACS_BeamAttack_Enabled()
										)
										{
											ACS_refresh_beam_attack_cooldown();
																
											if(thePlayer.IsInCombat()){ACS_Beam_Attack();}
										}
									}
								}
												
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
							else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5 
							|| theInput.GetActionValue('GI_AxisLeftX') > 0.5 )
							{	
								if (ACS_can_perform_guard_attack())
								{
									ACS_refresh_guard_attack_cooldown();

									geraltRandomPush();
									
									ACS_StaminaDrain(1);
								}	
							}
							else if ( theInput.GetActionValue('AttackWithAlternateLight') > 0.7f
							|| theInput.GetActionValue('AttackLight') > 0.7f )
							{	
								if (ACS_can_perform_guard_attack())
								{
									ACS_refresh_guard_attack_cooldown();

									geraltRandomPunch();
									
									ACS_StaminaDrain(1);
								}	
							}
							else
							{
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_doubletap_attack() && thePlayer.IsInCombat())
									{
										ACS_refresh_guard_doubletap_attack_cooldown();

										if (!thePlayer.IsActionAllowed(EIAB_Signs))
										{
											return;
										}
														
										if(thePlayer.HasTag('axii_sword_equipped')
										&& ACS_ShieldEntity_Enabled()
										)
										{
											RemoveTimer('ACS_Shield_Spawn_Delay');

											AddTimer('ACS_Shield_Spawn_Delay', 0.05, false);

											vACS_Shield_Summon.Axii_Shield_Summon();

											vACS_Shield_Summon.Axii_Shield_Entity();
										}
										else if (thePlayer.HasTag('quen_sword_equipped')
										&& ACS_QuenMonsterSummon_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');

											vACS_Shield_Summon.Quen_Monster_Summon();
										}
										else if (thePlayer.HasTag('yrden_sword_equipped')
										&& ACS_YrdenSkeleSummon_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');	

											vACS_Shield_Summon.Yrden_Skele_Summon();
										}
										else if (thePlayer.HasTag('aard_sword_equipped')
										&& ACS_AardPull_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');	

											vACS_Shield_Summon.Aard_Pull();

											AddTimer('ACS_bruxa_camo_npc_reaction', 0.5, true);
										}
										else if (thePlayer.HasTag('vampire_claws_equipped')
										&& ACS_BruxaCamoDecoy_Enabled()
										&& !thePlayer.HasBuff(EET_BlackBlood)
										)
										{
											vACS_Shield_Summon.BruxaCamoDecoy();

											AddTimer('ACS_npc_fear_reaction', 0.875, true);
											AddTimer('ACS_Bruxa_Camo_Sonar_Timer', 2.5, true);
										}
										else if (thePlayer.HasTag('quen_secondary_sword_equipped')
										|| thePlayer.HasTag('axii_secondary_sword_equipped')
										)
										{
											//thePlayer.AddTag('acs_crossbow_active');
											thePlayer.AddTag('acs_bow_active');
										}
										else if (thePlayer.HasTag('aard_secondary_sword_equipped')
										|| thePlayer.HasTag('yrden_secondary_sword_equipped')
										|| thePlayer.HasTag('igni_secondary_sword_equipped')
										)
										{
											thePlayer.AddTag('acs_bow_active');
										}
									}
								}
								else
								{
									if(thePlayer.HasTag('axii_sword_equipped'))
									{
										RemoveTimer('ACS_Shield_Spawn_Delay');

										AddTimer('ACS_Shield_Spawn_Delay', 0.05, false);

										//action_interrupt();
										//vACS_Shield_Summon.Axii_Persistent_Shield_Summon();
									}
								}
												
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 1)
					{
						if ( ACS_StaminaBlockAction_Enabled() 
						&& StaminaCheck()
						)
						{
							if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
						}
						else
						{
							ACS_StaminaDrain(1);

							if (theInput.GetActionValue('GI_AxisLeftY') > 0.5 )
							{
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_doubletap_attack())
									{
										ACS_refresh_guard_doubletap_attack_cooldown();
										
										if 
										( 
											(ACS_SwordArray_Enabled() 
											&& (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus) ))
											|| thePlayer.HasTag('Swords_Ready')
										)
										{	
											ACS_Sword_Array();
										}
										else
										{
											RandomKickActual();
										}
									}
								}
								else
								{	
									if ( !thePlayer.IsWeaponHeld( 'fist' ) )
									{
										if ( thePlayer.IsWeaponHeld( 'silversword' ) )
										{
											if ( ACS_GetFocusModeSilverWeapon() == 0 )
											{
												IgniCounterActual();
											}
											else if ( ACS_GetFocusModeSilverWeapon() == 1 )
											{
												HybridModeOlgierdCounterActual();
											}
											else if ( ACS_GetFocusModeSilverWeapon() == 2 )
											{
												HybridModeSpearCounterActual();
											}
											else if ( ACS_GetFocusModeSilverWeapon() == 3 )
											{
												HybridModeEredinShieldCounterActual();
											}
											else if ( ACS_GetFocusModeSilverWeapon() == 4 )
											{
												HybridModeGregCounterActual();
											}
											else if ( ACS_GetFocusModeSilverWeapon() == 5 )
											{
												HybridModeImlerithCounterActual();
											}
											else if ( ACS_GetFocusModeSilverWeapon() == 6 )
											{
												HybridModeGiantCounterActual();
											}
											else if ( ACS_GetFocusModeSilverWeapon() == 7 )
											{
												HybridModeClawCounterActual();
											}
											else if ( ACS_GetFocusModeSilverWeapon() == 8 )
											{
												HybridModeAxeCounterActual();
											}
										}
										else if ( thePlayer.IsWeaponHeld('steelsword') )
										{
											if ( ACS_GetFocusModeSteelWeapon() == 0 )
											{
												IgniCounterActual();
											}
											else if ( ACS_GetFocusModeSteelWeapon() == 1 )
											{
												HybridModeOlgierdCounterActual();
											}
											else if ( ACS_GetFocusModeSteelWeapon() == 2 )
											{
												HybridModeSpearCounterActual();
											}
											else if ( ACS_GetFocusModeSteelWeapon() == 3 )
											{
												HybridModeEredinShieldCounterActual();
											}
											else if ( ACS_GetFocusModeSteelWeapon() == 4 )
											{
												HybridModeGregCounterActual();
											}
											else if ( ACS_GetFocusModeSteelWeapon() == 5 )
											{
												HybridModeImlerithCounterActual();
											}
											else if ( ACS_GetFocusModeSteelWeapon() == 6 )
											{
												HybridModeGiantCounterActual();
											}
											else if ( ACS_GetFocusModeSteelWeapon() == 7 )
											{
												HybridModeClawCounterActual();
											}
											else if ( ACS_GetFocusModeSteelWeapon() == 8 )
											{
												HybridModeAxeCounterActual();
											}
										}
									}
									else
									{	
										if (ACS_can_perform_guard_attack()
										&& ACS_GetFistMode() == 1)
										{
											ACS_refresh_guard_attack_cooldown();
																		
											geraltRandomVampireCounter();

											thePlayer.SetAnimationSpeedMultiplier(1.5  );

											RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
											
											ACS_StaminaDrain(1);
										}
									}
								}
													
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
							else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5 )
							{		
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_attack()
									&& ACS_SummonedShades_Enabled()
									)
									{
										ACS_refresh_guard_attack_cooldown();

										if (!thePlayer.HasTag('summoned_shades'))
										{
											ACS_EventHackAttack();

											PlayerPlayAnimation( 'man_geralt_yrden_ground');	
																	
											if(thePlayer.IsInCombat()){ACS_Spawn_Shades();}
															
											thePlayer.AddTag('summoned_shades');
										}
									}
								}
								else
								{
									if (thePlayer.IsHardLockEnabled())
									{
										if (ACS_can_perform_beam_attack()
										&& ACS_BeamAttack_Enabled()
										)
										{
											ACS_refresh_beam_attack_cooldown();
																
											if(thePlayer.IsInCombat()){ACS_Beam_Attack();}
										}
									}
								}
												
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
							else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5 
							|| theInput.GetActionValue('GI_AxisLeftX') > 0.5 )
							{	
								if (ACS_can_perform_guard_attack())
								{
									ACS_refresh_guard_attack_cooldown();

									geraltRandomPush();
									
									ACS_StaminaDrain(1);
								}	
							}
							else if ( theInput.GetActionValue('AttackWithAlternateLight') > 0.7f
							|| theInput.GetActionValue('AttackLight') > 0.7f )
							{	
								if (ACS_can_perform_guard_attack())
								{
									ACS_refresh_guard_attack_cooldown();

									geraltRandomPunch();
									
									ACS_StaminaDrain(1);
								}	
							}
							else
							{
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_doubletap_attack() && thePlayer.IsInCombat())
									{
										ACS_refresh_guard_doubletap_attack_cooldown();

										if (!thePlayer.IsActionAllowed(EIAB_Signs))
										{
											return;
										}
														
										if(thePlayer.HasTag('axii_sword_equipped')
										&& ACS_ShieldEntity_Enabled()
										)
										{
											RemoveTimer('ACS_Shield_Spawn_Delay');

											AddTimer('ACS_Shield_Spawn_Delay', 0.05, false);

											vACS_Shield_Summon.Axii_Shield_Summon();

											vACS_Shield_Summon.Axii_Shield_Entity();
										}
										else if (thePlayer.HasTag('quen_sword_equipped')
										&& ACS_QuenMonsterSummon_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');

											vACS_Shield_Summon.Quen_Monster_Summon();
										}
										else if (thePlayer.HasTag('yrden_sword_equipped')
										&& ACS_YrdenSkeleSummon_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');

											vACS_Shield_Summon.Yrden_Skele_Summon();
										}
										else if (thePlayer.HasTag('aard_sword_equipped')
										&& ACS_AardPull_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');

											vACS_Shield_Summon.Aard_Pull();

											AddTimer('ACS_bruxa_camo_npc_reaction', 0.5, true);
										}
										else if (thePlayer.HasTag('vampire_claws_equipped')
										&& ACS_BruxaCamoDecoy_Enabled() 
										&& !thePlayer.HasBuff(EET_BlackBlood)
										)
										{
											vACS_Shield_Summon.BruxaCamoDecoy();

											AddTimer('ACS_npc_fear_reaction', 0.875, true);
											AddTimer('ACS_Bruxa_Camo_Sonar_Timer', 2.5, true);
										}
										else if (thePlayer.HasTag('quen_secondary_sword_equipped')
										|| thePlayer.HasTag('axii_secondary_sword_equipped')
										)
										{
											//thePlayer.AddTag('acs_crossbow_active');
											thePlayer.AddTag('acs_bow_active');
										}
										else if (thePlayer.HasTag('aard_secondary_sword_equipped')
										|| thePlayer.HasTag('yrden_secondary_sword_equipped')
										|| thePlayer.HasTag('igni_secondary_sword_equipped')
										)
										{
											thePlayer.AddTag('acs_bow_active');
										}
									}
								}
								else
								{
									if(thePlayer.HasTag('axii_sword_equipped'))
									{
										RemoveTimer('ACS_Shield_Spawn_Delay');

										AddTimer('ACS_Shield_Spawn_Delay', 0.05, false);
										
										//action_interrupt();
										//vACS_Shield_Summon.Axii_Persistent_Shield_Summon();
									}
								}
												
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 2)
					{
						if ( ACS_StaminaBlockAction_Enabled() 
						&& StaminaCheck()
						)
						{
							if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
						}
						else
						{
							ACS_StaminaDrain(1);

							if (theInput.GetActionValue('GI_AxisLeftY') > 0.5 )
							{
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_doubletap_attack())
									{
										ACS_refresh_guard_doubletap_attack_cooldown();
										
										if 
										( 
											(ACS_SwordArray_Enabled() 
											&& (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus) ))
											|| thePlayer.HasTag('Swords_Ready')
										)
										{	
											ACS_Sword_Array();
										}
										else
										{
											RandomKickActual();
										}
									}
								}
								else
								{	
									if ( !thePlayer.IsWeaponHeld( 'fist' ) )
									{
										if ( thePlayer.IsWeaponHeld( 'silversword' ) || thePlayer.IsWeaponHeld('steelsword') )
										{
											if ( ACS_GetHybridModeCounterAttack() == 0 )
											{
												if (!thePlayer.HasTag('HybridDefaultWeaponTicket')){thePlayer.AddTag('HybridDefaultWeaponTicket');}

												IgniCounterActual();
											}
											else if ( ACS_GetHybridModeCounterAttack() == 1 )
											{
												if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

												HybridModeOlgierdCounterActual();
											}
											else if ( ACS_GetHybridModeCounterAttack() == 2 )
											{
												if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

												HybridModeEredinShieldCounterActual();
											}
											else if ( ACS_GetHybridModeCounterAttack() == 3 )
											{
												if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

												HybridModeClawCounterActual();
											}
											else if ( ACS_GetHybridModeCounterAttack() == 4 )
											{
												if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

												HybridModeImlerithCounterActual();
											}
											else if ( ACS_GetHybridModeCounterAttack() == 5 )
											{
												if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

												HybridModeSpearCounterActual();
											}
											else if ( ACS_GetHybridModeCounterAttack() == 6 )
											{
												if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

												HybridModeGregCounterActual();
											}
											else if ( ACS_GetHybridModeCounterAttack() == 7 )
											{
												if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

												HybridModeAxeCounterActual();
											}
											else if ( ACS_GetHybridModeCounterAttack() == 8 )
											{
												if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

												HybridModeGiantCounterActual();
											}
										}
									}
									else
									{	
										if (ACS_can_perform_guard_attack()
										&& ACS_GetFistMode() == 1)
										{
											ACS_refresh_guard_attack_cooldown();
																		
											geraltRandomVampireCounter();

											thePlayer.SetAnimationSpeedMultiplier(1.5  );

											RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
											
											ACS_StaminaDrain(1);
										}
									}
								}
													
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
							else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5 )
							{		
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_attack()
									&& ACS_SummonedShades_Enabled()
									)
									{
										ACS_refresh_guard_attack_cooldown();

										if (!thePlayer.HasTag('summoned_shades'))
										{
											ACS_EventHackAttack();

											PlayerPlayAnimation( 'man_geralt_yrden_ground');	
																	
											if(thePlayer.IsInCombat()){ACS_Spawn_Shades();}
															
											thePlayer.AddTag('summoned_shades');
										}
									}
								}
								else
								{
									if (thePlayer.IsHardLockEnabled())
									{
										if (ACS_can_perform_beam_attack()
										&& ACS_BeamAttack_Enabled()
										)
										{
											ACS_refresh_beam_attack_cooldown();
																
											if(thePlayer.IsInCombat()){ACS_Beam_Attack();}
										}
									}
								}
												
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
							else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5 
							|| theInput.GetActionValue('GI_AxisLeftX') > 0.5 )
							{	
								if (ACS_can_perform_guard_attack())
								{
									ACS_refresh_guard_attack_cooldown();

									geraltRandomPush();
									
									ACS_StaminaDrain(1);
								}	
							}
							else if ( theInput.GetActionValue('AttackWithAlternateLight') > 0.7f
							|| theInput.GetActionValue('AttackLight') > 0.7f )
							{	
								if (ACS_can_perform_guard_attack())
								{
									ACS_refresh_guard_attack_cooldown();

									geraltRandomPunch();
									
									ACS_StaminaDrain(1);
								}	
							}
							else
							{
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_doubletap_attack() && thePlayer.IsInCombat())
									{
										ACS_refresh_guard_doubletap_attack_cooldown();

										if (!thePlayer.IsActionAllowed(EIAB_Signs))
										{
											return;
										}
														
										if(thePlayer.HasTag('axii_sword_equipped')
										&& ACS_ShieldEntity_Enabled()
										)
										{
											RemoveTimer('ACS_Shield_Spawn_Delay');

											AddTimer('ACS_Shield_Spawn_Delay', 0.05, false);

											vACS_Shield_Summon.Axii_Shield_Summon();

											vACS_Shield_Summon.Axii_Shield_Entity();
										}
										else if (thePlayer.HasTag('quen_sword_equipped')
										&& ACS_QuenMonsterSummon_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');

											vACS_Shield_Summon.Quen_Monster_Summon();
										}
										else if (thePlayer.HasTag('yrden_sword_equipped')
										&& ACS_YrdenSkeleSummon_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');

											vACS_Shield_Summon.Yrden_Skele_Summon();
										}
										else if (thePlayer.HasTag('aard_sword_equipped')
										&& ACS_AardPull_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');

											vACS_Shield_Summon.Aard_Pull();

											AddTimer('ACS_bruxa_camo_npc_reaction', 0.5, true);
										}
										else if (thePlayer.HasTag('vampire_claws_equipped')
										&& ACS_BruxaCamoDecoy_Enabled() 
										&& !thePlayer.HasBuff(EET_BlackBlood)
										)
										{
											vACS_Shield_Summon.BruxaCamoDecoy();

											AddTimer('ACS_npc_fear_reaction', 0.875, true);
											AddTimer('ACS_Bruxa_Camo_Sonar_Timer', 2.5, true);
										}
										else if (thePlayer.HasTag('quen_secondary_sword_equipped')
										|| thePlayer.HasTag('axii_secondary_sword_equipped')
										)
										{
											//thePlayer.AddTag('acs_crossbow_active');
											thePlayer.AddTag('acs_bow_active');
										}
										else if (thePlayer.HasTag('aard_secondary_sword_equipped')
										|| thePlayer.HasTag('yrden_secondary_sword_equipped')
										|| thePlayer.HasTag('igni_secondary_sword_equipped')
										)
										{
											thePlayer.AddTag('acs_bow_active');
										}
									}
								}
								else
								{
									if(thePlayer.HasTag('axii_sword_equipped'))
									{
										RemoveTimer('ACS_Shield_Spawn_Delay');

										AddTimer('ACS_Shield_Spawn_Delay', 0.05, false);
										
										//action_interrupt();
										//vACS_Shield_Summon.Axii_Persistent_Shield_Summon();
									}
								}
												
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 3)
					{
						if ( ACS_StaminaBlockAction_Enabled() 
						&& StaminaCheck()
						)
						{
							if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
						}
						else
						{
							ACS_StaminaDrain(1);

							if (theInput.GetActionValue('GI_AxisLeftY') > 0.5 )
							{
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_doubletap_attack())
									{
										ACS_refresh_guard_doubletap_attack_cooldown();
										
										if 
										( 
											(ACS_SwordArray_Enabled() 
											&& (thePlayer.GetStat(BCS_Focus) == thePlayer.GetStatMax(BCS_Focus) ))
											|| thePlayer.HasTag('Swords_Ready')
										)
										{	
											ACS_Sword_Array();
										}
										else
										{
											RandomKickActual();
										}
									}
								}
								else
								{	
									if ( !thePlayer.IsWeaponHeld( 'fist' ) )
									{
										if ( thePlayer.IsWeaponHeld( 'silversword' ) )
										{
											if ( ACS_GetItem_Eredin_Silver() || ACS_GetItem_Greg_Silver() )
											{
												AxiiCounterActual();
											}
											else if ( ACS_GetItem_Claws_Silver() || ACS_GetItem_Axe_Silver() )
											{
												AardCounterActual();
											}
											else if ( ACS_GetItem_Olgierd_Silver() || ACS_GetItem_Spear_Silver() )
											{
												QuenCounterActual();
											}
											else if ( ACS_GetItem_Imlerith_Silver() || ACS_GetItem_Hammer_Silver() )
											{
												YrdenCounterActual();
											}
											else if (ACS_GetItem_Katana_Silver() )
											{
												AxeCounter();
											}
											else
											{
												IgniCounterActual();
											}
										}
										else if ( thePlayer.IsWeaponHeld( 'steelsword' ) )
										{
											if ( ACS_GetItem_Eredin_Steel() || ACS_GetItem_Greg_Steel() )
											{
												AxiiCounterActual();
											}
											else if ( ACS_GetItem_Claws_Steel() || ACS_GetItem_Axe_Steel() )
											{
												AardCounterActual();
											}
											else if ( ACS_GetItem_Olgierd_Steel() || ACS_GetItem_Spear_Steel() )
											{
												QuenCounterActual();
											}
											else if ( ACS_GetItem_Imlerith_Steel() || ACS_GetItem_Hammer_Steel() )
											{
												YrdenCounterActual();
											}
											else if (ACS_GetItem_Katana_Steel() )
											{
												AxeCounter();
											}
											else
											{
												IgniCounterActual();
											}
										}
									}
									else
									{	
										if (ACS_can_perform_guard_attack()
										&& (ACS_GetItem_VampClaw() || ACS_GetItem_VampClaw_Shades())
										)
										{
											ACS_refresh_guard_attack_cooldown();
																		
											geraltRandomVampireCounter();

											thePlayer.SetAnimationSpeedMultiplier(1.5  );

											RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
											
											ACS_StaminaDrain(1);
										}
									}
								}
													
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
							else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5 )
							{		
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_attack()
									&& ACS_SummonedShades_Enabled()
									)
									{
										ACS_refresh_guard_attack_cooldown();

										if (!thePlayer.HasTag('summoned_shades'))
										{
											ACS_EventHackAttack();
											
											PlayerPlayAnimation( 'man_geralt_yrden_ground');	
																	
											if(thePlayer.IsInCombat()){ACS_Spawn_Shades();}
															
											thePlayer.AddTag('summoned_shades');
										}
									}
								}
								else
								{
									if (thePlayer.IsHardLockEnabled())
									{
										if (ACS_can_perform_beam_attack()
										&& ACS_BeamAttack_Enabled()
										)
										{
											ACS_refresh_beam_attack_cooldown();
																
											if(thePlayer.IsInCombat()){ACS_Beam_Attack();}
										}
									}
								}
												
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
							else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5 
							|| theInput.GetActionValue('GI_AxisLeftX') > 0.5 )
							{	
								if (ACS_can_perform_guard_attack())
								{
									ACS_refresh_guard_attack_cooldown();

									geraltRandomPush();
									
									ACS_StaminaDrain(1);
								}	
							}
							else if ( theInput.GetActionValue('AttackWithAlternateLight') > 0.7f
							|| theInput.GetActionValue('AttackLight') > 0.7f )
							{	
								if (ACS_can_perform_guard_attack())
								{
									ACS_refresh_guard_attack_cooldown();

									geraltRandomPunch();
									
									ACS_StaminaDrain(1);
								}	
							}
							else
							{
								if( GuardAttackDoubleTap )
								{
									if (ACS_can_perform_guard_doubletap_attack() && thePlayer.IsInCombat())
									{
										ACS_refresh_guard_doubletap_attack_cooldown();

										if (!thePlayer.IsActionAllowed(EIAB_Signs))
										{
											return;
										}
														
										if(thePlayer.HasTag('axii_sword_equipped')
										&& ACS_ShieldEntity_Enabled()
										)
										{
											RemoveTimer('ACS_Shield_Spawn_Delay');

											AddTimer('ACS_Shield_Spawn_Delay', 0.05, false);

											vACS_Shield_Summon.Axii_Shield_Summon();

											vACS_Shield_Summon.Axii_Shield_Entity();
										}
										else if (thePlayer.HasTag('quen_sword_equipped')
										&& ACS_QuenMonsterSummon_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');

											vACS_Shield_Summon.Quen_Monster_Summon();
										}
										else if (thePlayer.HasTag('yrden_sword_equipped')
										&& ACS_YrdenSkeleSummon_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');

											vACS_Shield_Summon.Yrden_Skele_Summon();
										}
										else if (thePlayer.HasTag('aard_sword_equipped')
										&& ACS_AardPull_Enabled()
										)
										{
											PlayerPlayAnimation( 'man_geralt_yrden_ground');

											vACS_Shield_Summon.Aard_Pull();

											AddTimer('ACS_bruxa_camo_npc_reaction', 0.5, true);
										}
										else if (thePlayer.HasTag('vampire_claws_equipped')
										&& ACS_BruxaCamoDecoy_Enabled() 
										&& !thePlayer.HasBuff(EET_BlackBlood)
										)
										{
											vACS_Shield_Summon.BruxaCamoDecoy();

											AddTimer('ACS_npc_fear_reaction', 0.875, true);
											AddTimer('ACS_Bruxa_Camo_Sonar_Timer', 2.5, true);
										}
										else if (thePlayer.HasTag('quen_secondary_sword_equipped')
										|| thePlayer.HasTag('axii_secondary_sword_equipped')
										)
										{
											//thePlayer.AddTag('acs_crossbow_active');
											thePlayer.AddTag('acs_bow_active');
										}
										else if (thePlayer.HasTag('aard_secondary_sword_equipped')
										|| thePlayer.HasTag('yrden_secondary_sword_equipped')
										|| thePlayer.HasTag('igni_secondary_sword_equipped')
										)
										{
											thePlayer.AddTag('acs_bow_active');
										}
									}
								}
								else
								{
									if(thePlayer.HasTag('axii_sword_equipped'))
									{
										RemoveTimer('ACS_Shield_Spawn_Delay');

										AddTimer('ACS_Shield_Spawn_Delay', 0.05, false);
										
										//action_interrupt();
										//vACS_Shield_Summon.Axii_Persistent_Shield_Summon();
									}
									else if (thePlayer.HasTag('quen_secondary_sword_equipped')
									|| thePlayer.HasTag('axii_secondary_sword_equipped')
									)
									{
										//thePlayer.AddTag('acs_crossbow_active');
										thePlayer.AddTag('acs_bow_active');
									}
									else if (thePlayer.HasTag('aard_secondary_sword_equipped')
									|| thePlayer.HasTag('yrden_secondary_sword_equipped')
									|| thePlayer.HasTag('igni_secondary_sword_equipped')
									)
									{
										thePlayer.AddTag('acs_bow_active');
									}
								}
												
								GuardAttackCallTime = theGame.GetEngineTimeAsSeconds();
							}
						}
					}
				}
				else
				{
					if ( ACS_BeamAttack_Enabled() )
					{
						if ( ACS_StaminaBlockAction_Enabled() 
						&& StaminaCheck()
						)
						{ 
							if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
						}
						else
						{
							ACS_StaminaDrain(1);

							if (ACS_can_perform_beam_attack())
							{
								ACS_refresh_beam_attack_cooldown();
																
								ACS_Beam_Attack();
							}
						}
					}
				}

				DeactivateThings();
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function LightAttackSwitch()
	{
		if ( thePlayer.IsActionAllowed(EIAB_LightAttacks) )
		{
			if ( CiriCheck() )
			{
				if ( HitAnimCheck() 
				&& FinisherCheck()
				&& WraithModeCheck()
				&& BruxaBiteCheck() 
				&& thePlayer.IsAnyWeaponHeld()
				&& !thePlayer.IsWeaponHeld( 'fist' )
				)
				{
					DeactivateThings();

					ACS_ThingsThatShouldBeRemoved();

					thePlayer.SendAttackReactionEvent();

					thePlayer.ManageAerondightBuff(true);

					if ( !thePlayer.HasTag('igni_sword_equipped') && !thePlayer.HasTag('igni_secondary_sword_equipped') )
					{
						ACS_ExplorationDelayHack();
					}

					if (ACS_GetWeaponMode() == 0 )
					{
						if ( thePlayer.GetEquippedSign() == ST_Quen )
						{	
							if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 0)
							{
								ACS_PrimaryWeaponSwitch();

								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdLightAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinLightAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawLightAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithLightAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Aard )
						{
							if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 0)
							{
								ACS_PrimaryWeaponSwitch();

								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdLightAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinLightAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawLightAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithLightAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Axii )
						{
							if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 0)
							{
								ACS_PrimaryWeaponSwitch();

								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdLightAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinLightAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawLightAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithLightAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Yrden )
						{
							if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 0)
							{
								ACS_PrimaryWeaponSwitch();

								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdLightAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinLightAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawLightAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithLightAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Igni )
						{
							if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 0)
							{
								ACS_PrimaryWeaponSwitch();

								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdLightAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinLightAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawLightAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithLightAttack();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 1)
					{
						if (thePlayer.IsWeaponHeld('silversword'))
						{
							if ( ACS_GetFocusModeSilverWeapon() == 0 )
							{
								ACS_PrimaryWeaponSwitch();
															
								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 1 )
							{	
								FocusModeOlgierdLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 2 )
							{
								FocusModeSpearLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 3 )
							{
								FocusModeEredinShieldLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 4 )
							{
								FocusModeGregLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 5 )
							{
								FocusModeImlerithLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 6 )
							{
								FocusModeGiantLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 7 )
							{
								FocusModeClawLightAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 8 )
							{
								FocusModeAxeLightAttack();
							}
						}
						else if (thePlayer.IsWeaponHeld('steelsword'))
						{
							if ( ACS_GetFocusModeSteelWeapon() == 0 )
							{
								ACS_PrimaryWeaponSwitch();
															
								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 1 )
							{	
								FocusModeOlgierdLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 2 )
							{
								FocusModeSpearLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 3 )
							{
								FocusModeEredinShieldLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 4 )
							{
								FocusModeGregLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 5 )
							{
								FocusModeImlerithLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 6 )
							{
								FocusModeGiantLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 7 )
							{
								FocusModeClawLightAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 8 )
							{
								FocusModeAxeLightAttack();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 2)
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							if ( ACS_GetHybridModeForwardLightAttack() == 0 )
							{
								if (!thePlayer.HasTag('HybridDefaultWeaponTicket')){thePlayer.AddTag('HybridDefaultWeaponTicket');}

								ACS_PrimaryWeaponSwitch();
															
								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 1 )
							{
								if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

								HybridModeOlgierdForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 2 )
							{
								if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

								HybridModeEredinShieldForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 3 )
							{
								if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

								HybridModeClawForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 4 )
							{
								if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

								HybridModeImlerithForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 5 )
							{
								if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

								HybridModeSpearForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 6 )
							{
								if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

								HybridModeGregForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 7 )
							{
								if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

								HybridModeAxeForwardLightAttack();
							}
							else if ( ACS_GetHybridModeForwardLightAttack() == 8 )
							{
								if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

								HybridModeGiantForwardLightAttack();
							}
						}
						else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5) // Hybrid Mode Weapon Arts Light Attack
						{
							if (thePlayer.HasTag('quen_sword_equipped'))
							{
								if (thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									Umbral_Slash_Single();
								}
							}
							else if (thePlayer.HasTag('axii_sword_equipped'))
							{
								if ( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									Sparagmos();

									if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
									{	
										
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
									}
									else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
									{	
										
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
									else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
									{
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
								}
							}
							else if (thePlayer.HasTag('aard_sword_equipped'))
							{
								if ( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
								{
									Bruxa_Scream();

									thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
								}
							}
							else if (thePlayer.HasTag('yrden_sword_equipped'))
							{
								if ( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									ACS_TKInit();

									if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
									{	
										
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
									}
									else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
									else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
									{
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
								}
							}
							else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
							{
								if ( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									Storm_Spear();

									if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
									}
									else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
									else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
									{
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
								}
							}
							else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
							{
								if ( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
								{
									Giant_Sword();

									thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
								}
							}
							else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
							{
								if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									Water_Aard();

									if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
									}
									else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
									else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
									{
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
								}
							}
							else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
							{
								if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
								{
									Giant_Stomp();

									if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
									}
									else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
									&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
									{	
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
									else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
									{
										thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
									}
								}
							}
						}
						else
						{
							if ( ACS_GetHybridModeLightAttack() == 0 )
							{
								if (!thePlayer.HasTag('HybridDefaultWeaponTicket')){thePlayer.AddTag('HybridDefaultWeaponTicket');}

								ACS_PrimaryWeaponSwitch();

								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 1 )
							{
								if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

								HybridModeOlgierdLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 2 )
							{
								if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

								HybridModeEredinShieldLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 3 )
							{
								if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

								HybridModeClawLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 4 )
							{
								if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

								HybridModeImlerithLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 5 )
							{
								if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

								HybridModeSpearLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 6 )
							{
								if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

								HybridModeGregLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 7 )
							{
								if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

								HybridModeAxeLightAttack();
							}
							else if ( ACS_GetHybridModeLightAttack() == 8 )
							{
								if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

								HybridModeGiantLightAttack();
							}
						}
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{
						if (thePlayer.IsWeaponHeld('silversword'))
						{
							if ( ACS_GetItem_Olgierd_Silver() )
							{	
								EquipmentModeOlgierdLightAttack();
							}
							else if ( ACS_GetItem_Claws_Silver() )
							{
								FocusModeClawLightAttack();
							}
							else if ( ACS_GetItem_Eredin_Silver() )
							{
								FocusModeEredinShieldLightAttack();
							}
							else if ( ACS_GetItem_Imlerith_Silver() )
							{
								FocusModeImlerithLightAttack();
							}
							else if ( ACS_GetItem_Spear_Silver() )
							{
								FocusModeSpearLightAttack();
							}
							else if ( ACS_GetItem_Greg_Silver() )
							{
								FocusModeGregLightAttack();
							}
							else if ( ACS_GetItem_Hammer_Silver() )
							{
								FocusModeGiantLightAttack();
							}
							else if ( ACS_GetItem_Axe_Silver() )
							{
								FocusModeAxeLightAttack();
							}
							else if ( ACS_GetItem_Katana_Silver() )
							{
								FocusModeOlgierdHeavyAttack();
							}
							else
							{	
								ACS_DefaultSwitch();		

								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
						}
						else if (thePlayer.IsWeaponHeld('steelsword'))
						{
							if ( ACS_GetItem_Olgierd_Steel() )
							{	
								EquipmentModeOlgierdLightAttack();
							}
							else if ( ACS_GetItem_Claws_Steel() )
							{
								FocusModeClawLightAttack();
							}
							else if ( ACS_GetItem_Eredin_Steel() )
							{
								FocusModeEredinShieldLightAttack();
							}
							else if ( ACS_GetItem_Imlerith_Steel() )
							{
								FocusModeImlerithLightAttack();
							}
							else if ( ACS_GetItem_Spear_Steel() )
							{
								FocusModeSpearLightAttack();
							}
							else if ( ACS_GetItem_Greg_Steel() )
							{
								FocusModeGregLightAttack();
							}
							else if ( ACS_GetItem_Hammer_Steel() )
							{
								FocusModeGiantLightAttack();
							}
							else if ( ACS_GetItem_Axe_Steel() )
							{
								FocusModeAxeLightAttack();
							}
							else if ( ACS_GetItem_Katana_Steel() )
							{
								FocusModeOlgierdHeavyAttack();
							}
							else
							{	
								ACS_DefaultSwitch();

								//ACS_Setup_Combat_Action_Light();
								GeraltLightAttack();
							}
						}		
					}

					DeactivateThings();
				}
			}
			else
			{
				//ACS_Setup_Combat_Action_Light();
				GeraltLightAttack();
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function HeavyAttackSwitch()
	{
		if ( thePlayer.IsActionAllowed(EIAB_HeavyAttacks) )
		{
			if ( CiriCheck() )
			{
				if ( HitAnimCheck() 
				&& FinisherCheck()
				&& WraithModeCheck() 
				&& BruxaBiteCheck()
				&& thePlayer.IsAnyWeaponHeld()
				&& !thePlayer.IsWeaponHeld( 'fist' ) 
				)
				{
					DeactivateThings();

					thePlayer.SendAttackReactionEvent();
					/*
					if (!thePlayer.HasTag('vampire_claws_equipped') || !thePlayer.IsWeaponHeld( 'fist' ) ) 
					{
						RemoveTimer('ACS_bruxa_tackle'); 
					}
					*/
					if ( !thePlayer.IsWeaponHeld( 'fist' ) ) 
					{
						RemoveTimer('ACS_bruxa_tackle'); 
						RemoveTimer('ACS_portable_aard'); 
						//RemoveTimer('ACS_Umbral_Slash_End');
					}

					ACS_ThingsThatShouldBeRemoved_NoBruxaTackleOrPortableAard();

					ACS_ExplorationDelayHack();

					thePlayer.ManageAerondightBuff(true);

					if (ACS_GetWeaponMode() == 0)
					{
						if ( thePlayer.GetEquippedSign() == ST_Yrden )
						{
							if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 0)
							{
								ArmigerModeGeraltHeavyAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeSpearHeavyAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeGregHeavyAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeAxeHeavyAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeHammerHeavyAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Aard )
						{
							if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 0)
							{
								ArmigerModeGeraltHeavyAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeSpearHeavyAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeGregHeavyAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeAxeHeavyAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeHammerHeavyAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Quen )
						{	
							if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 0)
							{
								ArmigerModeGeraltHeavyAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeSpearHeavyAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeGregHeavyAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeAxeHeavyAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeHammerHeavyAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Axii )
						{	
							if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 0)
							{
								ArmigerModeGeraltHeavyAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeSpearHeavyAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeGregHeavyAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeAxeHeavyAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeHammerHeavyAttack();
							}
						}
						else if ( thePlayer.GetEquippedSign() == ST_Igni )
						{	
							if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 0)
							{
								ArmigerModeGeraltHeavyAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeSpearHeavyAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeGregHeavyAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeAxeHeavyAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeHammerHeavyAttack();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 1)
					{
						if (thePlayer.IsWeaponHeld('silversword'))
						{
							if ( ACS_GetFocusModeSilverWeapon() == 0 )
							{
								ACS_SecondaryWeaponSwitch();								
								//ACS_Setup_Combat_Action_Heavy();
								GeraltHeavyAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 1 )
							{	
								FocusModeOlgierdHeavyAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 2 )
							{	
								FocusModeSpearHeavyAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 3 )
							{	
								FocusModeEredinShieldHeavyAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 4 )
							{	
								FocusModeGregHeavyAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 5 )
							{	
								FocusModeImlerithHeavyAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 6 )
							{
								FocusModeGiantHeavyAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 7 )
							{	
								FocusModeClawHeavyAttack();
							}
							else if ( ACS_GetFocusModeSilverWeapon() == 8 )
							{
								FocusModeAxeHeavyAttack();
							}
						}
						else if (thePlayer.IsWeaponHeld('steelsword'))
						{
							if ( ACS_GetFocusModeSteelWeapon() == 0 )
							{
								ACS_SecondaryWeaponSwitch();								
								//ACS_Setup_Combat_Action_Heavy();
								GeraltHeavyAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 1 )
							{	
								FocusModeOlgierdHeavyAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 2 )
							{	
								FocusModeSpearHeavyAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 3 )
							{	
								FocusModeEredinShieldHeavyAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 4 )
							{	
								FocusModeGregHeavyAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 5 )
							{	
								FocusModeImlerithHeavyAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 6 )
							{
								FocusModeGiantHeavyAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 7 )
							{	
								FocusModeClawHeavyAttack();
							}
							else if ( ACS_GetFocusModeSteelWeapon() == 8 )
							{
								FocusModeAxeHeavyAttack();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 2)
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							if ( ACS_GetHybridModeForwardHeavyAttack() == 0 )
							{
								if (!thePlayer.HasTag('HybridDefaultSecondaryWeaponTicket')){thePlayer.AddTag('HybridDefaultSecondaryWeaponTicket');}

								ACS_SecondaryWeaponSwitch();								
								//ACS_Setup_Combat_Action_Heavy();
								GeraltHeavyAttack();
							}
							else if ( ACS_GetHybridModeForwardHeavyAttack() == 1 )
							{
								if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

								HybridModeOlgierdForwardHeavyAttack();
							}
							else if ( ACS_GetHybridModeForwardHeavyAttack() == 2 )
							{
								if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

								HybridModeEredinShieldForwardHeavyAttack();
							}
							else if ( ACS_GetHybridModeForwardHeavyAttack() == 3 )
							{
								if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

								HybridModeClawForwardHeavyAttack();
							}
							else if ( ACS_GetHybridModeForwardHeavyAttack() == 4 )
							{
								if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

								HybridModeImlerithForwardHeavyAttack();
							}
							else if ( ACS_GetHybridModeForwardHeavyAttack() == 5 )
							{
								if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

								HybridModeSpearForwardHeavyAttack();
							}
							else if ( ACS_GetHybridModeForwardHeavyAttack() == 6 )
							{
								if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

								HybridModeGregForwardHeavyAttack();
							}
							else if ( ACS_GetHybridModeForwardHeavyAttack() == 7 )
							{
								if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

								HybridModeAxeForwardHeavyAttack();
							}
							else if ( ACS_GetHybridModeForwardHeavyAttack() == 8 )
							{
								if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

								HybridModeGiantForwardHeavyAttack();
							}
						}
						else
						{
							if ( ACS_GetHybridModeHeavyAttack() == 0 )
							{
								if (!thePlayer.HasTag('HybridDefaultSecondaryWeaponTicket')){thePlayer.AddTag('HybridDefaultSecondaryWeaponTicket');}

								ACS_SecondaryWeaponSwitch();								
								//ACS_Setup_Combat_Action_Heavy();
								GeraltHeavyAttack();
							}
							else if ( ACS_GetHybridModeHeavyAttack() == 1 )
							{
								if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

								HybridModeOlgierdHeavyAttack();
							}
							else if ( ACS_GetHybridModeHeavyAttack() == 2 )
							{
								if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

								HybridModeEredinShieldHeavyAttack();
							}
							else if ( ACS_GetHybridModeHeavyAttack() == 3 )
							{
								if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

								HybridModeClawHeavyAttack();
							}
							else if ( ACS_GetHybridModeHeavyAttack() == 4 )
							{
								if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

								HybridModeImlerithHeavyAttack();
							}
							else if ( ACS_GetHybridModeHeavyAttack() == 5 )
							{
								if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

								HybridModeSpearHeavyAttack();
							}
							else if ( ACS_GetHybridModeHeavyAttack() == 6 )
							{
								if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

								HybridModeGregHeavyAttack();
							}
							else if ( ACS_GetHybridModeHeavyAttack() == 7 )
							{
								if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

								HybridModeAxeHeavyAttack();
							}
							else if ( ACS_GetHybridModeHeavyAttack() == 8 )
							{
								if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

								HybridModeGiantHeavyAttack();
							}
						}
					}
					else if ( ACS_GetWeaponMode() == 3 )
					{
						if (thePlayer.IsWeaponHeld('silversword'))
						{
							if ( ACS_GetItem_Hammer_Silver() )
							{
								FocusModeGiantHeavyAttack();
							}
							else if ( ACS_GetItem_Axe_Silver() )
							{
								FocusModeAxeHeavyAttack();
							}
							else if ( ACS_GetItem_Spear_Silver() )
							{	
								FocusModeSpearHeavyAttack();
							}
							else if ( ACS_GetItem_Greg_Silver() )
							{	
								FocusModeGregHeavyAttack();
							}
							else if ( ACS_GetItem_Olgierd_Silver() )
							{	
								FocusModeOlgierdHeavyAttack();
							}
							else if ( ACS_GetItem_Eredin_Silver() )
							{	
								FocusModeEredinShieldHeavyAttack();
							}
							else if ( ACS_GetItem_Imlerith_Silver() )
							{	
								FocusModeImlerithHeavyAttack();
							}
							else if ( ACS_GetItem_Claws_Silver() )
							{	
								FocusModeClawHeavyAttack();
							}
							else if ( ACS_GetItem_Katana_Silver() )
							{
								FocusModeGregHeavyAttack();
							}
							else
							{	
								ACS_DefaultSwitch();							
								//ACS_Setup_Combat_Action_Heavy();
								GeraltHeavyAttack();
							}
						}
						else if (thePlayer.IsWeaponHeld('steelsword'))
						{
							if ( ACS_GetItem_Hammer_Steel() )
							{
								FocusModeGiantHeavyAttack();
							}
							else if ( ACS_GetItem_Axe_Steel() )
							{
								FocusModeAxeHeavyAttack();
							}
							else if ( ACS_GetItem_Spear_Steel() )
							{	
								FocusModeSpearHeavyAttack();
							}
							else if ( ACS_GetItem_Greg_Steel() )
							{	
								FocusModeGregHeavyAttack();
							}
							else if ( ACS_GetItem_Olgierd_Steel() )
							{	
								FocusModeOlgierdHeavyAttack();
							}
							else if ( ACS_GetItem_Eredin_Steel() )
							{	
								FocusModeEredinShieldHeavyAttack();
							}
							else if ( ACS_GetItem_Imlerith_Steel() )
							{	
								FocusModeImlerithHeavyAttack();
							}
							else if ( ACS_GetItem_Claws_Steel() )
							{	
								FocusModeClawHeavyAttack();
							}
							else if ( ACS_GetItem_Katana_Steel() )
							{
								FocusModeGregHeavyAttack();
							}
							else
							{	
								ACS_DefaultSwitch();
								//ACS_Setup_Combat_Action_Heavy();
								GeraltHeavyAttack();
							}
						}
					}

					DeactivateThings();

					RemoveTimer('ACS_ResetAnimation');
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					thePlayer.SetSprintActionPressed( false );
					thePlayer.SetSprintToggle( false );
					thePlayer.SetWalkToggle( true );
				}
			}
			else
			{
				//ACS_Setup_Combat_Action_Heavy();
				GeraltHeavyAttack();
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function SpecialAttackSwitch()
	{
		if ( thePlayer.IsActionAllowed(EIAB_SpecialAttackLight) )
		{
			if ( CiriCheck() )
			{
				Rage_Counter_Special_Attack_Manager(1);

				if ( FinisherCheck() 
				&& HitAnimCheck()
				&& WraithModeCheck()
				&& BruxaBiteCheck()
				&& thePlayer.IsAnyWeaponHeld()
				&& !thePlayer.IsWeaponHeld('fist')
				&& !thePlayer.HasTag('vampire_claws_equipped')
				)
				{
					DeactivateThings();

					ACS_ThingsThatShouldBeRemoved();

					ACS_ExplorationDelayHack();

					thePlayer.SendAttackReactionEvent();

					thePlayer.ManageAerondightBuff(true);

					if (ACS_GetWeaponMode() == 0 && !thePlayer.IsWeaponHeld( 'fist' ))
					{
						if( thePlayer.GetEquippedSign() == ST_Axii )
						{	
							if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 0)
							{
								ACS_PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdSpecialAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinShieldSpecialAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawSpecialAttack();
							}
							else if (ACS_Armiger_Axii_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithSpecialAttack();
							}
						}
						else if( thePlayer.GetEquippedSign() == ST_Quen)
						{	
							if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 0)
							{
								ACS_PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdSpecialAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinShieldSpecialAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawSpecialAttack();
							}
							else if (ACS_Armiger_Quen_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithSpecialAttack();
							}
						}
						else if( thePlayer.GetEquippedSign() == ST_Aard )
						{	
							if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 0)
							{
								ACS_PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdSpecialAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinShieldSpecialAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawSpecialAttack();
							}
							else if (ACS_Armiger_Aard_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithSpecialAttack();
							}
						}
						else if( thePlayer.GetEquippedSign() == ST_Yrden )
						{
							if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 0)
							{
								ACS_PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdSpecialAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinShieldSpecialAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawSpecialAttack();
							}
							else if (ACS_Armiger_Yrden_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithSpecialAttack();
							}
						}
						else if( thePlayer.GetEquippedSign() == ST_Igni )
						{	
							if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 0)
							{
								ACS_PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 1)
							{
								ArmigerModeOlgierdSpecialAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 2)
							{
								ArmigerModeEredinShieldSpecialAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 3)
							{
								ArmigerModeClawSpecialAttack();
							}
							else if (ACS_Armiger_Igni_Set_Sign_Weapon_Type() == 4)
							{
								ArmigerModeImlerithSpecialAttack();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 1 && !thePlayer.IsWeaponHeld( 'fist' ))
					{
						if (thePlayer.IsWeaponHeld('silversword'))
						{
							if( ACS_GetFocusModeSilverWeapon() == 0 )
							{
								ACS_PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 1 )
							{	
								FocusModeOlgierdSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 2 )
							{	
								FocusModeSpearSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 3)
							{	
								FocusModeEredinShieldSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 4 )
							{	
								FocusModeGregSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 5 )
							{
								FocusModeImlerithSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 6 )
							{	
								FocusModeGiantSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 7 )
							{	
								FocusModeClawSpecialAttack();
							}
							else if( ACS_GetFocusModeSilverWeapon() == 8 )
							{	
								FocusModeAxeSpecialAttack();
							}
						}
						else if (thePlayer.IsWeaponHeld('steelsword'))
						{
							if( ACS_GetFocusModeSteelWeapon() == 0 )
							{
								ACS_PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 1 )
							{	
								FocusModeOlgierdSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 2 )
							{	
								FocusModeSpearSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 3)
							{	
								FocusModeEredinShieldSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 4 )
							{	
								FocusModeGregSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 5 )
							{
								FocusModeImlerithSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 6 )
							{	
								FocusModeGiantSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 7 )
							{	
								FocusModeClawSpecialAttack();
							}
							else if( ACS_GetFocusModeSteelWeapon() == 8 )
							{	
								FocusModeAxeSpecialAttack();
							}
						}
					}
					else if ( ACS_GetWeaponMode() == 2 && !thePlayer.IsWeaponHeld( 'fist' ) )
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							if ( ACS_GetHybridModeForwardSpecialAttack() == 0 )
							{
								if (!thePlayer.HasTag('HybridDefaultWeaponTicket')){thePlayer.AddTag('HybridDefaultWeaponTicket');}

								ACS_PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 1 )
							{
								if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

								HybridModeOlgierdForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 2 )
							{
								if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

								HybridModeEredinShieldForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 3 )
							{
								if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

								HybridModeClawForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 4 )
							{
								if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

								HybridModeImlerithForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 5 )
							{
								if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

								HybridModeSpearForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 6 )
							{
								if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

								HybridModeGregForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 7 )
							{
								if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

								HybridModeAxeForwardSpecialAttack();
							}
							else if ( ACS_GetHybridModeForwardSpecialAttack() == 8 )
							{
								if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}

								HybridModeGiantForwardSpecialAttack();
							}
						}
						else
						{
							if ( ACS_GetHybridModeSpecialAttack() == 0 )
							{
								if (!thePlayer.HasTag('HybridDefaultWeaponTicket')){thePlayer.AddTag('HybridDefaultWeaponTicket');}

								ACS_PrimaryWeaponSwitch(); 

								GeraltSpecialLightAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 1 )
							{
								if (!thePlayer.HasTag('HybridOlgierdWeaponTicket')){thePlayer.AddTag('HybridOlgierdWeaponTicket');}

								HybridModeOlgierdSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 2 )
							{
								if (!thePlayer.HasTag('HybridEredinWeaponTicket')){thePlayer.AddTag('HybridEredinWeaponTicket');}

								HybridModeEredinShieldSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 3 )
							{
								if (!thePlayer.HasTag('HybridClawWeaponTicket')){thePlayer.AddTag('HybridClawWeaponTicket');}

								HybridModeClawSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 4 )
							{
								if (!thePlayer.HasTag('HybridImlerithWeaponTicket')){thePlayer.AddTag('HybridImlerithWeaponTicket');}

								HybridModeImlerithSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 5 )
							{
								if (!thePlayer.HasTag('HybridSpearWeaponTicket')){thePlayer.AddTag('HybridSpearWeaponTicket');}

								HybridModeSpearSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 6 )
							{
								if (!thePlayer.HasTag('HybridGregWeaponTicket')){thePlayer.AddTag('HybridGregWeaponTicket');}

								HybridModeGregSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 7 )
							{
								if (!thePlayer.HasTag('HybridAxeWeaponTicket')){thePlayer.AddTag('HybridAxeWeaponTicket');}

								HybridModeAxeSpecialAttack();
							}
							else if ( ACS_GetHybridModeSpecialAttack() == 8 )
							{
								if (!thePlayer.HasTag('HybridGiantWeaponTicket')){thePlayer.AddTag('HybridGiantWeaponTicket');}
								
								HybridModeGiantSpecialAttack();
							}
						}
					}
					else if (ACS_GetWeaponMode() == 3 && !thePlayer.IsWeaponHeld( 'fist' ) )
					{
						if (thePlayer.IsWeaponHeld('silversword'))
						{
							if( ACS_GetItem_Eredin_Silver() )
							{	
								FocusModeEredinShieldSpecialAttack();
							}
							else if( ACS_GetItem_Olgierd_Silver() )
							{	
								EquipmentModeOlgierdSpecialAttack();
							}
							else if( ACS_GetItem_Claws_Silver() )
							{	
								FocusModeClawSpecialAttack();
							}
							else if( ACS_GetItem_Imlerith_Silver() )
							{
								FocusModeImlerithSpecialAttack();
							}
							else if( ACS_GetItem_Spear_Silver() )
							{	
								FocusModeSpearSpecialAttack();
							}
							else if( ACS_GetItem_Greg_Silver() )
							{	
								FocusModeGregSpecialAttack();
							}
							else if( ACS_GetItem_Hammer_Silver() )
							{	
								FocusModeGiantSpecialAttack();
							}
							else if( ACS_GetItem_Axe_Silver() )
							{	
								FocusModeAxeSpecialAttack();
							}
							else if( ACS_GetItem_Katana_Silver() )
							{	
								FocusModeGregSpecialAttack();
							}
							else
							{			
								ACS_DefaultSwitch();

								GeraltSpecialLightAttack();
							}
						}
						else if (thePlayer.IsWeaponHeld('steelsword'))
						{
							if( ACS_GetItem_Eredin_Steel() )
							{	
								FocusModeEredinShieldSpecialAttack();
							}
							else if( ACS_GetItem_Olgierd_Steel() )
							{	
								EquipmentModeOlgierdSpecialAttack();
							}
							else if( ACS_GetItem_Claws_Steel() )
							{	
								FocusModeClawSpecialAttack();
							}
							else if( ACS_GetItem_Imlerith_Steel() )
							{
								FocusModeImlerithSpecialAttack();
							}
							else if( ACS_GetItem_Spear_Steel() )
							{	
								FocusModeSpearSpecialAttack();
							}
							else if( ACS_GetItem_Greg_Steel() )
							{	
								FocusModeGregSpecialAttack();
							}
							else if( ACS_GetItem_Hammer_Steel() )
							{	
								FocusModeGiantSpecialAttack();
							}
							else if( ACS_GetItem_Axe_Steel() )
							{	
								FocusModeAxeSpecialAttack();
							}
							else if( ACS_GetItem_Katana_Steel() )
							{	
								FocusModeGregSpecialAttack();
							}
							else
							{					
								ACS_DefaultSwitch();

								GeraltSpecialLightAttack();
							}
						}
					}

					DeactivateThings();
				}
			}
			else
			{
				action_interrupt();

				thePlayer.PrepareToAttack();
				thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
				thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
			}
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function RandomKickActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt_with_igni_sword();
				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (thePlayer.HasTag('axii_sword_equipped'))
			{
				RemoveTimer('ACS_Shield_Spawn_Delay');

				AddTimer('ACS_Shield_Spawn_Delay', 0.5, false);
			}
															
			geraltRandomKick();

			RemoveTimer('ACS_Shout');

			RemoveTimer('ACS_Blood_Spray');

			AddTimer('ACS_KickDamage', 0.4, false);
		}
	}

	function IgniCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_can_perform_guard_attack())
		{
			ACS_refresh_guard_attack_cooldown();

			ACS_PrimaryWeaponSwitch();	

			if (thePlayer.GetTarget().IsHuman())
			{
				geraltRandomIgniCounter_Human();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}	
			else if (thePlayer.GetTarget().IsMonster())
			{
				geraltRandomIgniCounter_Monster();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}
			else
			{
				geraltRandomIgniCounter_Monster();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}
		}
	}

	function AxiiCounterActual()
	{
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();
														
		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				if (thePlayer.HasTag('axii_sword_equipped'))
				{
					RemoveTimer('ACS_Shield_Spawn_Delay');

					AddTimer('ACS_Shield_Spawn_Delay', 0.5, false);

					geraltRandomAxiiCounter();
				}
				else if (thePlayer.HasTag('axii_secondary_sword_equipped'))
				{
					if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
					{
						Grow_Geralt_Immediate_Fast(); //ACS

						thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
					}

					geraltRandomGregCounter();

					thePlayer.SetAnimationSpeedMultiplier(1.5  );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
				}
			}
		}										
	}

	function HybridModeEredinShieldCounterActual()
	{														
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				ACS_PrimaryWeaponSwitch();

				RemoveTimer('ACS_Shield_Spawn_Delay');

				AddTimer('ACS_Shield_Spawn_Delay', 0.5, false);

				geraltRandomAxiiCounter();
			}
		}										
	}

	function HybridModeGregCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				ACS_SecondaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				ACS_SecondaryWeaponSwitch();

				geraltRandomGregCounter();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}
		}										
	}

	function AardCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();
				// Created and designed by error_noaccess, exclusive to the Wolven Workshop discord server and Github. 
				// Not authorized to be distributed elsewhere, unless you ask me nicely.

				if (thePlayer.HasTag('aard_sword_equipped'))
				{				
					geraltRandomAardCounter();

					thePlayer.SetAnimationSpeedMultiplier(1.5  );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
															
					ACS_StaminaDrain(1);
				}
				else if (thePlayer.HasTag('aard_secondary_sword_equipped'))
				{
					geraltRandomAxeCounter();
				}
			}
		}									
	}

	function AxeCounter()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();
				// Created and designed by error_noaccess, exclusive to the Wolven Workshop discord server and Github. 
				// Not authorized to be distributed elsewhere, unless you ask me nicely.

				geraltRandomAxeCounter();
			}
		}									
	}

	function HybridModeClawCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();
				// Created and designed by error_noaccess, exclusive to the Wolven Workshop discord server and Github. 
				// Not authorized to be distributed elsewhere, unless you ask me nicely.

				ACS_PrimaryWeaponSwitch();

				geraltRandomAardCounter();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}
		}									
	}

	function HybridModeAxeCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_SecondaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();
				// Created and designed by error_noaccess, exclusive to the Wolven Workshop discord server and Github. 
				// Not authorized to be distributed elsewhere, unless you ask me nicely.
				ACS_SecondaryWeaponSwitch();
				geraltRandomAxeCounter();
			}
		}									
	}

	function QuenCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				if (thePlayer.HasTag('quen_sword_equipped'))
				{														
					geraltRandomQuenCounter();

					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						thePlayer.SetAnimationSpeedMultiplier(1.75  );

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
					}
					else
					{
						thePlayer.SetAnimationSpeedMultiplier(1.5  );

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
															
					ACS_StaminaDrain(1);
				}
				else if (thePlayer.HasTag('quen_secondary_sword_equipped'))
				{
					geraltRandomSpearCounter();

					thePlayer.SetAnimationSpeedMultiplier(1.5  );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
				}
			}
		}
	}

	function HybridModeOlgierdCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				ACS_PrimaryWeaponSwitch();

				geraltRandomQuenCounter();

				if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
				{
					thePlayer.SetAnimationSpeedMultiplier(1.75  );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
				}
				else
				{
					thePlayer.SetAnimationSpeedMultiplier(1.5  );

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
				}
			}
		}
	}

	function HybridModeSpearCounterActual()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}
																
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_SecondaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				ACS_SecondaryWeaponSwitch();
				
				geraltRandomSpearCounter();

				thePlayer.SetAnimationSpeedMultiplier(1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}
		}
	}

	function YrdenCounterActual()
	{														
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				if (thePlayer.HasTag('yrden_sword_equipped'))
				{									
					geraltRandomYrdenCounter();	
				}
				else if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
				{
					if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
					{
						Grow_Geralt_Immediate_Fast(); //ACS

						thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
					}

					geraltRandomGiantCounter();
				}
			}
		}	
	}

	function HybridModeImlerithCounterActual()
	{														
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();
				
				ACS_PrimaryWeaponSwitch();
														
				geraltRandomYrdenCounter();	
			}
		}	
	}

	function HybridModeGiantCounterActual()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) 
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_SecondaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_guard_attack())
			{
				ACS_refresh_guard_attack_cooldown();

				ACS_SecondaryWeaponSwitch();

				geraltRandomGiantCounter();
			}
		}	
	}

	function VampClawLightAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_can_perform_light_attack())
		{
			ACS_ExplorationDelayHack();

			if (ACS_StaminaBlockAction_Enabled() 
			&& VampireClawsStaminaCheck()
			)
			{					 
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_refresh_light_attack_cooldown();

				ACS_PrimaryWeaponSwitch();

				ACS_ClawEquipStandalone();

				/*								
				if (
				ccompEnabled
				&& ACS_AttitudeCheck (actor)
				&& actor.IsHuman()
				&& FinisherDistanceCheck(finisherActorTarget)
				)
				{
					if ( actor.HasBuff( EET_HeavyKnockdown )  
					|| actor.HasBuff( EET_Knockdown ) 
					|| actor.HasBuff( EET_Ragdoll ) )
					{
						ACS_Setup_Combat_Action_Light();
					}
					else
					{
						//ACS_Dodge();
						action_interrupt();
						thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
					}
				}
				else
				{
					*/
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (ACS_VampireSoundEffects_Enabled()) {VampVoiceEffects_Effort_Big();}						

						if (thePlayer.GetIsSprinting())
						{
							geraltClawSprintingAttack();
						}
						else
						{
							geraltRandomClawComboAttack();
						}
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						Bruxa_Scream();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						if (ACS_VampireSoundEffects_Enabled()) {VampVoiceEffects_Effort();}

						geraltRandomClawFistAttack();
					}
				//}

				ACS_StaminaDrain(1);
			}
		}
	}

	function VampClawHeavyAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_can_perform_heavy_attack())
		{
			if (ACS_StaminaBlockAction_Enabled() 
			&& VampireClawsStaminaCheck()
			)
			{
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_refresh_heavy_attack_cooldown();
											
				ACS_PrimaryWeaponSwitch();

				ACS_ClawEquipStandalone();

				/*					
				if (
				ccompEnabled
				&& ACS_AttitudeCheck (actor) 
				&& actor.IsHuman()
				&& FinisherDistanceCheck(finisherActorTarget)
				)
				{
					if ( actor.HasBuff( EET_HeavyKnockdown )  
					|| actor.HasBuff( EET_Knockdown ) 
					|| actor.HasBuff( EET_Ragdoll ) )
					{
						ACS_Setup_Combat_Action_Heavy();	
					}
					else
					{
						//ACS_Dodge();
						action_interrupt();
						thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
					}
				}
				else
				{
					*/
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (ACS_VampireSoundEffects_Enabled()) {VampVoiceEffects_Monster();}

						geraltRandomClawAttackSpecialDash();

						thePlayer.SetSprintActionPressed( false );
						thePlayer.SetSprintToggle( false );
						thePlayer.SetWalkToggle( true );
					}
					else
					{
						if (ACS_VampireSoundEffects_Enabled()) {VampVoiceEffects_Effort_Big();}

						geraltRandomHeavyClawAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
				//}

				ACS_StaminaDrain(2);
			}
		}
	}

	function ShockwaveFistLightAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		ACS_ExplorationDelayHack();

		if (ACS_can_perform_light_attack())
		{
			if (
			ACS_StaminaBlockAction_Enabled() 
			&& 
			StaminaCheck()
			)
			{ 
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_refresh_light_attack_cooldown();

				geraltRandomLightFistAttack();

				AddTimer('ACS_portable_aard', 0.5, false);

				ACS_StaminaDrain(2);
			}
		}
	}

	function ShockwaveFistHeavyAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_can_perform_heavy_attack())
		{
			if (
			ACS_StaminaBlockAction_Enabled() 
			&& 
			StaminaCheck()
			)
			{					 
				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else
			{
				ACS_refresh_heavy_attack_cooldown();

				//geraltRandomHeavyFistAttack();

				geraltRandomLightFistAttack();

				AddTimer('ACS_portable_aard', 0.5, false);

				ACS_StaminaDrain(2);
			}
		}
	}

	function GeraltLightAttack()
	{		
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (thePlayer.HasTag('igni_secondary_sword_equipped_TAG'))
		{
			thePlayer.RemoveTag('igni_secondary_sword_equipped_TAG');	
		}
		
		if (!thePlayer.HasTag('igni_sword_equipped_TAG'))
		{
			thePlayer.AddTag('igni_sword_equipped_TAG');	
		}

		if (ACS_Zireael_Check())
		{
			GeralCiriLightAttack();
		}
		else
		{
			if (ACS_Wolf_School_Check() || ACS_Armor_Alpha_Equipped_Check())
			{
				GeraltWolfLightAttack();
			}
			else if (ACS_Bear_School_Check())
			{
				GeraltBearLightAttack();
			}
			else if (ACS_Cat_School_Check())
			{
				GeraltCatLightAttack();
			}
			else if (ACS_Griffin_School_Check())
			{
				GeraltGriffinLightAttack();
			}
			else if (ACS_Manticore_School_Check())
			{
				GeraltManticoreLightAttack();
			}
			else if (ACS_Forgotten_Wolf_Check() || ACS_Armor_Omega_Equipped_Check())
			{
				GeraltForgottenWolfLightAttack();
			}
			else if (ACS_Viper_School_Check())
			{
				GeraltViperLightAttack();
			}
			else
			{
				finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
				ccomp = finisherActorTarget.GetComponent("Finish");
				ccompEnabled = ccomp.IsEnabled();

				if (
				ccompEnabled
				//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
				&& FinisherDistanceCheck(finisherActorTarget)
				)
				{
					if ( actor.HasBuff( EET_HeavyKnockdown )  
					|| actor.HasBuff( EET_Knockdown ) 
					|| actor.HasBuff( EET_Ragdoll ) )
					{
						action_interrupt_with_igni_sword();
						ACS_Setup_Combat_Action_Light();
					}
					else
					{
						action_interrupt_with_igni_sword();
						thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
					}
				}
				else
				{
					ACS_Setup_Light_Attack_Internal();
				}
			}
		}
	}

	function GeraltHeavyAttack()
	{					
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (thePlayer.HasTag('igni_sword_equipped_TAG'))
		{
			thePlayer.RemoveTag('igni_sword_equipped_TAG');	
		}
		
		if (!thePlayer.HasTag('igni_secondary_sword_equipped_TAG'))
		{
			thePlayer.AddTag('igni_secondary_sword_equipped_TAG');	
		}

		if (ACS_Zireael_Check())
		{
			GeraltCiriHeavyAttack();
		}
		else
		{
			if (ACS_Wolf_School_Check() || ACS_Armor_Alpha_Equipped_Check())
			{
				GeraltWolfHeavyAttack();
			}
			else if (ACS_Bear_School_Check())
			{
				GeraltBearHeavyAttack();
			}
			else if (ACS_Cat_School_Check())
			{
				GeraltCatHeavyAttack();
			}
			else if (ACS_Griffin_School_Check())
			{
				GeraltGriffinHeavyAttack();
			}
			else if (ACS_Manticore_School_Check())
			{
				GeraltManticoreHeavyAttack();
			}
			else if (ACS_Forgotten_Wolf_Check() || ACS_Armor_Omega_Equipped_Check())
			{
				GeraltForgottenWolfHeavyAttack();
			}
			else if (ACS_Viper_School_Check())
			{
				GeraltViperHeavyAttack();
			}
			else
			{
				finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
				ccomp = finisherActorTarget.GetComponent("Finish");
				ccompEnabled = ccomp.IsEnabled();

				if (
				ccompEnabled
				//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
				&& FinisherDistanceCheck(finisherActorTarget)
				)
				{
					if ( actor.HasBuff( EET_HeavyKnockdown )  
					|| actor.HasBuff( EET_Knockdown ) 
					|| actor.HasBuff( EET_Ragdoll ) )
					{
						action_interrupt_with_igni_sword();
						ACS_Setup_Combat_Action_Heavy();
					}
					else
					{
						action_interrupt_with_igni_sword();
						thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
					}
				}
				else
				{
					ACS_Setup_Heavy_Attack_Internal();
				}
			}
		}
	}

	function GeraltSpecialLightAttack()
	{
		if (thePlayer.HasTag('igni_secondary_sword_equipped_TAG'))
		{
			thePlayer.RemoveTag('igni_secondary_sword_equipped_TAG');	
		}
		
		if (!thePlayer.HasTag('igni_sword_equipped_TAG'))
		{
			thePlayer.AddTag('igni_sword_equipped_TAG');	
		}
				
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if (ACS_Zireael_Check())
		{
			GeraltCiriSpecialLightAttack();
		}
		else
		{
			if (ACS_Wolf_School_Check()
			|| ACS_Forgotten_Wolf_Check()
			|| ACS_Armor_Equipped_Check())
			{
				if(thePlayer.GetStat(BCS_Stamina) > 0)
				{
					action_interrupt_with_igni_sword();
				}

				thePlayer.SetBehaviorVariable( 'combatActionType', (int)CAT_SpecialAttack );
				thePlayer.SetBehaviorVariable( 'playerAttackType', 0 );
				thePlayer.RaiseForceEvent	 	( 'CombatAction' );
				
				thePlayer.PrepareToAttack();
				thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
				thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
			}
			else if (ACS_Bear_School_Check())
			{
				GeraltBearSpecialLightAttack();
			}
			else if (ACS_Cat_School_Check())
			{
				GeraltCatSpecialLightAttack();
			}
			else if (ACS_Griffin_School_Check())
			{
				GeraltGriffinSpecialLightAttack();
			}
			else if (ACS_Manticore_School_Check())
			{
				GeraltManticoreSpecialLightAttack();
			}
			else if (ACS_Viper_School_Check())
			{
				GeraltViperSpecialLightAttack();
			}
			else
			{
				/*
				if( RandF() < 0.5 ) 
				{
					PlayerPlayAnimation( 'attack_knee_left_003_ACS' );
				}
				else
				{
					PlayerPlayAnimation( 'attack_knee_right_002_ACS' );
				}

				AddTimer('Whirl_Delay_Timer', 1, false);
				*/

				if(thePlayer.GetStat(BCS_Stamina) > 0)
				{
					action_interrupt_with_igni_sword();
				}

				thePlayer.PrepareToAttack();
				thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
				thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
			}
		}
	}

	timer function Whirl_Delay_Timer(dt : float, id : int)
	{
		thePlayer.ClearAnimationSpeedMultipliers();

		if(thePlayer.GetStat(BCS_Stamina) > 0)
		{
			action_interrupt_with_igni_sword();
		}

		if (thePlayer.HasTag('igni_secondary_sword_equipped_TAG'))
		{
			thePlayer.RemoveTag('igni_secondary_sword_equipped_TAG');	
		}
		
		if (!thePlayer.HasTag('igni_sword_equipped_TAG'))
		{
			thePlayer.AddTag('igni_sword_equipped_TAG');	
		}

		thePlayer.PrepareToAttack();
		thePlayer.SetPlayedSpecialAttackMissingResourceSound(false);
		thePlayer.AddTimer( 'IsSpecialLightAttackInputHeld', 0.00001, true );
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Wolf School

	function GeraltWolfLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_Wolf();
					}
					else
					{
						geraltRandomGeraltLightAttack_Wolf();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltWolfHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_Wolf();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Wolf();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltWolfSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);		
						
					geraltRandomGeraltSpecialAttack_Wolf();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Bear School

	function GeraltBearLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 0.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 0.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_Bear();
					}
					else
					{
						geraltRandomGeraltLightAttack_Bear();
					}	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltBearHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 0.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 0.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_Bear();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Bear();
					}												

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltBearSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						
					geraltRandomGeraltSpecialAttack_Bear();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Cat School

	function GeraltCatLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttackForward_Cat();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

						geraltRandomGeraltLightAttack_Cat();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltCatHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

						geraltRandomGeraltHeavyAttackForward_Cat();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

						geraltRandomGeraltLightAttack_Cat();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltCatSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	
						
					geraltRandomGeraltSpecialAttack_Cat();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Griffin School

	function GeraltGriffinLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						geraltRandomGeraltLightAttackForward_Griffin();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttack_Griffin();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltGriffinHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltHeavyAttackForward_Griffin();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

						geraltRandomGeraltHeavyAttack_Griffin();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltGriffinSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}		
						
					geraltRandomGeraltSpecialAttack_Griffin();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Manticore School

	function GeraltManticoreLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttackForward_Manticore();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttack_Manticore();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltManticoreHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();
																	
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					geraltRandomGeraltHeavyAttack_Manticore();

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltManticoreSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);		
						
					geraltRandomGeraltSpecialAttack_Manticore();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Viper School

	function GeraltViperLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();									

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttackForward_Viper();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltLightAttack_Viper();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltViperHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltHeavyAttackForward_Viper();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomGeraltHeavyAttack_Viper();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltViperSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	
						
					geraltRandomGeraltSpecialAttack_Viper();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Forgotten Wolf

	function GeraltForgottenWolfLightAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_Wolf();
					}
					else
					{
						geraltRandomGeraltLightAttack_Wolf();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltForgottenWolfHeavyAttack()
	{	
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_Wolf();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Wolf();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltForgottenWolfSpecialLightAttack()
	{
		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					AddTimer('ACS_ResetAnimation', 0.125  , false);		
						
					geraltRandomGeraltSpecialAttack_Wolf();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Ciri Attacks

	function GeralCiriLightAttack()
	{	
		if (!thePlayer.IsEffectActive('fury_403_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_403_ciri' );
		}

		if (!thePlayer.IsEffectActive('fury_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_ciri' );
		}

		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltLightAttackForward_Ciri();
					}
					else
					{
						geraltRandomGeraltLightAttack_Wolf();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function GeraltCiriHeavyAttack()
	{	
		if (!thePlayer.IsEffectActive('fury_403_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_403_ciri' );
		}

		if (!thePlayer.IsEffectActive('fury_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_ciri' );
		}

		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_heavy_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGeraltHeavyAttackForward_Ciri();
					}
					else
					{
						geraltRandomGeraltHeavyAttack_Wolf();
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function GeraltCiriSpecialLightAttack()
	{
		if (!thePlayer.IsEffectActive('fury_403_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_403_ciri' );
		}

		if (!thePlayer.IsEffectActive('fury_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_ciri' );
		}

		ACS_ExplorationDelayHack();

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						
					geraltRandomGeraltSpecialAttack_Ciri();

					ACS_StaminaDrain(3);
				}
			}
		}	
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ArmigerModeOlgierdLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
														
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomOlgierdPirouette();
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						Umbral_Slash_Single();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}		

						geraltRandomOlgierdAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function ArmigerModeClawLightAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
																
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();
																	
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (thePlayer.GetIsSprinting())
						{
							geraltClawSprintingAttack();
						}
						else
						{
							geraltRandomClawComboAttack();
						}		
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
					{
						Bruxa_Scream();

						thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
					}
					else
					{
						geraltRandomClawAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function ArmigerModeEredinLightAttack()
	{											
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				ACS_PrimaryWeaponSwitch();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
																	
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
																	
					thePlayer.BreakPheromoneEffect();
																	
					ACS_PrimaryWeaponSwitch();
																													
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomShieldComboAttack();
						}
						else
						{
							geraltRandomShieldAttack();
						}
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomEredinComboAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
																			
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
						else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
						&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
						{
							Sparagmos();

							if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
							{	
								
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
							}
							else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
							{	
								
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
							else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
							{
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
						}
						else
						{
							geraltRandomEredinAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
																			
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}	
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function ArmigerModeImlerithLightAttack()
	{											
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
																		
					thePlayer.BreakPheromoneEffect();
																		
					ACS_PrimaryWeaponSwitch();

					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomImlerithAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}																										
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_TKInit();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandomImlerithBerserkAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(2  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function ArmigerModeGeraltHeavyAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		if ( thePlayer.HasTag('acs_bow_active') )
		{
			if ( ACS_StaminaBlockAction_Enabled() 
			&& StaminaCheck()
			)
			{ 
				ACS_RangedWeaponSwitch();

				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') == 0  && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				if ( ACS_can_shoot_bow_stationary() )
				{
					ACS_refresh_bow_stationary_cooldown();

					ACS_RangedWeaponSwitch();

					//geraltShootBowStationary();

					AddTimer('ACS_ShootBowStationary', 0.00001, false);

					ACS_StaminaDrain(2);
				}
			}
			else
			{
				if ( ACS_can_shoot_bow_moving() )
				{
					ACS_refresh_bow_moving_cooldown();

					ACS_RangedWeaponSwitch();

					//geraltShootBowMoving();

					AddTimer('ACS_ShootBowMoving', 0.00001, false);

					ACS_StaminaDrain(2);
				}
			}
		}
		else if ( thePlayer.HasTag('acs_crossbow_active') )
		{
			if ( ACS_StaminaBlockAction_Enabled() 
			&& StaminaCheck()
			)
			{ 
				ACS_RangedWeaponSwitch();

				if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') == 0  && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				if ( ACS_can_shoot_crossbow() )
				{
					ACS_refresh_crossbow_cooldown();

					ACS_RangedWeaponSwitch();

					geraltShootCrossbowStationary();

					ACS_StaminaDrain(2);
				}
			}
			else
			{
				if ( ACS_can_perform_heavy_attack() )
				{
					ACS_refresh_heavy_attack_cooldown();

					ACS_RangedWeaponSwitch();

					geraltShootCrossbowMoving();

					ACS_StaminaDrain(2);
				}
			}
		}
		else if ( !thePlayer.HasTag('acs_bow_active') && !thePlayer.HasTag('acs_crossbow_active') )
		{
			if (thePlayer.HasTag('igni_sword_equipped_TAG'))
			{
				thePlayer.RemoveTag('igni_sword_equipped_TAG');	
			}
			
			if (!thePlayer.HasTag('igni_secondary_sword_equipped_TAG'))
			{
				thePlayer.AddTag('igni_secondary_sword_equipped_TAG');	
			}

			if (ACS_Zireael_Check())
			{
				GeraltCiriHeavyAttack();
			}
			else
			{
				if (ACS_Wolf_School_Check() || ACS_Armor_Alpha_Equipped_Check())
				{
					GeraltWolfHeavyAttack();
				}
				else if (ACS_Bear_School_Check())
				{
					GeraltBearHeavyAttack();
				}
				else if (ACS_Cat_School_Check())
				{
					GeraltCatHeavyAttack();
				}
				else if (ACS_Griffin_School_Check())
				{
					GeraltGriffinHeavyAttack();
				}
				else if (ACS_Manticore_School_Check())
				{
					GeraltManticoreHeavyAttack();
				}
				else if (ACS_Forgotten_Wolf_Check() || ACS_Armor_Omega_Equipped_Check())
				{
					GeraltForgottenWolfHeavyAttack();
				}
				else if (ACS_Viper_School_Check())
				{
					GeraltViperHeavyAttack();
				}
				else
				{
					if (
					ccompEnabled
					//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
					&& FinisherDistanceCheck(finisherActorTarget)
					)
					{
						if ( actor.HasBuff( EET_HeavyKnockdown )  
						|| actor.HasBuff( EET_Knockdown ) 
						|| actor.HasBuff( EET_Ragdoll ) )
						{
							ACS_SecondaryWeaponSwitch();
							action_interrupt_with_igni_sword();
							ACS_Setup_Combat_Action_Heavy();
						}
						else
						{
							//ACS_Dodge();
							action_interrupt_with_igni_sword();
							ACS_SecondaryWeaponSwitch();
							thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
						}
					}
					else
					{
						ACS_SecondaryWeaponSwitch();
								
						ACS_Setup_Heavy_Attack_Internal();
					}
				}
			}
		}
	}

	function ArmigerModeSpearHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			thePlayer.BreakPheromoneEffect();

			if ( thePlayer.HasTag('acs_bow_active') )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_RangedWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') == 0  && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					if ( ACS_can_shoot_bow_stationary() )
					{
						ACS_refresh_bow_stationary_cooldown();

						ACS_RangedWeaponSwitch();

						//geraltShootBowStationary();

						AddTimer('ACS_ShootBowStationary', 0.00001, false);

						ACS_StaminaDrain(2);
					}
				}
				else
				{
					if ( ACS_can_shoot_bow_moving() )
					{
						ACS_refresh_bow_moving_cooldown();

						ACS_RangedWeaponSwitch();

						//geraltShootBowMoving();

						AddTimer('ACS_ShootBowMoving', 0.00001, false);

						ACS_StaminaDrain(2);
					}
				}
			}
			else if ( thePlayer.HasTag('acs_crossbow_active') )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_RangedWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') == 0  && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					if ( ACS_can_shoot_crossbow() )
					{
						ACS_refresh_crossbow_cooldown();

						ACS_RangedWeaponSwitch();

						geraltShootCrossbowStationary();

						ACS_StaminaDrain(2);
					}
				}
				else
				{
					if ( ACS_can_perform_heavy_attack() )
					{
						ACS_refresh_heavy_attack_cooldown();

						ACS_RangedWeaponSwitch();

						geraltShootCrossbowMoving();

						ACS_StaminaDrain(2);
					}
				}
			}
			else if ( !thePlayer.HasTag('acs_bow_active') && !thePlayer.HasTag('acs_crossbow_active') )
			{
				if ( ACS_can_perform_heavy_attack() )
				{
					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					)
					{ 
						ACS_SecondaryWeaponSwitch();

						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						ACS_refresh_heavy_attack_cooldown();
																	
						ACS_SecondaryWeaponSwitch();

						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomSpearAttackAlt();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
																		
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						}
						else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
						&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
						{
							Storm_Spear();

							if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
							{	
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
							}
							else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
							{	
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
							else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
							{
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
						}
						else
						{
							geraltRandomSpearAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
																		
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						}

						ACS_StaminaDrain(2);
					}
				}
			}
		//}
	}

	function ArmigerModeAxeHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( thePlayer.HasTag('acs_bow_active') )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_RangedWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') == 0  && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					if ( ACS_can_shoot_bow_stationary() )
					{
						ACS_refresh_bow_stationary_cooldown();

						ACS_RangedWeaponSwitch();

						//geraltShootBowStationary();

						AddTimer('ACS_ShootBowStationary', 0.00001, false);

						ACS_StaminaDrain(2);
					}
				}
				else
				{
					if ( ACS_can_shoot_bow_moving() )
					{
						ACS_refresh_bow_moving_cooldown();

						ACS_RangedWeaponSwitch();

						//geraltShootBowMoving();

						AddTimer('ACS_ShootBowMoving', 0.00001, false);

						ACS_StaminaDrain(2);
					}
				}
			}
			else if ( thePlayer.HasTag('acs_crossbow_active') )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_RangedWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') == 0  && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					if ( ACS_can_shoot_crossbow() )
					{
						ACS_refresh_crossbow_cooldown();

						ACS_RangedWeaponSwitch();

						geraltShootCrossbowStationary();

						ACS_StaminaDrain(2);
					}
				}
				else
				{
					if ( ACS_can_perform_heavy_attack() )
					{
						ACS_refresh_heavy_attack_cooldown();

						ACS_RangedWeaponSwitch();

						geraltShootCrossbowMoving();

						ACS_StaminaDrain(2);
					}
				}
			}
			else if ( !thePlayer.HasTag('acs_bow_active') && !thePlayer.HasTag('acs_crossbow_active') )
			{
				if ( ACS_can_perform_heavy_attack() )
				{
					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					)
					{	
						ACS_SecondaryWeaponSwitch();

						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						ACS_refresh_heavy_attack_cooldown();											

						ACS_SecondaryWeaponSwitch();

						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{										
							geraltRandom2hAxeAttack_Armiger();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
																
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						}
						else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
						&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
						{
							Water_Aard();

							if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
							{	
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
							}
							else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
							{	
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
							else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
							{
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
						}
						else
						{
							geraltRandom2hAxeAttack_Armiger();

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }
					
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}

						ACS_StaminaDrain(2);													
					}				
				}
			}
		//}
	}

	function ArmigerModeGregHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_SecondaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			thePlayer.BreakPheromoneEffect();

			if ( thePlayer.HasTag('acs_bow_active') )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_RangedWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') == 0  && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					if ( ACS_can_shoot_bow_stationary() )
					{
						ACS_refresh_bow_stationary_cooldown();

						ACS_RangedWeaponSwitch();

						//geraltShootBowStationary();

						AddTimer('ACS_ShootBowStationary', 0.00001, false);

						ACS_StaminaDrain(2);
					}
				}
				else
				{
					if ( ACS_can_shoot_bow_moving() )
					{
						ACS_refresh_bow_moving_cooldown();

						ACS_RangedWeaponSwitch();

						//geraltShootBowMoving();

						AddTimer('ACS_ShootBowMoving', 0.00001, false);

						ACS_StaminaDrain(2);
					}
				}
			}
			else if ( thePlayer.HasTag('acs_crossbow_active') )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_RangedWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') == 0  && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					if ( ACS_can_shoot_crossbow() )
					{
						ACS_refresh_crossbow_cooldown();

						ACS_RangedWeaponSwitch();

						geraltShootCrossbowStationary();

						ACS_StaminaDrain(2);
					}
				}
				else
				{
					if ( ACS_can_perform_heavy_attack() )
					{
						ACS_refresh_heavy_attack_cooldown();

						ACS_RangedWeaponSwitch();

						geraltShootCrossbowMoving();

						ACS_StaminaDrain(2);
					}
				}
			}
			else if ( !thePlayer.HasTag('acs_bow_active') && !thePlayer.HasTag('acs_crossbow_active') )
			{
				if ( ACS_can_perform_heavy_attack() )
				{
					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					)
					{ 
						ACS_SecondaryWeaponSwitch();

						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						ACS_refresh_heavy_attack_cooldown();
																		
						if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}															

						ACS_SecondaryWeaponSwitch();

						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomGregAttackAlt();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
																		
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						}
						else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
						&& thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
						{
							Giant_Sword();

							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else
						{												
							geraltRandomGregAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
																		
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						}

						ACS_StaminaDrain(2);
					}
				}
			}
		}
	}

	function ArmigerModeHammerHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			thePlayer.BreakPheromoneEffect();

			if ( thePlayer.HasTag('acs_bow_active') )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_RangedWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') == 0  && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					if ( ACS_can_shoot_bow_stationary() )
					{
						ACS_refresh_bow_stationary_cooldown();

						ACS_RangedWeaponSwitch();

						//geraltShootBowStationary();

						AddTimer('ACS_ShootBowStationary', 0.00001, false);

						ACS_StaminaDrain(2);
					}
				}
				else
				{
					if ( ACS_can_shoot_bow_moving() )
					{
						ACS_refresh_bow_moving_cooldown();

						ACS_RangedWeaponSwitch();

						//geraltShootBowMoving();

						AddTimer('ACS_ShootBowMoving', 0.00001, false);

						ACS_StaminaDrain(2);
					}
				}
			}
			else if ( thePlayer.HasTag('acs_crossbow_active') )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_RangedWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') == 0  && theInput.GetActionValue('GI_AxisLeftY') == 0 )
				{
					if ( ACS_can_shoot_crossbow() )
					{
						ACS_refresh_crossbow_cooldown();

						ACS_RangedWeaponSwitch();

						geraltShootCrossbowStationary();

						ACS_StaminaDrain(2);
					}
				}
				else
				{
					if ( ACS_can_perform_heavy_attack() )
					{
						ACS_refresh_heavy_attack_cooldown();

						ACS_RangedWeaponSwitch();

						geraltShootCrossbowMoving();

						ACS_StaminaDrain(2);
					}
				}
			}
			else if ( !thePlayer.HasTag('acs_bow_active') && !thePlayer.HasTag('acs_crossbow_active') )
			{
				if ( ACS_can_perform_heavy_attack() )
				{
					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					)
					{	
						ACS_SecondaryWeaponSwitch();

						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						ACS_refresh_heavy_attack_cooldown();

						ACS_SecondaryWeaponSwitch();

						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{					
							geraltRandomHammerSpecialAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }

							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
						else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
						&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
						{
							Giant_Stomp();

							if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
							{	
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
							}
							else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
							{	
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
							else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
							{
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
						}
						else
						{
							geraltRandomHammerAttack();
						}

						ACS_StaminaDrain(2);											
					}
				}
			}
		//}
	}

	function FocusModeOlgierdLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
												
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomOlgierdLightAttackAlt();
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						Umbral_Slash_Single();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomOlgierdLightAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function EquipmentModeOlgierdLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
												
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomOlgierdLightAttackAlt();
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 
					&& ACS_GetItem_Iris()
					)
					{
						Umbral_Slash_Single();
					}
					else
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						geraltRandomOlgierdLightAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function HybridModeOlgierdLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
												
					geraltRandomOlgierdLightAttack();

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function HybridModeOlgierdForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}
												
					geraltRandomOlgierdLightAttackAlt();	

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function FocusModeClawLightAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
																			
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (thePlayer.GetIsSprinting())
						{
							geraltClawSprintingAttack();
						}
						else
						{
							geraltRandomClawLightAttackAlt();
						}
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
					{
						Bruxa_Scream();

						thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
					}
					else
					{
						geraltRandomClawLightAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeClawLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch();		

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
							
					geraltRandomClawLightAttack();

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeClawForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{			
					ACS_PrimaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();

					if (thePlayer.GetIsSprinting())
					{
						geraltClawSprintingAttack();
					}
					else
					{
						geraltRandomClawLightAttackAlt();
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeEredinShieldLightAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomShieldLightAttackAlt();
						}
						else
						{
							geraltRandomShieldLightAttack();
						}
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomEredinLightAttackAlt();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75  ); }
														
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						}
						else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
						&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
						{
							Sparagmos();

							if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
							{	
								
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
							}
							else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
							&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
							{	
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
							else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
							{
								thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
							}
						}
						else
						{
							geraltRandomEredinLightAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.75  ); }
														
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
						}	
					}

					ACS_StaminaDrain(1);	
				}
			}
		}
	}

	function HybridModeEredinShieldLightAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{		
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldLightAttack();
					}
					else
					{	
						geraltRandomEredinLightAttack();
					} 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function HybridModeEredinShieldForwardLightAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldLightAttackAlt();
					}
					else
					{
						geraltRandomEredinLightAttackAlt();
					} 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function FocusModeImlerithLightAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_PrimaryWeaponSwitch();
								
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomImlerithLightAttack();

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						ACS_TKInit();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{		
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandomImlerithLightAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeImlerithLightAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch();		

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_PrimaryWeaponSwitch();
													
					geraltRandomImlerithLightAttack(); 			

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}			
													
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeImlerithForwardLightAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{		
					ACS_PrimaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_PrimaryWeaponSwitch();

					geraltRandomImlerithLightAttack();
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeSpearLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();					
													
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomSpearLightAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						Storm_Spear();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandomSpearLightAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeSpearLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();
													
					geraltRandomSpearLightAttack(); 				

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}		
													
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeSpearForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();
													
					geraltRandomSpearLightAttackAlt(); 		

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}				
													
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeGregLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_SecondaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();
																					
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{		
						geraltRandomGregLightAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) )
					{
						Giant_Sword();

						thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
					}
					else
					{
						geraltRandomGregLightAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function HybridModeGregLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_SecondaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();
													
					geraltRandomGregLightAttack(); 		

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
													
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function HybridModeGregForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_SecondaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();		

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();
													
					geraltRandomGregLightAttackAlt(); 		

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}				
													
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
				
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		}
	}

	function FocusModeGiantLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();
								
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGiantAttackAlt();
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						Giant_Stomp();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						geraltRandomGiantAttack();
					}
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}
		
	function HybridModeGiantLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{		
					ACS_SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();
													
					geraltRandomGiantAttack();

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeGiantForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();
																				
					geraltRandomGiantAttackAlt();
	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeAxeLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }
					
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						geraltRandom2hAxeAttackAlt();
					}
					else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
					&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 1/3 )
					{
						Water_Aard();

						if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus )/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus ) * 2/3) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else if( thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 2/3
						&& thePlayer.GetStat( BCS_Focus ) < thePlayer.GetStatMax( BCS_Focus )) 
						{	
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
						else if( thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax(BCS_Focus) ) 
						{
							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) * 1/3);
						}
					}
					else
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }
					
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						geraltRandom2hAxeAttack();
					}

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeAxeLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();
																					
					geraltRandom2hAxeAttack();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function HybridModeAxeForwardLightAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if (ACS_can_perform_light_attack())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_light_attack_cooldown();
													
					thePlayer.BreakPheromoneEffect();
													
					ACS_SecondaryWeaponSwitch();
																					
					geraltRandom2hAxeAttackAlt();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25  ); }
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(1);
				}
			}
		//}
	}

	function FocusModeGiantHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
									
					ACS_SecondaryWeaponSwitch();
										
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGiantAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
					}
					else
					{
						geraltRandomGiantAttack();
					}
									
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeGiantHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
									
					ACS_SecondaryWeaponSwitch();

					geraltRandomGiantAttack();
									
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeGiantForwardHeavyAttack()
	{		
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
									
					thePlayer.BreakPheromoneEffect();
									
					ACS_SecondaryWeaponSwitch();
									
					geraltRandomGiantAttackAlt(); 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
						
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
									
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function FocusModeAxeHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
										
					thePlayer.BreakPheromoneEffect();
										
					ACS_SecondaryWeaponSwitch();
																				
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{				
						geraltRandom2hAxeAttackAlt();
					}
					else
					{
						geraltRandom2hAxeAttack();
					}

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
										
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}				
			}
		//}
	}

	function HybridModeAxeHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
										
					thePlayer.BreakPheromoneEffect();
										
					ACS_SecondaryWeaponSwitch();
										
					geraltRandom2hAxeAttack(); 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}															
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
										
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}				
			}
		//}
	}

	function HybridModeAxeForwardHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
										
					thePlayer.BreakPheromoneEffect();
										
					ACS_SecondaryWeaponSwitch();
										
					geraltRandom2hAxeAttackAlt(); 				

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}													

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
										
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);				
				}				
			}
		//}
	}

	function FocusModeSpearHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
											
					ACS_SecondaryWeaponSwitch();
											
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomSpearHeavyAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }
					}
					else
					{
						geraltRandomSpearHeavyAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }
					}

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeSpearHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
											
					ACS_SecondaryWeaponSwitch();
											
					geraltRandomSpearHeavyAttack(); 				

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeSpearForwardHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
											
					thePlayer.BreakPheromoneEffect();
											
					ACS_SecondaryWeaponSwitch();
											
					geraltRandomSpearHeavyAttackAlt(); 	
					
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function FocusModeGregHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_SecondaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_SecondaryWeaponSwitch();
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGregHeavyAttackAlt();
					}
					else
					{							
						geraltRandomGregHeavyAttack();
					}

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeGregHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_SecondaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_SecondaryWeaponSwitch();
												
					geraltRandomGregHeavyAttack(); 			

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}				
												
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
											
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeGregForwardHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_SecondaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_SecondaryWeaponSwitch();
												
					geraltRandomGregHeavyAttackAlt();	 				

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}			
												
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);	
				}
			}
		}
	}

	function FocusModeOlgierdHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
																			
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomOlgierdHeavyAttackAlt();

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	
					}
					else
					{
						geraltRandomOlgierdHeavyAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	
					}

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeOlgierdHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
												
					geraltRandomOlgierdHeavyAttack(); 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}						
												
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeOlgierdForwardHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
						
					geraltRandomOlgierdHeavyAttackAlt();

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function FocusModeEredinShieldHeavyAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomShieldHeavyAttackAlt();
						}
						else
						{
							
							geraltRandomShieldHeavyAttack();
						}
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomEredinHeavyAttackAlt();
						}
						else
						{
							geraltRandomEredinHeavyAttack();
						}	
					} 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);		

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeEredinShieldHeavyAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldHeavyAttack();
					}
					else
					{
						geraltRandomEredinHeavyAttack();
					} 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.6  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function HybridModeEredinShieldForwardHeavyAttack()
	{													
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
												
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldHeavyAttackAlt();
					}
					else
					{
						geraltRandomEredinHeavyAttackAlt();
					} 	

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		}
	}

	function FocusModeImlerithHeavyAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
																			
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomImlerithHeavyAttackAlt();
					}
					else
					{
						geraltRandomImlerithHeavyAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						ACS_StaminaDrain(2);
					}
				}
			}
		//}
	}

	function HybridModeImlerithHeavyAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
										
					ACS_PrimaryWeaponSwitch();
												
					geraltRandomImlerithHeavyAttack(); 			

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}																

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeImlerithForwardHeavyAttack()
	{													
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
					
					geraltRandomImlerithHeavyAttackAlt();

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function FocusModeClawHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
																			
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomClawHeavyAttackAlt();
					}
					else
					{
						geraltRandomClawHeavyAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeClawHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
												
					geraltRandomClawHeavyAttack(); 		

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}															

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					ACS_StaminaDrain(2);
				}
			}
		//}
	}

	function HybridModeClawForwardHeavyAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_heavy_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_heavy_attack_cooldown();
												
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
												
					thePlayer.BreakPheromoneEffect();
												
					ACS_PrimaryWeaponSwitch();
																			
					geraltRandomClawHeavyAttackAlt();		

					ACS_StaminaDrain(2);
				}
			}
		//}
	}
	
	function ArmigerModeEredinShieldSpecialAttack()
	{								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 
						
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldAttackAlt();
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltEredinStab();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
							
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
								
							AddTimer('ACS_portable_aard', 1.75 , false );
						}
						else
						{
							geraltEredinFuryCombo();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
							
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function ArmigerModeOlgierdSpecialAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch(); 

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();

				action_interrupt();

				ACS_PrimaryWeaponSwitch(); 

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	 	

					ACS_PrimaryWeaponSwitch(); 	
						
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus ) 
						&& thePlayer.GetStat( BCS_Stamina ) == thePlayer.GetStatMax( BCS_Stamina ) )
						{
							Umbral_Slash_End();

							thePlayer.DrainStamina( ESAT_FixedValue, thePlayer.GetStatMax( BCS_Stamina ) );

							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else
						{
							geraltRandomShadowAttack();
						}
					}
					else
					{
						geraltRandomOlgierdComboAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }	
						
						AddTimer('ACS_ResetAnimation', 0.4  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function ArmigerModeClawSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomAttackSpecialDash();

						//if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
						//if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
						
						//RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
					}
					else
					{
						geraltClawWhirlAttack();
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function ArmigerModeImlerithSpecialAttack()
	{
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
						
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						geraltImlerithWalkAttack();
					}
					else
					{
						geraltRandomImlerithComboAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
						
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 1.5  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}
	
	function FocusModeEredinShieldSpecialAttack()
	{										
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch(); 

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch(); 

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 
							
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomShieldSpecialAttackAlt();
						}
						else
						{
							geraltRandomShieldSpecialAttack();
							
							AddTimer('ACS_portable_aard', 0.5, false);
						}
					}
					else
					{
						if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
						{
							geraltRandomEredinSpecialAttackAlt();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
							
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
								
							AddTimer('ACS_portable_aard', 1.75 , false );
						}
						else
						{
							geraltRandomEredinSpecialAttack();

							if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
							if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
							
							RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
						}
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function HybridModeEredinShieldSpecialAttack()
	{										
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && actor.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch();
							
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldSpecialAttack();
							
						AddTimer('ACS_portable_aard', 0.5, false);
					}
					else
					{
						geraltRandomEredinSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }
							
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function HybridModeEredinShieldForwardSpecialAttack()
	{										
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					if(thePlayer.HasTag('ACS_Shielded_Entity')){shield_play_anim();}
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch();
							
					if (thePlayer.IsGuarded())
					{
						if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
						{
							Grow_Geralt_Immediate_Fast(); //ACS

							thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
						}

						geraltRandomShieldSpecialAttackAlt();
					}
					else
					{
						geraltRandomEredinSpecialAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
							
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
								
						AddTimer('ACS_portable_aard', 1.75 , false );			
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function FocusModeOlgierdSpecialAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch(); 

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus )
						&& thePlayer.GetStat( BCS_Stamina ) == thePlayer.GetStatMax( BCS_Stamina ) )
						{
							Umbral_Slash_End();

							thePlayer.DrainStamina( ESAT_FixedValue, thePlayer.GetStatMax( BCS_Stamina ) );

							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else
						{
							geraltRandomOlgierdSpecialAttackAlt();
						}
					}
					else
					{
						geraltRandomOlgierdSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }	
						
						AddTimer('ACS_ResetAnimation', 0.4  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function EquipmentModeOlgierdSpecialAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch(); 

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5
					&& ACS_GetItem_Iris())
					{
						if (thePlayer.GetStat( BCS_Focus ) == thePlayer.GetStatMax( BCS_Focus )
						&& thePlayer.GetStat( BCS_Stamina ) == thePlayer.GetStatMax( BCS_Stamina ) )
						{
							Umbral_Slash_End();

							thePlayer.DrainStamina( ESAT_FixedValue, thePlayer.GetStatMax( BCS_Stamina ) );

							thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );
						}
						else
						{
							geraltRandomOlgierdSpecialAttackAlt();
						}
					}
					else
					{
						geraltRandomOlgierdSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }	
						
						AddTimer('ACS_ResetAnimation', 0.4  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function HybridModeOlgierdSpecialAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch();	

					geraltRandomOlgierdSpecialAttack(); 				

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}				

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }	
						
					AddTimer('ACS_ResetAnimation', 0.4  , false);

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function HybridModeOlgierdForwardSpecialAttack()
	{	
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_PrimaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_PrimaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	
						
					ACS_PrimaryWeaponSwitch();
						
					geraltRandomOlgierdSpecialAttackAlt();

					//if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
					//if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
						
					//RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function FocusModeClawSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomClawSpecialAttackAlt();

						//if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
						//if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
						
						//RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
					}
					else
					{
						geraltRandomClawSpecialAttack();
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeClawSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch();

					geraltRandomClawSpecialAttack();

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeClawForwardSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch();
						
					geraltRandomClawSpecialAttackAlt();

					//if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
						
					//if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
					
					//RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function FocusModeImlerithSpecialAttack()
	{
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_PrimaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch(); 
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomImlerithSpecialAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
						
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 1  , false);
					}
					else
					{
						geraltRandomImlerithSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
						
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 1.5  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeImlerithSpecialAttack()
	{
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	
						
					ACS_PrimaryWeaponSwitch();
						
					geraltRandomImlerithSpecialAttack();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
						
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 1.5  , false);

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeImlerithForwardSpecialAttack()
	{
		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_PrimaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
						
					thePlayer.BreakPheromoneEffect();	

					ACS_PrimaryWeaponSwitch();
						
					geraltRandomImlerithSpecialAttackAlt();			

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }	
					
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 1  , false);

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function FocusModeSpearSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	

					ACS_SecondaryWeaponSwitch(); 
								
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomSpearSpecialAttackAlt();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
							
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}
					else
					{
						geraltRandomSpearSpecialAttack();

						if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
						
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
							
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeSpearSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	

					ACS_SecondaryWeaponSwitch();

					geraltRandomSpearSpecialAttack();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
						
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeSpearForwardSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					ACS_SecondaryWeaponSwitch();
							
					geraltRandomSpearSpecialAttackAlt();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
								
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
							
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function FocusModeGregSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch(); 

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_SecondaryWeaponSwitch(); 

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	

					ACS_SecondaryWeaponSwitch(); 	
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGregSpecialAttackAlt();
					}
					else
					{
						geraltRandomGregSpecialAttack();
					}

					ACS_StaminaDrain(3);
				}
			}
		}
	}

	function HybridModeGregSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_SecondaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					ACS_SecondaryWeaponSwitch();		

					geraltRandomGregSpecialAttack();
				}

				ACS_StaminaDrain(3);
			}
		}
	}

	function HybridModeGregForwardSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget) && finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_SecondaryWeaponSwitch();

				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();

				ACS_SecondaryWeaponSwitch();

				thePlayer.SetPlayerTarget( finisherActorTarget ); ACS_PerformFinisher();
			}
		}
		else
		{
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{ 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					ACS_SecondaryWeaponSwitch();
							
					geraltRandomGregSpecialAttackAlt();	

					ACS_StaminaDrain(3);	
				}
			}
		}
	}

	function FocusModeGiantSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					ACS_SecondaryWeaponSwitch(); 	
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomGiantSpecialAttackAlt();
					}
					else
					{
						geraltRandomGiantSpecialAttack();
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeGiantSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{		
					ACS_SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();		

					ACS_SecondaryWeaponSwitch();		

					geraltRandomGiantSpecialAttack();

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeGiantForwardSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch();	

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	

					ACS_SecondaryWeaponSwitch();
							
					geraltRandomGiantSpecialAttackAlt();

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function FocusModeAxeSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{
					ACS_SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					ACS_SecondaryWeaponSwitch(); 	
							
					if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
					{
						geraltRandomAxeSpecialAttackAlt();
					}
					else
					{
						geraltRandomAxeSpecialAttack();
					}

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function ACS_SCAAR_16_Installed(){return;}

	function HybridModeAxeSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	
					ACS_SecondaryWeaponSwitch(); 

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();		

					ACS_SecondaryWeaponSwitch();
							
					geraltRandomAxeSpecialAttack();

					ACS_StaminaDrain(3);
				}
			}
		//}
	}

	function HybridModeAxeForwardSpecialAttack()
	{
		if (thePlayer.HasTag('ACS_Size_Adjusted')) //ACS
		{
			Grow_Geralt_Immediate_Fast(); //ACS

			thePlayer.RemoveTag('ACS_Size_Adjusted'); //ACS
		}

		/*								
		finisherActorTarget = (CActor)( thePlayer.GetTarget() );	
		ccomp = finisherActorTarget.GetComponent("Finish");
		ccompEnabled = ccomp.IsEnabled();

		if (
		ccompEnabled
		//&& ACS_AttitudeCheck (finisherActorTarget)
		&& finisherActorTarget.IsHuman()
		&& FinisherDistanceCheck(finisherActorTarget)
		)
		{
			if ( finisherActorTarget.HasBuff( EET_HeavyKnockdown )  
			|| finisherActorTarget.HasBuff( EET_Knockdown ) 
			|| finisherActorTarget.HasBuff( EET_Ragdoll ) )
			{
				ACS_Setup_Combat_Action_Light();
			}
			else
			{
				//ACS_Dodge();
				action_interrupt();
				thePlayer.SetPlayerTarget( finisherActorTarget); ACS_PerformFinisher();
			}
		}
		else
		{
		*/
			if ( ACS_can_perform_special_attack() )
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{	 
					ACS_SecondaryWeaponSwitch();

					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_special_attack_cooldown();
							
					thePlayer.BreakPheromoneEffect();	
							
					ACS_SecondaryWeaponSwitch();
							
					geraltRandomAxeSpecialAttackAlt();

					ACS_StaminaDrain(3);
				}
			}
		//}
	}
	
	// Dodge stuff

	function ACS_Vampire_Back_Claw_Teleport()
	{
		if (ACS_Vampire_Back_Claw_Get())
		{
			ACS_Vampire_Back_Claw_Get().BreakAttachment(); 
			ACS_Vampire_Back_Claw_Get().Teleport( thePlayer.GetWorldPosition() + Vector( 0, 0, -200 ) );
		}
	}

	function ACS_Vampire_Back_Claw_Reattach()
	{
		var attach_vec																																					: Vector;
		var attach_rot																																					: EulerAngles;

		if (ACS_Vampire_Back_Claw_Get() && ACS_Vampire_Claw_Anchor_Get())
		{
			attach_rot.Roll = 90;
			attach_rot.Pitch = 0;
			attach_rot.Yaw = 45;
			attach_vec.X = -1;
			attach_vec.Y = -1;
			attach_vec.Z = 0;
			
			ACS_Vampire_Back_Claw_Get().CreateAttachment( ACS_Vampire_Claw_Anchor_Get(), , attach_vec, attach_rot );
		}
	}
	
	function dodge_timer_actual() 
	{
		if (!thePlayer.HasTag('ACS_Camo_Active'))
		{
			ACS_Vampire_Back_Claw_Teleport();
		}

		thePlayer.StopEffect('dive_shape');

		thePlayer.RemoveTag('ACS_Bruxa_Jump_End');

		RemoveTimer('ACS_dodge_timer_end');

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled())
		{
			thePlayer.StopEffect( 'magic_step_l_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_l_new' );

			thePlayer.StopEffect( 'magic_step_r_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_r_new' );
		}

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.EnableCharacterCollisions(false); 
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');
	
		AddTimer('ACS_dodge_timer_end', 0.875  , false);
	}

	function special_dash_close_dodge_timer_actual() 
	{
		if (!thePlayer.HasTag('ACS_Camo_Active'))
		{
			ACS_Vampire_Back_Claw_Teleport();
		}

		RemoveTimer('ACS_dodge_timer_end');

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.EnableCharacterCollisions(false); 
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');
	
		AddTimer('ACS_dodge_timer_end', 0.25  , false);
	}

	function EvadeTargetGet()
	{
		MovementAdjust();

		if ( thePlayer.IsHardLockEnabled() )
			evadeTarget = (CActor)( thePlayer.GetDisplayTarget() );
		else
		{
			thePlayer.FindMoveTarget();
			evadeTarget = thePlayer.moveTarget;		
		}

		thePlayer.SetPlayerTarget( evadeTarget );

		thePlayer.SetPlayerCombatTarget( evadeTarget );

		thePlayer.UpdateDisplayTarget( true );

		victimPos = evadeTarget.PredictWorldPosition(0.35) + VecFromHeading( AngleNormalize180( thePlayer.GetHeading() - dist ) ) * 2.5;

		if( !theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 0.3 , newVictimPos ) )
		{
			theGame.GetWorld().NavigationFindSafeSpot( victimPos, 0.3, 4 , newVictimPos );
			victimPos = newVictimPos;
		}

		if( ACS_AttitudeCheck ( evadeTarget ) && thePlayer.IsInCombat())
		{	
			UpdateHeading(); 

			movementAdjustor.AdjustmentDuration( ticket, 0.125 );
			
			movementAdjustor.RotateTowards( ticket, evadeTarget );

			movementAdjustor.SlideTo( ticket, TraceFloor(victimPos) );
		}
	}
	
	function dodge_timer_wildhunt_actual() 
	{
		ACS_Vampire_Back_Claw_Teleport();

		thePlayer.StopEffect('dive_shape');

		thePlayer.RemoveTag('ACS_Bruxa_Jump_End');

		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		if ( thePlayer.HasTag('ACS_Bruxa_Jump_Init') )
		{
			if (!thePlayer.HasTag('ACS_Camo_Active'))
			{
				//thePlayer.StopAllEffects();
				thePlayer.StopEffect( 'shadowdash' );
			}

			PlayerPlayAnimation ( 'bruxa_jump_up_stop_failsafe_ACS');

			thePlayer.RemoveTag('ACS_Bruxa_Jump_Init');

			thePlayer.AddTag('ACS_Bruxa_Jump_End');
		} 

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');

		AddTimer('ACS_dodge_timer_end', 0.5  , false);
	}

	function dodge_timer_fire_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Fire_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);
	}

	function dodge_timer_mage_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Mage_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);
	}

	function dodge_timer_dolphin_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Dolphin_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);
	}

	function dodge_timer_iris_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Iris_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);
	}

	function dodge_timer_explosion_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Explosion_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);
	}

	function dodge_timer_fountain_portal_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Fountain_Portal_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);
	}

	function dodge_timer_lightning_actual() 
	{ 
		RemoveTimer('ACS_dodge_timer_end');

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		thePlayer.AddTag('ACS_Lightning_Teleport');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.SetVisibility( false ); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		EvadeTargetGet();

		AddTimer('ACS_dodge_timer_end', 0.5  , false);
	}
	
	function dodge_timer_slideback_actual() 
	{
		ACS_Vampire_Back_Claw_Teleport();

		thePlayer.StopEffect('dive_shape');

		thePlayer.RemoveTag('ACS_Bruxa_Jump_End');

		RemoveTimer('ACS_dodge_timer_end');

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
		{
			thePlayer.AddTag('ACS_HideWeaponOnDodge');
		}

		if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
		{
			thePlayer.StopEffect( 'magic_step_l_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_l_new' );

			thePlayer.StopEffect( 'magic_step_r_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_r_new' );
		}

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.EnableCharacterCollisions(false);	
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		if (!thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_Weapon_Invisible();
		}

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');

		AddTimer('ACS_dodge_timer_end', 1.75  , false);
	}
	
	function dodge_timer_attack_actual() 
	{
		ACS_Vampire_Back_Claw_Teleport();

		thePlayer.StopEffect('dive_shape');

		thePlayer.RemoveTag('ACS_Bruxa_Jump_End');

		//thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

		RemoveTimer('ACS_dodge_timer_end');

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
		{
			thePlayer.StopEffect( 'magic_step_l_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_l_new' );

			thePlayer.StopEffect( 'magic_step_r_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_r_new' );

			thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );
			thePlayer.StopEffect( 'bruxa_dash_trails' );
		}

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		//thePlayer.EnableCharacterCollisions(false);
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');

		AddTimer('ACS_dodge_timer_end', 0.75  , false);
	}

	function dodge_timer_attack_ciri_actual() 
	{
		if (!thePlayer.IsEffectActive('fury_403_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_403_ciri' );
		}

		if (!thePlayer.IsEffectActive('fury_ciri', false))
		{
			thePlayer.PlayEffectSingle( 'fury_ciri' );
		}

		ACS_Vampire_Back_Claw_Teleport();

		thePlayer.StopEffect('dive_shape');

		thePlayer.RemoveTag('ACS_Bruxa_Jump_End');

		//thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

		RemoveTimer('ACS_dodge_timer_end');

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(false); 
		thePlayer.EnableCharacterCollisions(false);
		thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
		thePlayer.SetIsCurrentlyDodging(true);

		//thePlayer.BlockAction( EIAB_Jump, 			'ACS_Dodge_Timer');

		AddTimer('ACS_dodge_timer_end', 0.75  , false);
	}

	function ACS_SCAAR_15_Installed(){return;}
	
	function dodge_timer_end_actual() 
	{ 
		//thePlayer.UnblockAction( EIAB_Jump, 			'ACS_Dodge_Timer');

		//if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}
		
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() && !thePlayer.IsPerformingFinisher())
		{	
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
		}

		if (!thePlayer.HasTag('ACS_Camo_Active') && !thePlayer.HasTag('in_wraith'))
		{
			//thePlayer.StopAllEffects();
		}

		if ( !thePlayer.HasTag('ACS_Camo_Active') && thePlayer.HasTag('ACS_Bruxa_Jump_End') && (thePlayer.HasTag('aard_sword_equipped') || thePlayer.HasTag('vampire_claws_equipped')) )
		{
			//ACS_Bat_Teleport_FX();

			//thePlayer.PlayEffectSingle('dive_smoke');
			//thePlayer.StopEffect('dive_smoke');

			thePlayer.RemoveTag('ACS_Bruxa_Jump_End');
		} 

		if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

		if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
		{
			thePlayer.StopEffect( 'magic_step_l_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_l_new' );

			thePlayer.StopEffect( 'magic_step_r_new' );	
			thePlayer.PlayEffectSingle( 'magic_step_r_new' );
		}

		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetCanPlayHitAnim(true); 

		thePlayer.EnableCharacterCollisions(true); 
		thePlayer.RemoveBuffImmunity_AllNegative('acs_dodge'); 
		thePlayer.SetIsCurrentlyDodging(false);

		if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
		//&& !thePlayer.HasTag('blood_sucking')
		)
		{
			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Respawn();
			}
			
			thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

			thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
		}

		if (!thePlayer.HasTag('ACS_Camo_Active'))
		{
			ACS_Vampire_Back_Claw_Reattach();
		}

		if ( thePlayer.HasTag('ACS_wildhunt_teleport_init') )
		{
			ACS_wh_teleport_entity().CreateAttachment(thePlayer);

			thePlayer.SoundEvent("magic_canaris_teleport_short");

			ACS_wh_teleport_entity().StopEffect('disappear');
			ACS_wh_teleport_entity().PlayEffectSingle('disappear');

			ACS_wh_teleport_entity().PlayEffectSingle('appear');

			ACS_wh_teleport_entity().DestroyAfter(1);

			thePlayer.RemoveTag('ACS_wildhunt_teleport_init');
		}

		if ( thePlayer.HasTag('ACS_Mage_Teleport') )
		{
			thePlayer.PlayEffectSingle('teleport_in');
			thePlayer.StopEffect('teleport_in');

			PlayerPlayAnimation ( 'man_mage_teleport_in_ACS');

			thePlayer.RemoveTag('ACS_Mage_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Dolphin_Teleport') )
		{
			ACS_dolphin_teleport_entity().CreateAttachment( thePlayer, , Vector( 0, 0, 0 ), EulerAngles( 0, 0, 0 ) );

			ACS_dolphin_teleport_entity().StopEffect('up');
			ACS_dolphin_teleport_entity().StopEffect('warning_up');

			ACS_dolphin_teleport_entity().StopEffect('diagonal_up_right');
			ACS_dolphin_teleport_entity().StopEffect('warning_up_right');

			ACS_dolphin_teleport_entity().StopEffect('diagonal_up_left');
			ACS_dolphin_teleport_entity().StopEffect('warning_up_left');

			ACS_dolphin_teleport_entity().PlayEffectSingle('up');
			ACS_dolphin_teleport_entity().PlayEffectSingle('warning_up');

			ACS_dolphin_teleport_entity().PlayEffectSingle('diagonal_up_right');
			ACS_dolphin_teleport_entity().PlayEffectSingle('warning_up_right');

			ACS_dolphin_teleport_entity().PlayEffectSingle('diagonal_up_left');
			ACS_dolphin_teleport_entity().PlayEffectSingle('warning_up_left');

			thePlayer.SoundEvent('monster_water_mage_combat_spray');

			ACS_dolphin_teleport_entity().DestroyAfter(5);

			PlayerPlayAnimation ( 'man_mage_teleport_in_ACS');

			thePlayer.RemoveTag('ACS_Dolphin_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Iris_Teleport') )
		{	
			thePlayer.PlayEffectSingle('ethereal_buff');

			thePlayer.StopEffect('ethereal_buff');

			thePlayer.StopEffect('special_attack_fx');

			thePlayer.SoundEvent('magic_olgierd_tele');

			if (thePlayer.HasTag('ACS_HideWeaponOnDodge') 
			&& !thePlayer.HasTag('blood_sucking')
			)
			{
				ACS_Weapon_Respawn();

				thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

				thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
			}

			ACS_Marker_Smoke();

			thePlayer.RemoveTag('ACS_Iris_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Explosion_Teleport') )
		{
			//ACS_explosion_teleport_entity().CreateAttachment(thePlayer);

			thePlayer.StopEffect('smoke_explosion');
			thePlayer.PlayEffectSingle('smoke_explosion');

			//ACS_explosion_teleport_entity().DestroyAfter(2);

			PlayerPlayAnimation ( 'man_mage_teleport_in_ACS');

			thePlayer.RemoveTag('ACS_Explosion_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Fountain_Portal_Teleport') )
		{
			ACS_fountain_portal_teleport_entity().StopEffect('portal');
			ACS_fountain_portal_teleport_entity().PlayEffectSingle('portal');

			thePlayer.SoundEvent('magic_geralt_teleport');

			ACS_fountain_portal_teleport_entity().DestroyAfter(2);

			thePlayer.RemoveTag('ACS_Fountain_Portal_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Lightning_Teleport') )
		{
			ACS_lightning_teleport_entity().CreateAttachment(thePlayer);

			ACS_Marker_Lightning();

			//ACS_lightning_teleport_entity().StopEffect('lightning');
			//ACS_lightning_teleport_entity().PlayEffectSingle('lightning');

			//ACS_lightning_teleport_entity().StopEffect('pre_lightning');
			//ACS_lightning_teleport_entity().PlayEffectSingle('pre_lightning');

			ACS_Giant_Lightning_Strike_Mult();

			ACS_lightning_teleport_entity().StopEffect('lighgtning');
			ACS_lightning_teleport_entity().PlayEffectSingle('lighgtning');

			thePlayer.SoundEvent('fx_other_lightning_hit');

			ACS_lightning_teleport_entity().DestroyAfter(2);

			thePlayer.PlayEffectSingle('hit_lightning');
			thePlayer.StopEffect('hit_lightning');

			PlayerPlayAnimation ( 'man_mage_teleport_in_ACS');

			thePlayer.RemoveTag('ACS_Lightning_Teleport');
		}

		if ( thePlayer.HasTag('ACS_Fire_Teleport') )
		{
			ACS_Marker_Fire();

			thePlayer.PlayEffectSingle( 'lugos_vision_burning' );
			thePlayer.StopEffect( 'lugos_vision_burning' );

			thePlayer.SoundEvent('monster_dracolizard_combat_fireball_hit');

			thePlayer.RemoveTag('ACS_Fire_Teleport');
		}

		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Teleport_Dodge'); 
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Jump,					'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Roll,					'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Parry,				'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Teleport_Dodge');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Teleport_Dodge');
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Bruxa bite stuff
	
	function bruxa_bite() 
	{ 
		if ( ACS_BruxaBite_Enabled() 
		&& ACS_Enabled() )
		{
			ACS_StaminaDrain(1);
			
			MovementAdjust();
			
			thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");
			
			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat()) 
			{ 
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				
				thePlayer.EnableCollisions(false);
				
				movementAdjustor.SlideTowards( ticket, actor, dist, dist ); 
				
				bruxa_bite_index_1 = RandDifferent(this.previous_bruxa_bite_index_1 , 2);
				
				switch (bruxa_bite_index_1) 
				{	
					case 1:
					PlayerPlayAnimation( 'bruxa_attack_bite_back_rp_bruxa_ACS');
					break;

					default:
					PlayerPlayAnimation( 'bruxa_attack_bite_back_lp_bruxa_ACS');
					break;		
				}
				
				this.previous_bruxa_bite_index_1 = bruxa_bite_index_1;
				
				/*
				if (thePlayer.HasTag('blood_sucking'))
				{
					thePlayer.BreakAttachment();
					thePlayer.SetIsCurrentlyDodging(false);
					RemoveTimer('ACS_bruxa_blood_suck_repeat');	
					RemoveTimer('ACS_blood_suck_victim_paralyze');
					bruxa_blood_suck_end_actual();
				}
				else
				{
					*/
					bruxa_blood_suck_actual();
				//}
			}
		}
	}
	
	function bruxa_blood_suck_actual()
	{	
		actor = (CActor)( thePlayer.GetDisplayTarget() );
		
		victimRot = actor.GetWorldRotation();
		
		playerPos = thePlayer.GetWorldPosition();
		
		playerRot = thePlayer.GetWorldRotation();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			thePlayer.AddTag('blood_sucking');

			actor.AddTag('bruxa_bite_victim');

			ACS_Hijack_Marker_Create();

			if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
			{
				thePlayer.AddTag('ACS_HideWeaponOnDodge');
			}

			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Invisible();
			}

			thePlayer.BreakAttachment();
			
			thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
			thePlayer.SetCanPlayHitAnim(false);
			thePlayer.EnableCharacterCollisions(false);

			((CNewNPC)actor).EnableCharacterCollisions(false);

			if ( ((CNewNPC)actor).IsFlying() && actor.GetDistanceFromGround( 3 ) > 2 )
			{
				/*
				if (actor.HasAbility('mon_gryphon_base'))
				{
					
					bonePos = actor.GetBoneWorldPosition('neck3');

					bonePos.X += 0.25;
					bonePos.Y += 0.1625;
					bonePos.Z -= 1.15;

					thePlayer.CreateAttachmentAtBoneWS( actor, 'neck3', bonePos, victimRot );

					attach_rot.Roll = 0;
					attach_rot.Pitch = 0;
					attach_rot.Yaw = 0;
					attach_vec.X = 0;
					attach_vec.Y = 0;
					attach_vec.Z = 0;

					thePlayer.CreateAttachment( ACS_Hijack_Marker_Get(), ,  attach_vec, attach_rot);
					

					actor.GetBoneWorldPositionAndRotationByIndex( actor.GetBoneIndex( 'neck2' ), bone_vec, bone_rot );

					bone_rot.Roll = 0;
					bone_rot.Pitch = 0;
					bone_rot.Yaw = 45;
					bone_vec.X += 0.25;
					bone_vec.Y += 0.1625;
					bone_vec.Z -= 1.15;

					//thePlayer.CreateAttachmentAtBoneWS( actor, 'neck2', bone_vec, bone_rot );

					thePlayer.CreateAttachment( actor, , Vector( 0, -2.5, -2.5 ), victimRot );
				}
				else if (npc.HasAbility('mon_basilisk'))
				{
					bonePos = actor.GetBoneWorldPosition('neck2');

					bonePos.X += 0.25;
					bonePos.Y += 0.1625;
					bonePos.Z -= 1.15;

					thePlayer.CreateAttachmentAtBoneWS( actor, 'neck2', bonePos, victimRot );
				}
				else if (actor.HasAbility('mon_siren_base'))
				{
					bonePos = actor.GetBoneWorldPosition('torso2');

					bonePos.X += 0.25;
					bonePos.Y += 0.1625;
					bonePos.Z -= 1.15;

					thePlayer.CreateAttachmentAtBoneWS( actor, 'torso2', bonePos, victimRot );
				}
				else if (actor.HasAbility('mon_wyvern_base'))
				{
					bonePos = actor.GetBoneWorldPosition('spine3');

					bonePos.X += 0.25;
					bonePos.Y += 0.1625;
					bonePos.Z -= 1.15;

					thePlayer.CreateAttachmentAtBoneWS( actor, 'spine3', bonePos, victimRot );
				}
				else if (actor.HasAbility('mon_harpy_base'))
				{
					bonePos = actor.GetBoneWorldPosition('torso2');

					bonePos.X += 0.25;
					bonePos.Y += 0.1625;
					bonePos.Z -= 1.15;

					thePlayer.CreateAttachmentAtBoneWS( actor, 'torso2', bonePos, victimRot );
				}
				else if (actor.HasAbility('mon_draco_base'))
				{
					bonePos = actor.GetBoneWorldPosition('spine2');

					bonePos.X += 0;
					bonePos.Y += 2.1625;
					bonePos.Z -= 0;

					thePlayer.CreateAttachment( actor, 'spine2', bonePos, victimRot );
				}	
				else
				{
					thePlayer.CreateAttachment( actor, , Vector( 0, 0, 0 ), victimRot );
				}
				*/
				thePlayer.CreateAttachment( actor, , Vector( 0, -5, -2.5 ) );

				if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }	
			}
			else if (!((CNewNPC)npc).IsFlying()
			&& (npc.HasAbility('mon_garkain')
			|| npc.HasAbility('mon_sharley_base')
			|| npc.HasAbility('mon_bies_base')
			|| npc.HasAbility('mon_golem_base')
			|| npc.HasAbility('mon_endriaga_base')
			|| npc.HasAbility('mon_arachas_base')
			|| npc.HasAbility('mon_kikimore_base')
			|| npc.HasAbility('mon_black_spider_base')
			|| npc.HasAbility('mon_black_spider_ep2_base')
			|| npc.HasAbility('mon_ice_giant')
			|| npc.HasAbility('mon_cyclops')
			|| npc.HasAbility('mon_knight_giant')
			|| npc.HasAbility('mon_cloud_giant')
			|| npc.HasAbility('mon_troll_base')))
			{
				thePlayer.CreateAttachment( actor, , Vector( 0, 0, 0 ) );

				thePlayer.SetVisibility( false ); 

				((CNewNPC)actor).SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
			}
			else
			{
				thePlayer.CreateAttachment( actor, , Vector( 0, 0, 0 ) );

				if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 

				((CNewNPC)actor).SetImmortalityMode( AIM_Invulnerable, AIC_Combat );
			}
			
			thePlayer.SetIsCurrentlyDodging(true);
			
			AddTimer('ACS_bruxa_blood_suck_repeat', 2 , true);	
				
			AddTimer('ACS_blood_suck_victim_paralyze', 0.001  , true);	

			thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_Signs, 				'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_DrawWeapon, 		'ACS_Bruxa_Bite'); 
			thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_Fists, 				'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_Jump,				'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Bruxa_Bite');
			//thePlayer.BlockAction( EIAB_Dodge,			'ACS_Bruxa_Bite');
			//thePlayer.BlockAction( EIAB_Roll,				'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_Parry,				'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Bruxa_Bite');
			thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Bruxa_Bite');
		}
		/*
		else
		{
			thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Bruxa_Bite'); 
			thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Jump,					'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Roll,					'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_Parry,				'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Bruxa_Bite');
			thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Bruxa_Bite');

			thePlayer.BreakAttachment();
			thePlayer.SetIsCurrentlyDodging(false);
			thePlayer.EnableCollisions(true);
			RemoveTimer('ACS_bruxa_blood_suck_repeat');	
			RemoveTimer('ACS_blood_suck_victim_paralyze');
			if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( true ); }		 
			bruxa_blood_suck_end_actual();
		}
		*/
	}
	
	function blood_suck_victim_paralyze_actual()
	{
		var bonePos										: Vector;

		MovementAdjust();

		actors.Clear();

		actors = GetActorsInRange( thePlayer, 10, 10, 'bruxa_bite_victim' );

		//theGame.GetActorsByTag( 'bruxa_bite_victim', actors );

		//actors = thePlayer.GetNPCsAndPlayersInRange( 10, 10);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];

				animatedComponent = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );	

				if (npc.HasTag('bruxa_bite_victim'))
				{
					if ( npc.IsAlive() )
					{
						if (((CNewNPC)npc).IsFlying() && actor.GetDistanceFromGround( 3 ) > 2)
						{
							if (thePlayer.HasTag('ACS_Hijack_Flight_End'))
							{
								thePlayer.BreakAttachment();

								thePlayer.CreateAttachment( actor, , Vector( 0, -5, -2.5 ) );

								thePlayer.RemoveTag('ACS_Hijack_Flight_End');
							}

							movementAdjustor.RotateTo( ticket, VecHeading(npc.GetHeadingVector()) );

							((CNewNPC)npc).SetUnstoppable(true);

							thePlayer.PlayEffect('mind_control', ACS_Hijack_Marker_2_Get());
							thePlayer.PlayEffect('mind_control', ACS_Hijack_Marker_2_Get());
							thePlayer.PlayEffect('mind_control', ACS_Hijack_Marker_2_Get());
							thePlayer.PlayEffect('mind_control', ACS_Hijack_Marker_2_Get());
							thePlayer.PlayEffect('mind_control', ACS_Hijack_Marker_2_Get());
							thePlayer.PlayEffect('mind_control', ACS_Hijack_Marker_2_Get());
							/*
							thePlayer.PlayEffectSingle('mind_control', npc);
							thePlayer.PlayEffectSingle('mind_control', npc);
							thePlayer.PlayEffectSingle('mind_control', npc);
							thePlayer.PlayEffectSingle('mind_control', npc);
							thePlayer.PlayEffectSingle('mind_control', npc);
							thePlayer.PlayEffectSingle('mind_control', npc);
							*/
							thePlayer.StopEffect('mind_control');	

							thePlayer.StopEffect('blood_drain'); 
							thePlayer.StopEffect('blood_start');

							PlayerPlayAnimationWraith( 'swim_slow_f_ACS' );
						}
						else if (!((CNewNPC)npc).IsFlying()
						&& (npc.HasAbility('mon_garkain')
						|| npc.HasAbility('mon_sharley_base')
						|| npc.HasAbility('mon_bies_base')
						|| npc.HasAbility('mon_golem_base')
						|| npc.HasAbility('mon_endriaga_base')
						|| npc.HasAbility('mon_arachas_base')
						|| npc.HasAbility('mon_kikimore_base')
						|| npc.HasAbility('mon_black_spider_base')
						|| npc.HasAbility('mon_black_spider_ep2_base')
						|| npc.HasAbility('mon_ice_giant')
						|| npc.HasAbility('mon_cyclops')
						|| npc.HasAbility('mon_knight_giant')
						|| npc.HasAbility('mon_cloud_giant')
						|| npc.HasAbility('mon_troll_base')))
						{
							thePlayer.SetVisibility( false ); 

							if(!npc.HasTag('ACS_demonic_possession'))
							{
								npc.StopEffect('demonic_possession');
								npc.PlayEffectSingle('demonic_possession');

								thePlayer.PlayEffectSingle('ethereal_buff');
								thePlayer.StopEffect('ethereal_buff');

								thePlayer.PlayEffectSingle('ethereal_debuff');
								thePlayer.StopEffect('ethereal_debuff');

								npc.AddTag('ACS_demonic_possession');
							}

							if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

							thePlayer.BreakAttachment();
							thePlayer.CreateAttachment( npc, , Vector( 0, 0, 0 ) );

							PlayerPlayAnimationWraith( 'man_geralt_petard2_horse_idle_aim_cycle' );

							((CNewNPC)npc).SetUnstoppable(false);

							if( !npc.HasBuff( EET_Confusion ) )
							{
								npc.AddEffectDefault( EET_Confusion, thePlayer, 'acs_buff_effects' );	
							}
						}
						else
						{
							if (npc.HasAbility('mon_gryphon_base')
							|| npc.HasAbility('mon_siren_base')
							|| npc.HasAbility('mon_wyvern_base')
							|| npc.HasAbility('mon_harpy_base')
							|| npc.HasAbility('mon_draco_base')
							|| npc.HasAbility('mon_basilisk')
							)
							{
								RemoveTimer('ACS_HijackMoveForward');	
							}  

							npc.BlockAbility('ShadowForm', true);
							npc.BlockAbility('MistForm', true);
							npc.BlockAbility('MistCharge', true);
							npc.BlockAbility('Flashstep', true);
							npc.BlockAbility('DustCloud', true);
							npc.BlockAbility('Specter', true);
							npc.BlockAbility('ContactBlindness', true);
							npc.BlockAbility('Summon', true);
							//npc.BlockAbility('mon_noonwraith  ', true);
							
							thePlayer.BreakAttachment();
							thePlayer.CreateAttachment( npc, , Vector( 0, 0, 0 ) );

							thePlayer.SetVisibility( true );

							if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
							{
								thePlayer.AddTag('ACS_HideWeaponOnDodge');
							}

							if (!thePlayer.HasTag('aard_sword_equipped'))
							{
								ACS_Weapon_Invisible();
							}

							if (!thePlayer.HasTag('ACS_Hijack_Flight_End'))
							{
								PlayerPlayAnimationWraith( 'bruxa_attack_bite_back_rp_bruxa_ACS' );

								thePlayer.AddTag('ACS_Hijack_Flight_End');
							}

							((CNewNPC)npc).SetUnstoppable(false);

							if( !npc.HasBuff( EET_Confusion ) )
							{
								npc.AddEffectDefault( EET_Confusion, thePlayer, 'acs_buff_effects' );	
							}

							if( !npc.HasBuff( EET_Confusion ) )
							{
								npc.AddEffectDefault( EET_Confusion, thePlayer, 'acs_buff_effects' );	
							}

							if( !npc.HasBuff( EET_LongStagger ) )
							{
								npc.AddEffectDefault( EET_LongStagger, thePlayer, 'acs_buff_effects' );	
							}

							if( !npc.HasBuff( EET_Slowdown ) )
							{
								//npc.AddEffectDefault( EET_Slowdown, thePlayer, 'acs_buff_effects' );	
							}
						}
					}
					else
					{
						bruxa_blood_suck_end_actual();
					}
				}		
			}
		}
	}
	
	function alive_check_actual()
	{
		if (thePlayer.HasTag('yrden_secondary_sword_equipped'))
		{
			ACS_Giant_Lightning_Strike_Single();
		}
		else if (thePlayer.HasTag('acs_bow_active'))
		{

		}
		else if (thePlayer.HasTag('acs_crossbow_active'))
		{
			
		}
	}
	
	function bruxa_blood_suck_repeat_actual()
	{
		actors.Clear();
		
		actors = GetActorsInRange(thePlayer, 10, 10, 'bruxa_bite_victim');

		//theGame.GetActorsByTag( 'bruxa_bite_victim', actors );

		//actors = thePlayer.GetNPCsAndPlayersInRange( 10, 10);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];

				if (npc.IsAlive() && npc.HasTag('bruxa_bite_victim'))
				{
					((CNewNPC)npc).SetImmortalityMode( AIM_None, AIC_Combat ); 

					npc.RemoveBuff(EET_HeavyKnockdown, true, 'acs_buff_effects');

					npc.RemoveBuffImmunity_AllNegative();

					npc.RemoveBuffImmunity_AllCritical();
					
					if 
					(
					!((CNewNPC)npc).IsFlying()
					&& !npc.HasAbility('mon_garkain')
					&& !npc.HasAbility('mon_sharley_base')
					&& !npc.HasAbility('mon_bies_base')
					&& !npc.HasAbility('mon_golem_base')
					&& !npc.HasAbility('mon_endriaga_base')
					&& !npc.HasAbility('mon_arachas_base')
					&& !npc.HasAbility('mon_kikimore_base')
					&& !npc.HasAbility('mon_black_spider_base')
					&& !npc.HasAbility('mon_black_spider_ep2_base')
					&& !npc.HasAbility('mon_ice_giant')
					&& !npc.HasAbility('mon_cyclops')
					&& !npc.HasAbility('mon_knight_giant')
					&& !npc.HasAbility('mon_cloud_giant')
					&& !npc.HasAbility('mon_troll_base')
					)
					{
						if (npc.HasAbility('mon_gryphon_base')
						|| npc.HasAbility('mon_siren_base')
						|| npc.HasAbility('mon_wyvern_base')
						|| npc.HasAbility('mon_harpy_base')
						|| npc.HasAbility('mon_draco_base')
						|| npc.HasAbility('mon_basilisk')
						)
						{
							RemoveTimer('ACS_HijackMoveForward');	
						}

						if (thePlayer.HasTag('ACS_Hijack_Flight_End'))
						{
							thePlayer.RemoveTag('ACS_Hijack_Flight_End');
						}

						thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

						thePlayer.PlayEffectSingle( 'blood_drain_fx2' ); 
						thePlayer.StopEffect( 'blood_drain_fx2' );

						ACS_bruxa_blood_resource();

						thePlayer.SetVisibility( true );

						if (npc.UsesVitality()) 
						{ 
							curTargetVitality = actor.GetStat( BCS_Vitality );

							damageMax = curTargetVitality * 0.10; 
							
							damageMin = curTargetVitality * 0.05; 

							if( curTargetVitality <= actor.GetStatMax( BCS_Vitality ) * 0.1 )
							{
								npc.Kill('ACS_Bruxa_Bite', false, thePlayer);

								ACS_Dismember_Internal();

								VampVoiceEffects_Monster();

								thePlayer.AddEffectDefault( EET_BlackBlood, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_WellFed, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_WellHydrated, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_AutoStaminaRegen, thePlayer, 'ACS_Bruxa_Bite' );
							}
							else
							{
								npc.DrainVitality( RandRangeF(damageMax,damageMin) );
							}
						} 
						else if (npc.UsesEssence()) 
						{ 
							curTargetEssence = actor.GetStat( BCS_Essence );
							
							damageMax = curTargetEssence * 0.20; 
							
							damageMin = curTargetEssence * 0.10; 

							if( curTargetEssence <= actor.GetStatMax( BCS_Essence ) * 0.1 )
							{
								npc.Kill('ACS_Bruxa_Bite', false, thePlayer);

								ACS_Dismember_Internal();

								VampVoiceEffects_Monster();

								thePlayer.AddEffectDefault( EET_BlackBlood, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_WellFed, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_WellHydrated, thePlayer, 'ACS_Bruxa_Bite' );

								thePlayer.AddEffectDefault( EET_AutoStaminaRegen, thePlayer, 'ACS_Bruxa_Bite' );
							}
							else
							{
								npc.DrainEssence( RandRangeF(damageMax,damageMin) );
							}
						}

						thePlayer.GainStat( BCS_Vitality, RandRangeF(thePlayer.GetStatMax( BCS_Vitality ) * 0.1, thePlayer.GetStatMax( BCS_Vitality ) * 0.05)  ); 

						bruxa_bite_repeat_index_1 = RandDifferent(this.previous_bruxa_bite_repeat_index_1 , 2);

						switch (bruxa_bite_repeat_index_1) 
						{			
							case 1:	
							PlayerPlayAnimation( 'bruxa_attack_bite_back_rp_bruxa_ACS');
							break;
							
							default:
							PlayerPlayAnimation( 'bruxa_attack_bite_back_lp_bruxa_ACS');
							break;		
						}			
						this.previous_bruxa_bite_repeat_index_1 = bruxa_bite_repeat_index_1;
					}
				}
				else
				{
					bruxa_blood_suck_end_actual();
				}
			}
		}
	}
	
	function bruxa_tackle_actual()
	{
		/*
		actors = GetActorsInRange(thePlayer, 10, 10, 'bruxa_bite_victim', true);
		
		for( i = 0; i < actors.Size(); i += 1 )
		{
			npc = (CNewNPC)actors[i];
			actor = (CActor)actors[i];
			if( actors.Size() > 0 )
			{
				if( RandF() < 0.10 ) 
				{
					PlayerPlayAnimation( 'bruxa_quest_eating_body_loop_ACS');
					
					if (!((CNewNPC)npc).IsFlying())
					{
						npc.AddEffectDefault( EET_HeavyKnockdown, thePlayer, 'acs_buff_effects' );	
					}
				}
				else
				{	
					if (!((CNewNPC)npc).IsFlying())
					{
						if( !npc.HasBuff( EET_Confusion ) )
						{
							npc.AddEffectDefault( EET_Confusion, thePlayer, 'acs_buff_effects' );	
						}
					}
				}
			}
		}
		*/

		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			ACS_ThingsThatShouldBeRemoved();

			thePlayer.SetIsCurrentlyDodging(true);

			actor = (CActor)( thePlayer.GetTarget() );	

			movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

			targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
			
			movementAdjustor.CancelAll();

			dodge_timer_attack_actual();

			ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust_Shadowdash' );
		
			movementAdjustor.AdjustmentDuration( ticket, 0.25 );
			
			//movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());

			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );
			
			movementAdjustor.AdjustLocationVertically( ticket, true );

			movementAdjustor.ScaleAnimationLocationVertically( ticket, true );

			dist = ((((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius())
			+ (((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) ) * 1.75;

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}
									
			thePlayer.SetAnimationSpeedMultiplier( 2.25 );
			
			RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

			quen_sword_glow();	

			if (!thePlayer.HasTag('ACS_Shadow_Dash_Empowered'))
			{
				thePlayer.AddTag('ACS_Shadow_Dash_Empowered');
			} 

			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}

				movementAdjustor.SlideTowards( ticket, actor, dist, dist );

				if( targetDistance <= 4*4 ) 
				{
					olgierd_shadow_attack_part_2_index_1 = RandDifferent(this.previous_olgierd_shadow_attack_part_2_index_1 , 2);

					switch (olgierd_shadow_attack_part_2_index_1) 
					{	
						case 1:
						PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_shadowdash_002_ACS');
						break;
					}

					this.previous_olgierd_shadow_attack_part_2_index_1 = olgierd_shadow_attack_part_2_index_1;
				}
				else
				{
					PlayerPlayAnimation( 'attack_shadowdash_002_ACS');
				}
			
				//PlayerPlayAnimation( 'attack_shadowdash_002_ACS');
			}
			else
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

				//PlayerPlayAnimation( 'attack_shadowdash_002_ACS');

				olgierd_shadow_attack_part_2_index_1 = RandDifferent(this.previous_olgierd_shadow_attack_part_2_index_1 , 2);

				switch (olgierd_shadow_attack_part_2_index_1) 
				{	
					case 1:
					PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'attack_shadowdash_002_ACS');
					break;
				}

				this.previous_olgierd_shadow_attack_part_2_index_1 = olgierd_shadow_attack_part_2_index_1;
			}
		}
		else if (thePlayer.HasTag('axii_sword_equipped'))
		{
			if (thePlayer.HasTag('ACS_Eredin_Stab'))
			{
				actors.Clear();

				actors = thePlayer.GetNPCsAndPlayersInCone(2.5, VecHeading(thePlayer.GetHeadingVector()), 60, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

				if( actors.Size() > 0 )
				{
					for( i = 0; i < actors.Size(); i += 1 )
					{
						actortarget = (CActor)actors[i];

						actortarget.SoundEvent("cmb_play_ger_stab_in");

						if ( actortarget.HasTag('ACS_Stabbed') )
						continue;

						if( !actortarget.HasBuff( EET_Confusion ) && !actortarget.HasBuff( EET_HeavyKnockdown ) && !actortarget.HasBuff( EET_Knockdown ) && !actortarget.HasBuff( EET_Ragdoll ) && actortarget.IsAlive() )
						{
							actortarget.SoundEvent("cmb_play_ger_stab_in");

							actortarget.AddEffectDefault( EET_Confusion, actortarget, 'ACS_Stabbed' );	

							//actortarget.CreateAttachment( thePlayer, , Vector( 0.25, 1.5, 0.25 ) );

							actortarget.AddTag('ACS_Stabbed');
						}
					}
				}

				thePlayer.RemoveTag('ACS_Eredin_Stab');
			}
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			ACS_ThingsThatShouldBeRemoved();

			thePlayer.SetIsCurrentlyDodging(true);

			thePlayer.StopEffect('shadowdash_shockwave');

			thePlayer.PlayEffect('shadowdash_shockwave');

			thePlayer.StopEffect('shadowdash_shockwave');

			actor = (CActor)( thePlayer.GetTarget() );	

			movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

			targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
			
			movementAdjustor.CancelAll();

			dodge_timer_attack_actual();

			ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust_Aard_Sword_Dash' );

			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );
			
			movementAdjustor.AdjustLocationVertically( ticket, true );

			movementAdjustor.ScaleAnimationLocationVertically( ticket, true );

			distVampSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
			+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius());

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if (thePlayer.HasTag('ACS_Vampire_Dash_Close'))
			{
				movementAdjustor.AdjustmentDuration( ticket, 0.125 );

				thePlayer.RemoveTag('ACS_Vampire_Dash_Close');
			}
			else if (thePlayer.HasTag('ACS_Whirl_Attack'))
			{
				movementAdjustor.AdjustmentDuration( ticket, 0.325 );

				PlayerPlayAnimation( 'attack_light_03_ACS');

				thePlayer.RemoveTag('ACS_Whirl_Attack');	
			}
			else
			{	
				movementAdjustor.AdjustmentDuration( ticket, 0.325 );

				thePlayer.SetAnimationSpeedMultiplier( 1.5  );
				
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
			}

			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}

				movementAdjustor.SlideTowards( ticket, actor, distVampSpecialDash, distVampSpecialDash );
			}
			else
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			}
		}
		else if (thePlayer.HasTag('vampire_claws_equipped'))
		{
			ACS_ThingsThatShouldBeRemoved();

			thePlayer.SetIsCurrentlyDodging(true);

			actor = (CActor)( thePlayer.GetTarget() );	

			movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

			targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
			
			movementAdjustor.CancelAll();

			dodge_timer_attack_actual();

			ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust_Vampire_Claw_Dash' );
			
			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );
			
			movementAdjustor.AdjustLocationVertically( ticket, true );

			movementAdjustor.ScaleAnimationLocationVertically( ticket, true );

			thePlayer.StopEffect('shadowdash_shockwave');

			thePlayer.PlayEffect('shadowdash_shockwave');

			thePlayer.StopEffect('shadowdash_shockwave');

			if (thePlayer.HasTag('ACS_Vampire_Dash_Close'))
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

				thePlayer.SetAnimationSpeedMultiplier( 1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);

				movementAdjustor.AdjustmentDuration( ticket, 0.125 );

				distVampSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
				+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius());

				thePlayer.RemoveTag('ACS_Vampire_Dash_Close');
			}
			else
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

				thePlayer.SetAnimationSpeedMultiplier( 1.5  );

				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				movementAdjustor.AdjustmentDuration( ticket, 0.325 );

				distVampSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
				+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 0.5;
			}

			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}

				movementAdjustor.SlideTowards( ticket, actor, distVampSpecialDash, distVampSpecialDash );
			}
		}
	}

	function Umbral_Slash_End_Actual()
	{
		if (thePlayer.HasTag('quen_sword_equipped'))
		{
			theGame.SetTimeScale( 0.5, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

			thePlayer.AddTimer( 'RemoveInstantKillSloMo', 1.5 );

			ACS_ThingsThatShouldBeRemoved();

			thePlayer.SetIsCurrentlyDodging(true);

			actor = (CActor)( thePlayer.GetTarget() );	

			movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

			targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
			
			movementAdjustor.CancelAll();

			dodge_timer_attack_actual();

			thePlayer.SetVisibility( false );

			AddTimer('ACS_reveal_timer', 1, false);

			AddTimer('ACS_Revert_Env', 2, false);

			AddTimer('ACS_Umbral_Slash_End_Damage', 1.5, false);

			ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust_Umbral_Slash_End' );
		
			movementAdjustor.AdjustmentDuration( ticket, 0.5 );
			
			//movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());

			movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

			movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );
			
			movementAdjustor.AdjustLocationVertically( ticket, true );

			movementAdjustor.ScaleAnimationLocationVertically( ticket, true );

			dist = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
			+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 1.25;

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}
									
			//thePlayer.SetAnimationSpeedMultiplier( 1.75 );
			
			//AddTimer('ACS_ResetAnimation', 0.5 , false);

			quen_sword_glow();	

			if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}

				//movementAdjustor.SlideTo( ticket, thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5 );

				PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');

				AddTimer('ACS_Umbral_Slash_End_Effect_Repeat', 0.1, true);

				AddTimer('ACS_Umbral_Slash_End_Effect_Repeat_Stop', 0.4, false);
			}
			else
			{
				if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

				//movementAdjustor.SlideTo( ticket, thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5 );

				//PlayerPlayAnimation( 'attack_shadowdash_002_ACS');

				PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');

				AddTimer('ACS_Umbral_Slash_End_Effect_Repeat', 0.1, true);

				AddTimer('ACS_Umbral_Slash_End_Effect_Repeat_Stop', 0.4, false);
			}
		}
	}

	function vampire_fist_slide()
	{
		ACS_ThingsThatShouldBeRemoved();

		RemoveTimer('ACS_collision_delay');

		actor = (CActor)( thePlayer.GetTarget() );	

		movementAdjustor = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		targetDistance = VecDistanceSquared2D( thePlayer.GetWorldPosition(), actor.GetWorldPosition() ) ;
		
		//movementAdjustor.CancelAll();
		
		ticket = movementAdjustor.CreateNewRequest( 'ACS_Movement_Adjust_Vampire_Dash' );
		
		movementAdjustor.AdjustmentDuration( ticket, 0.5 );
		
		//movementAdjustor.ShouldStartAt(ticket, thePlayer.GetWorldPosition());

		movementAdjustor.MaxRotationAdjustmentSpeed( ticket, 50000 );

		movementAdjustor.MaxLocationAdjustmentSpeed( ticket, 50000 );
		
		movementAdjustor.AdjustLocationVertically( ticket, true );

		movementAdjustor.ScaleAnimationLocationVertically( ticket, true );

		distVampSpecialDash = (((CMovingPhysicalAgentComponent)actor.GetMovingAgentComponent()).GetCapsuleRadius() 
		+ ((CMovingPhysicalAgentComponent)thePlayer.GetMovingAgentComponent()).GetCapsuleRadius()) * 0.5;

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}
								
		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
		
		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

		dodge_timer_attack_actual();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}
				movementAdjustor.SlideTowards( ticket, actor, distVampSpecialDash, distVampSpecialDash );
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					movementAdjustor.SlideTowards( ticket, actor, distVampSpecialDash, distVampSpecialDash );
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

					movementAdjustor.SlideTo( ticket, TraceFloor(thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5) );
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function bruxa_blood_suck_end_actual() 
	{ 
		thePlayer.SetVisibility( true );	 

		thePlayer.DestroyEffect('mind_control');	

		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_ThrowBomb, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Bruxa_Bite'); 
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Jump,					'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Bruxa_Bite');
		//thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Bruxa_Bite');
		//thePlayer.UnblockAction( EIAB_Roll,					'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Parry,				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Bruxa_Bite');

		RemoveTimer('ACS_HijackMoveForward');

		ACS_Hijack_Marker_Destroy();

		ACS_Hijack_Marker_2_Destroy();

		thePlayer.BreakAttachment();
		
		RemoveTimer('ACS_bruxa_blood_suck');	
		RemoveTimer('ACS_bruxa_blood_suck_repeat');
		RemoveTimer('ACS_blood_suck_victim_paralyze');

		thePlayer.StopEffect('blood_drain'); 
		thePlayer.StopEffect('blood_start');	 
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetCanPlayHitAnim(true); 

		thePlayer.EnableCharacterCollisions(true); 
		thePlayer.SetIsCurrentlyDodging(false);
		thePlayer.EnableCollisions(true);

		if (thePlayer.HasTag('ACS_Hijack_Flight_End'))
		{
			thePlayer.RemoveTag('ACS_Hijack_Flight_End');
		}

		actors.Clear();
		
		actors = GetActorsInRange(thePlayer, 10, 10, 'bruxa_bite_victim');

		//theGame.GetActorsByTag( 'bruxa_bite_victim', actors );

		//actors = thePlayer.GetNPCsAndPlayersInRange( 10, 10);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				NPCanimatedComponent = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );	

				actor = actors[i];

				if (npc.HasTag('bruxa_bite_victim'))
				{
					npc.SetImmortalityMode( AIM_None, AIC_Combat ); 

					npc.StopEffect('demonic_possession');

					thePlayer.PlayEffectSingle('dive_shape');
					thePlayer.StopEffect('dive_shape');

					//thePlayer.PlayEffectSingle('dive_smoke');
					//thePlayer.StopEffect('dive_smoke');

					npc.RemoveBuff(EET_Confusion);

					npc.RemoveBuff(EET_Confusion);

					npc.RemoveBuff(EET_LongStagger);

					npc.RemoveBuff(EET_Slowdown);

					actor.RemoveBuffImmunity_AllNegative();

					actor.RemoveBuffImmunity_AllCritical();

					npc.RemoveBuffImmunity_AllNegative();

					npc.RemoveBuffImmunity_AllCritical();

					((CNewNPC)npc).SetUnstoppable(false);

					//NPCanimatedComponent.PlaySlotAnimationAsync ( '', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0));

					npc.RemoveTag('Hijack_Marker_Added');

					npc.RemoveTag('ACS_demonic_possession');

					npc.RemoveTag('bruxa_bite_victim');
				}
			}
		}
		
		jump_attack_reset(); 

		thePlayer.RemoveTag('blood_sucking');
	}
	
	function jump_attack_reset()
	{	
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			
			movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
			
			//AddTimer('ACS_collision_delay', 0.1  , false);
			
			if (thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

				PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
			}
			else
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				PlayerPlayAnimation( 'bruxa_jump_up_stop_ACS');
			}
		}
		else
		{	
			if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

				PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
			}
			else
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				PlayerPlayAnimation( 'bruxa_jump_up_stop_ACS');
			}
			
			//AddTimer('ACS_collision_delay', 0.1  , false);
		}
	}
	
	function bruxa_blood_suck_end_no_jump_actual() 
	{ 
		thePlayer.SetVisibility( true ); 

		thePlayer.DestroyEffect('mind_control');	

		thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_ThrowBomb, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_DrawWeapon, 			'ACS_Bruxa_Bite'); 
		thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Jump,					'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Bruxa_Bite');
		//thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Bruxa_Bite');
		//thePlayer.UnblockAction( EIAB_Roll,					'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Parry,				'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Bruxa_Bite');
		thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Bruxa_Bite');

		RemoveTimer('ACS_HijackMoveForward');

		ACS_Hijack_Marker_Destroy();

		ACS_Hijack_Marker_2_Destroy();

		thePlayer.BreakAttachment(); 
		
		RemoveTimer('ACS_bruxa_blood_suck');	
		RemoveTimer('ACS_bruxa_blood_suck_repeat');	 
		RemoveTimer('ACS_blood_suck_victim_paralyze'); 
		
		thePlayer.StopEffect('blood_drain'); 
		thePlayer.StopEffect('blood_start');
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetCanPlayHitAnim(true); 
		
		//AddTimer('ACS_collision_delay', 0.1 , false);
		thePlayer.EnableCharacterCollisions(true); 
		thePlayer.SetIsCurrentlyDodging(false);
		thePlayer.EnableCollisions(true);

		if (thePlayer.HasTag('ACS_Hijack_Flight_End'))
		{
			thePlayer.RemoveTag('ACS_Hijack_Flight_End');
		}

		actors.Clear();
		
		actors = GetActorsInRange(thePlayer, 10, 10, 'bruxa_bite_victim');

		//actors = thePlayer.GetNPCsAndPlayersInRange( 10, 10);

		//theGame.GetActorsByTag( 'bruxa_bite_victim', actors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				NPCanimatedComponent = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );	

				actor = actors[i];

				if (npc.HasTag('bruxa_bite_victim'))
				{
					npc.SetImmortalityMode( AIM_None, AIC_Combat ); 

					npc.StopEffect('demonic_possession');

					thePlayer.PlayEffectSingle('dive_shape');
					thePlayer.StopEffect('dive_shape');

					//thePlayer.PlayEffectSingle('dive_smoke');
					//thePlayer.StopEffect('dive_smoke');

					npc.RemoveBuff(EET_Confusion);

					npc.RemoveBuff(EET_Confusion);

					npc.RemoveBuff(EET_LongStagger);

					npc.RemoveBuff(EET_Slowdown);

					actor.RemoveBuffImmunity_AllNegative();

					actor.RemoveBuffImmunity_AllCritical();

					npc.RemoveBuffImmunity_AllNegative();

					npc.RemoveBuffImmunity_AllCritical();

					((CNewNPC)npc).SetUnstoppable(false);

					//NPCanimatedComponent.PlaySlotAnimationAsync ( '', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0, 0));

					npc.RemoveTag('Hijack_Marker_Added');

					npc.RemoveTag('ACS_demonic_possession');

					npc.RemoveTag('bruxa_bite_victim');
				}
			}
		}

		thePlayer.RemoveTag('blood_sucking'); 
	}

	function ACS_SCAAR_14_Installed(){return;}

	function HijackMoveForwardActual()
	{
		//MovementAdjust();

		actors.Clear();

		theGame.GetActorsByTag( 'bruxa_bite_victim', actors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];
					
				NPCanimatedComponent = (CAnimatedComponent)npc.GetComponentByClassName( 'CAnimatedComponent' );	

				victimMovementAdjustor = npc.GetMovingAgentComponent().GetMovementAdjustor();
		
				victimMovementAdjustor.CancelAll();
				
				victimTicket = victimMovementAdjustor.CreateNewRequest( 'ACS_Victim_Movement_Adjust' );

				((CNewNPC)npc).SetUnstoppable(true);

				npc.RemoveBuffImmunity_AllNegative();

				npc.RemoveBuffImmunity_AllCritical();

				if (npc.HasAbility('mon_garkain'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'monster_werewolf_run_f', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f) );

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 50000 );
				}
				else if (npc.HasAbility('mon_sharley_base'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'roll_forward', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 50000 );
				}
				else if (npc.HasAbility('mon_bies_base'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'monster_bies_charge', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 0.1 );
				}
				else if (npc.HasAbility('mon_golem_base'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'monster_elemental_attack_charge', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 0.1 );
				}
				else if (npc.HasAbility('mon_endriaga_base')
				|| npc.HasAbility('mon_arachas_base')
				|| npc.HasAbility('mon_kikimore_base')
				|| npc.HasAbility('mon_black_spider_base')
				|| npc.HasAbility('mon_black_spider_ep2_base'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'monster_arachas_attack_special_jump', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 0.1 );
				}
				else if (
				npc.HasAbility('mon_ice_giant')
				|| npc.HasAbility('mon_cyclops')
				|| npc.HasAbility('mon_knight_giant')
				|| npc.HasAbility('mon_cloud_giant')
				)
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'giant_combat_walk', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 0.1 );
				}
				else if (npc.HasAbility('mon_troll_base'))
				{
					NPCanimatedComponent.PlaySlotAnimationAsync ( 'monster_cave_troll_run', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.5f, 1.0f));

					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.5 );
					victimMovementAdjustor.MaxLocationAdjustmentSpeed( victimTicket, 0.1 );
				}
				else
				{
					victimMovementAdjustor.AdjustmentDuration( victimTicket, 0.15 );
				}

				victimMovementAdjustor.ShouldStartAt(victimTicket, npc.GetWorldPosition());
				victimMovementAdjustor.MaxRotationAdjustmentSpeed( victimTicket, 50000 );
				victimMovementAdjustor.AdjustLocationVertically( victimTicket, true );
				victimMovementAdjustor.ScaleAnimationLocationVertically( victimTicket, true );

				victimMovementAdjustor.RotateTo( victimTicket, VecHeading( theCamera.GetCameraDirection() ) );

				//if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

				npc.ClearAnimationSpeedMultipliers();

				if (npc.HasAbility('mon_gryphon_base')
				|| npc.HasAbility('mon_siren_base')
				|| npc.HasAbility('mon_wyvern_base')
				|| npc.HasAbility('mon_harpy_base')
				|| npc.HasAbility('mon_draco_base')
				|| npc.HasAbility('mon_basilisk')
				)
				{
					if (theInput.GetActionValue('GI_AxisLeftX') == 0)
					{
						if (theInput.GetActionValue('Sprint') != 0 )
						{
							//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -1.5 + theCamera.GetCameraForward() * 5 + theCamera.GetCameraDirection() * 5 );
							victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldUp() * 1.5 + npc.GetWorldForward() * 5 );
						}
						else
						{
							//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -1.5 + theCamera.GetCameraForward() * 1.5 + theCamera.GetCameraDirection() * 1.5 );
							victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldUp() * 0.25 + npc.GetWorldForward() * 2.5 );
						}
					}
					else if (theInput.GetActionValue('GI_AxisLeftX') != 0)
					{
						if (theInput.GetActionValue('Sprint') != 0 )
						{
							//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -4 + theCamera.GetCameraForward() * 5 + theCamera.GetCameraDirection() * 5 );
							victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldUp() * -2.5 + npc.GetWorldForward() * 5 );
						}
						else
						{
							//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -4 + theCamera.GetCameraForward() * 4 + theCamera.GetCameraDirection() * 1.5 );
							victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldUp() * -1.5 + npc.GetWorldForward() * 2.5 );
						}
					}
				}
				else
				{
					if (theInput.GetActionValue('Sprint') != 0 )
					{
						//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -1.5 + theCamera.GetCameraForward() * 5 + theCamera.GetCameraDirection() * 5 );
						victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldForward() * 10 );
					}
					else
					{
						//victimMovementAdjustor.SlideTo( victimTicket, theCamera.GetCameraPosition() + theCamera.GetCameraUp() * -1.5 + theCamera.GetCameraForward() * 1.5 + theCamera.GetCameraDirection() * 1.5 );
						victimMovementAdjustor.SlideTo( victimTicket, npc.GetWorldPosition() + npc.GetWorldForward() * 5 );
					}
				}
			
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Wraith Mode

	function WraithModeActivate()
	{
		ACS_Wraith_Mode_Tutorial();

		ACS_StaminaDrain(4);

		thePlayer.AddTag('in_wraith');

		thePlayer.SoundEvent("magic_yennefer_necromancy_loop_start");

		thePlayer.SoundEvent( "q704_regis_mistform_activates" );

		thePlayer.SoundEvent( "q704_regis_mistform_LP" );
		thePlayer.SoundEvent( "q704_regis_mistform_LP" );
		thePlayer.SoundEvent( "q704_regis_mistform_LP" );

		environment = (CEnvironmentDefinition)LoadResource(
			//"dlc\bob\data\fx\cutscenes\cs702_vision\vision_env.env"
			"dlc\dlc_acs\data\env\q605_hell_red_blockout.env"
			, true);
		envID = ActivateEnvironmentDefinition( environment, 1000, 1, 0.25f );
		theGame.SetEnvironmentID(envID);

		camera = (CCustomCamera)theCamera.GetTopmostCameraObject();

		camera.StopAnimation('camera_shake_loop_lvl1_1');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_1' );

		camera.StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_5' );

		thePlayer.BlockAction( EIAB_Crossbow, 			'ACS_Wraith');
		thePlayer.BlockAction( EIAB_CallHorse,			'ACS_Wraith');
		thePlayer.BlockAction( EIAB_Signs, 				'ACS_Wraith');
		thePlayer.BlockAction( EIAB_FastTravel, 		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_Fists, 				'ACS_Wraith');
		thePlayer.BlockAction( EIAB_InteractionAction, 	'ACS_Wraith');
		thePlayer.BlockAction( EIAB_UsableItem,			'ACS_Wraith');
		thePlayer.BlockAction( EIAB_ThrowBomb,			'ACS_Wraith');
		thePlayer.BlockAction( EIAB_SwordAttack,		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_LightAttacks,		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_HeavyAttacks,		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_SpecialAttackLight,	'ACS_Wraith');
		thePlayer.BlockAction( EIAB_SpecialAttackHeavy,	'ACS_Wraith');
		//thePlayer.BlockAction( EIAB_Dodge,			'ACS_Wraith');
		//thePlayer.BlockAction( EIAB_Roll,				'ACS_Wraith');
		thePlayer.BlockAction( EIAB_MeditationWaiting,	'ACS_Wraith');
		thePlayer.BlockAction( EIAB_OpenMeditation,		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_RadialMenu,			'ACS_Wraith');
		thePlayer.BlockAction( EIAB_Interactions, 		'ACS_Wraith');
		thePlayer.BlockAction( EIAB_QuickSlots, 		'ACS_Wraith');
				
		thePlayer.StopAllEffects();

		//RemoveTimer('ACS_Embers_Timer');
			
		thePlayer.StopEffect('special_attack_short_fx');
		thePlayer.PlayEffectSingle('special_attack_short_fx');

		thePlayer.StopEffect('mist_fly_regis');
		thePlayer.PlayEffectSingle('mist_fly_regis');

		thePlayer.PlayEffectSingle( 'mist_regis' );

		thePlayer.StopEffect( 'mist_regis' );

		if (ACS_Armor_Equipped_Check())
		{
			thePlayer.PlayEffectSingle('shadows_form');
		}

		thePlayer.EnableCollisions(false);
		thePlayer.EnableCharacterCollisions(false);
										
		AddTimer('ACS_wraith', 0.000000000000000001f, true);
	}

	function WraithModeDeactivate()
	{
		if (thePlayer.HasTag('in_wraith'))
		{
			thePlayer.EnableCollisions(true);

			thePlayer.SoundEvent("magic_yennefer_necromancy_loop_stop");

			thePlayer.SoundEvent("q704_regis_mistform_LP_stop");
			thePlayer.SoundEvent("q704_regis_mistform_LP_stop");
			thePlayer.SoundEvent("q704_regis_mistform_LP_stop");

			DeactivateEnvironment(envID, 1);

			RemoveTimer('ACS_wraith');

			thePlayer.StopEffect('special_attack_short_fx');

			thePlayer.StopEffect('wraith_fx');

			thePlayer.StopEffect('mist_fly_regis');

			thePlayer.PlayEffectSingle( 'mist_regis' );

			thePlayer.StopEffect( 'mist_regis' );

			if (ACS_Armor_Equipped_Check())
			{
				thePlayer.StopEffect('shadows_form');
			}

			thePlayer.UnblockAction( EIAB_Crossbow, 			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_CallHorse,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_Signs, 				'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_FastTravel, 			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_Fists, 				'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_InteractionAction, 	'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_UsableItem,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_ThrowBomb,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_SwordAttack,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_LightAttacks,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_HeavyAttacks,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_SpecialAttackLight,	'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_SpecialAttackHeavy,	'ACS_Wraith');
			//thePlayer.UnblockAction( EIAB_Dodge,				'ACS_Wraith');
			//thePlayer.UnblockAction( EIAB_Roll,				'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_MeditationWaiting,	'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_OpenMeditation,		'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_RadialMenu,			'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_Interactions, 		'ACS_Wraith');
			thePlayer.UnblockAction( EIAB_QuickSlots, 			'ACS_Wraith');

			thePlayer.RemoveTag('in_wraith');

			if (ACS_Zireael_Check())
			{
				if (!thePlayer.IsEffectActive('fury_403_ciri', false))
				{
					thePlayer.PlayEffectSingle( 'fury_403_ciri' );
				}

				if (!thePlayer.IsEffectActive('fury_ciri', false))
				{
					thePlayer.PlayEffectSingle( 'fury_ciri' );
				}
			}
		}
	}

	// Bruxa Dash
	
	function BruxaDash_Combat()
	{
		if( CiriCheck()
		&& HitAnimCheck()
		&& FinisherCheck() 
		&& thePlayer.IsActionAllowed(EIAB_Movement)
		&& (thePlayer.IsInCombat() || !ACS_CombatToExplorationCheck())
		)
		{
			if (ACS_can_bruxa_dash())
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				&& !thePlayer.HasTag('in_wraith')
				)
				{	
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					ACS_refresh_bruxa_dash_cooldown();

					ACS_StaminaDrain(4);

					DeactivateThings_BruxaDash();

					ACS_ThingsThatShouldBeRemoved_NoWeaponRespawn();

					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					thePlayer.SetIsCurrentlyDodging(true);

					thePlayer.EnableCharacterCollisions(false); 

					WraithModeDeactivate();

					if (!thePlayer.HasTag('ACS_Camo_Active')
					&& !thePlayer.HasTag('blood_sucking'))
					{
						thePlayer.PlayEffectSingle( 'bruxa_dash_trails_backup' );
						thePlayer.StopEffect( 'bruxa_dash_trails_backup' );

						thePlayer.PlayEffectSingle( 'shadowdash_short' );
						thePlayer.StopEffect( 'shadowdash_short' );
					}

					if (thePlayer.HasTag('blood_sucking'))
					{
						bruxa_blood_suck_end_no_jump_actual();
					}
					
					dodge_timer_actual();
						
					thePlayer.BreakAttachment();		

					ACS_ExplorationDelayHack();

					DeactivateThings_BruxaDash();

					if (ACS_Bruxa_Camo_Trail())
					{
						ACS_Bruxa_Camo_Trail().StopEffect('smoke');
						ACS_Bruxa_Camo_Trail().PlayEffect('smoke');
					}	

					bruxa_dash();			
				}
			}
		}
	}

	function JumpAttackCombat()
	{
		if (theInput.GetActionValue('Sprint') == 0 )
		{
			WraithModeDeactivate();

			if (ACS_Enabled())
			{
				if (thePlayer.HasTag('blood_sucking'))
				{
					bruxa_blood_suck_end_no_jump_actual();
				}

				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{									 
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					thePlayer.DrainStamina( ESAT_FixedValue,  thePlayer.GetStatMax( BCS_Stamina ) * 0.5, 1 );

					if (!thePlayer.HasTag('ACS_Camo_Active')
					&& !thePlayer.HasTag('blood_sucking'))
					{
						if (thePlayer.HasTag('aard_sword_equipped')
						|| thePlayer.HasTag('vampire_claws_equipped')
						)
						{
							thePlayer.PlayEffectSingle('claws_effect');
							thePlayer.StopEffect('claws_effect');
						}

						thePlayer.PlayEffectSingle('shadowdash_shockwave');
						thePlayer.StopEffect('shadowdash_shockwave');

						//thePlayer.PlayEffectSingle('trap_attack_smoke');
						//thePlayer.StopEffect('trap_attack_smoke');
					}

					if( thePlayer.IsAlive() && thePlayer.IsInCombat() ){ thePlayer.SetVisibility( false ); }		

					if (!thePlayer.HasTag('ACS_HideWeaponOnDodge'))
					{
						thePlayer.AddTag('ACS_HideWeaponOnDodge');
					}

					thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 
					thePlayer.SetCanPlayHitAnim(false); 
					thePlayer.EnableCharacterCollisions(false); 
					thePlayer.AddBuffImmunity_AllNegative('acs_dodge', true); 
					thePlayer.SetIsCurrentlyDodging(true);

					if (!thePlayer.HasTag('aard_sword_equipped'))
					{
						ACS_Weapon_Invisible();
					}

					RemoveTimer('ACS_jump_attack_reveal_timer');

					thePlayer.AddTag('ACS_In_Jump_Attack');

					AddTimer('ACS_jump_attack_reveal_timer', 0.5, false);
										
					if (thePlayer.IsInAir())
					{	
						air_jump_attack();
					}
					else
					{
						jump_attack();
					}
				}
			}
			else
			{
				if (thePlayer.HasTag('blood_sucking'))
				{
					bruxa_blood_suck_end_no_jump_actual();
				}

				ACS_BruxaDodgeSlideBackInit();
			}
		}
	}

	function Jump_Attack_Reveal_Actual()
	{
		if( thePlayer.IsAlive() && thePlayer.HasTag('ACS_In_Jump_Attack') )
		{ 
			thePlayer.SetVisibility( true ); 

			thePlayer.RemoveTag('ACS_In_Jump_Attack');
		}		 

		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 
		thePlayer.SetCanPlayHitAnim(true); 
		thePlayer.EnableCharacterCollisions(true); 
		thePlayer.RemoveBuffImmunity_AllNegative('acs_dodge'); 
		thePlayer.SetIsCurrentlyDodging(false);

		if ( thePlayer.HasTag('ACS_HideWeaponOnDodge') 
		//&& !thePlayer.HasTag('blood_sucking')
		)
		{
			if (!thePlayer.HasTag('aard_sword_equipped'))
			{
				ACS_Weapon_Respawn();
			}
			
			thePlayer.RemoveTag('ACS_HideWeaponOnDodge');

			thePlayer.RemoveTag('ACS_HideWeaponOnDodge_Claw_Effect');
		}
	}

	function BruxaDash_NEW()
	{
		if (CiriCheck()
		&& HitAnimCheck()
		&& FinisherCheck() 
		&& thePlayer.IsActionAllowed(EIAB_Movement)
		)
		{
			DeactivateThings_BruxaDash();

			ACS_ThingsThatShouldBeRemoved_NoWeaponRespawn();

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

			if( BruxaDashCallTime + DOUBLE_TAP_WINDOW >= theGame.GetEngineTimeAsSeconds() )
			{
				BruxaDashDoubleTap = true;
			}
			else
			{
				BruxaDashDoubleTap = false;	
			}
			
			if( BruxaDashDoubleTap )
			{
				if ( 
				ACS_WraithMode_Enabled() 
				&& ACS_WraithModeInput() == 1 
				&& !thePlayer.HasTag('in_wraith') )
				{
					if (!thePlayer.IsInCombat()) 
					{
						if (theGame.IsFocusModeActive())
						{
							if ( ACS_StaminaBlockAction_Enabled() 
							&& StaminaCheck()
							)
							{									 
								if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
							}
							else
							{
								WraithModeActivate();
							}
						}
					}
				}

				if (ACS_BruxaDash_Enabled() 
				&& !theGame.IsFocusModeActive()
				&& ACS_BruxaDashInput() == 1
				&& ACS_can_bruxa_dash())
				{
					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					&& !thePlayer.HasTag('in_wraith')
					)
					{	
						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						ACS_StaminaDrain(4);

						thePlayer.SetIsCurrentlyDodging(true);

						thePlayer.EnableCharacterCollisions(false); 

						ACS_refresh_bruxa_dash_cooldown();

						WraithModeDeactivate();

						if (!thePlayer.HasTag('ACS_Camo_Active')
						&& !thePlayer.HasTag('blood_sucking'))
						{
							thePlayer.PlayEffectSingle( 'bruxa_dash_trails_backup' );
							thePlayer.StopEffect( 'bruxa_dash_trails_backup' );

							thePlayer.PlayEffectSingle( 'shadowdash_short' );
							thePlayer.StopEffect( 'shadowdash_short' );
						}

						if (thePlayer.HasTag('blood_sucking'))
						{
							bruxa_blood_suck_end_no_jump_actual();
						}
						
						dodge_timer_actual();
							
						thePlayer.BreakAttachment();		

						bruxa_dash();						
					}
				}
			}
			else 
			{	
				if ( thePlayer.HasTag('vampire_claws_equipped') )
				{
					if ( !thePlayer.HasTag('ACS_Camo_Active') && !thePlayer.HasTag('in_wraith') && !thePlayer.HasTag('blood_sucking') )
					{
						thePlayer.PlayEffectSingle( 'magic_step_l_new' );
						thePlayer.StopEffect( 'magic_step_l_new' );	

						thePlayer.PlayEffectSingle( 'magic_step_r_new' );
						thePlayer.StopEffect( 'magic_step_r_new' );	

						thePlayer.PlayEffectSingle( 'bruxa_dash_trails' );
						thePlayer.StopEffect( 'bruxa_dash_trails' );

						thePlayer.PlayEffectSingle( 'shadowdash_short' );
						thePlayer.StopEffect( 'shadowdash_short' );
					}
				}
				
				if ( ACS_WraithMode_Enabled() 
				&& ACS_WraithModeInput() == 0 
				&& !thePlayer.HasTag('in_wraith')
				&& !thePlayer.GetIsRunning()
				&& !thePlayer.GetIsWalking()
				)
				{
					if (!thePlayer.IsInCombat()) 
					{
						if (theGame.IsFocusModeActive())
						{
							if ( ACS_StaminaBlockAction_Enabled() 
							&& StaminaCheck()
							)
							{									 
								if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
							}
							else
							{
								WraithModeActivate();
							}
						}
					}
				}

				if (ACS_BruxaDash_Enabled() 
				&& !theGame.IsFocusModeActive()
				&& ACS_BruxaDashInput() == 0
				&& ACS_can_bruxa_dash()
				&& !thePlayer.GetIsRunning()
				&& !thePlayer.GetIsWalking()
				)
				{
					if ( ACS_StaminaBlockAction_Enabled() 
					&& StaminaCheck()
					&& !thePlayer.HasTag('in_wraith')
					)
					{	
						if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
					}
					else
					{
						ACS_StaminaDrain(4);

						thePlayer.SetIsCurrentlyDodging(true);

						thePlayer.EnableCharacterCollisions(false); 

						ACS_refresh_bruxa_dash_cooldown();

						WraithModeDeactivate();

						if (!thePlayer.HasTag('ACS_Camo_Active')
						&& !thePlayer.HasTag('blood_sucking'))
						{
							thePlayer.PlayEffectSingle( 'bruxa_dash_trails_backup' );
							thePlayer.StopEffect( 'bruxa_dash_trails_backup' );

							thePlayer.PlayEffectSingle( 'shadowdash_short' );
							thePlayer.StopEffect( 'shadowdash_short' );
						}

						if (thePlayer.HasTag('blood_sucking'))
						{
							bruxa_blood_suck_end_no_jump_actual();
						}
						
						dodge_timer_actual();
							
						thePlayer.BreakAttachment();		

						bruxa_dash();						
					}
				}
			}

			DeactivateThings_BruxaDash();
			
			BruxaDashCallTime = theGame.GetEngineTimeAsSeconds();
		}
	}

	function bruxa_dash()
	{
		var dest1, dest2, dest3, dest4		: Vector;

		ACS_Bruxa_Dash_Tutorial();

		if (thePlayer.HasTag('ACS_Camo_Active'))
		{
			thePlayer.SoundEvent("monster_bruxa_combat_disappear");
		}
		
		if ( thePlayer.IsInInterior() )
		{
			dest1 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (0-(ACS_BruxaDash_Combat_Distance()/4))) + thePlayer.GetHeadingVector() * (ACS_BruxaDash_Combat_Distance()/2);
			
			dest2 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (ACS_BruxaDash_Combat_Distance()/4)) + thePlayer.GetHeadingVector() * (ACS_BruxaDash_Combat_Distance()/2);
			
			dest3 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (0-(ACS_BruxaDash_Normal_Distance()/4))) + thePlayer.GetHeadingVector() * (ACS_BruxaDash_Normal_Distance()/2);
			
			dest4 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (ACS_BruxaDash_Normal_Distance()/4)) + thePlayer.GetHeadingVector() * (ACS_BruxaDash_Normal_Distance()/2);

		}
		else if (thePlayer.IsSwimming())
		{
			dest1 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * ACS_BruxaDash_Combat_Distance();
			
			dest2 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * ACS_BruxaDash_Combat_Distance();
			
			dest3 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * ACS_BruxaDash_Normal_Distance();
			
			dest4 = theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * ACS_BruxaDash_Normal_Distance();
		}
		else
		{
			dest1 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (0-(ACS_BruxaDash_Combat_Distance()/4))) + thePlayer.GetHeadingVector() * ACS_BruxaDash_Combat_Distance();
			
			dest2 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (ACS_BruxaDash_Combat_Distance()/4)) + thePlayer.GetHeadingVector() * ACS_BruxaDash_Combat_Distance();
			
			dest3 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (0-(ACS_BruxaDash_Normal_Distance()/4))) + thePlayer.GetHeadingVector() * ACS_BruxaDash_Normal_Distance();
			
			dest4 = thePlayer.GetWorldPosition() + (thePlayer.GetWorldRight() * (ACS_BruxaDash_Normal_Distance()/4)) + thePlayer.GetHeadingVector() * ACS_BruxaDash_Normal_Distance();
		}
		
		MovementAdjustBruxaDash();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsSwimming())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsSwimming())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}
				else
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}
			}
			
			if (theInput.GetActionValue('GI_AxisLeftX') > 0.5 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				PlayerPlayAnimation( 'bruxa_run_dash_right_ACS');
				
				movementAdjustor.SlideTo( ticket, TraceFloor(dest2) );
			}	
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				PlayerPlayAnimation( 'bruxa_run_dash_ACS');
				
				movementAdjustor.SlideTo( ticket, TraceFloor(dest1) );
			}	
			else
			{	
				bruxa_dash_index_1 = RandDifferent(this.previous_bruxa_dash_index_1 , 2);

				switch (bruxa_dash_index_1) 
				{				
					case 1:
					movementAdjustor.SlideTo( ticket, TraceFloor(dest1) );
					PlayerPlayAnimation( 'bruxa_run_dash_ACS');
					break;	
							
					default:
					movementAdjustor.SlideTo( ticket, TraceFloor(dest2) );
					PlayerPlayAnimation( 'bruxa_run_dash_right_ACS');
					break;	
				}

				this.previous_bruxa_dash_index_1 = bruxa_dash_index_1;
			}
		}
		else
		{	
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (theInput.GetActionValue('GI_AxisLeftX') < -0.5 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				PlayerPlayAnimation( 'bruxa_run_dash_ACS');
				
				if (thePlayer.IsInCombat())
				{
					movementAdjustor.SlideTo( ticket, TraceFloor(dest1) );
				}
				else
				{
					movementAdjustor.SlideTo( ticket, TraceFloor(dest3) );
				}
			}	
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				PlayerPlayAnimation( 'bruxa_run_dash_right_ACS');
				
				if (thePlayer.IsInCombat())
				{
					movementAdjustor.SlideTo( ticket, TraceFloor(dest2) );
				}
				else
				{
					movementAdjustor.SlideTo( ticket, TraceFloor(dest4) );
				}
			}	
			else
			{			
				bruxa_dash_index_2 = RandDifferent(this.previous_bruxa_dash_index_2 , 2);

				switch (bruxa_dash_index_2) 
				{				
					case 1:
					
					if (thePlayer.IsInCombat())
					{
						movementAdjustor.SlideTo( ticket, TraceFloor(dest1) );
					}
					else
					{
						movementAdjustor.SlideTo( ticket, TraceFloor(dest3) );
					}
					PlayerPlayAnimation( 'bruxa_run_dash_ACS');
					break;	
							
					default:
					
					if (thePlayer.IsInCombat())
					{
						movementAdjustor.SlideTo( ticket, TraceFloor(dest2) );
					}
					else
					{
						movementAdjustor.SlideTo( ticket, TraceFloor(dest4) );
					}
					PlayerPlayAnimation( 'bruxa_run_dash_right_ACS');
					break;	
				}

				this.previous_bruxa_dash_index_2 = bruxa_dash_index_2;
			}
		}
	}

	function wraith_mode_quick()
	{
		if ( 
		ACS_WraithMode_Enabled() 
		&& !thePlayer.HasTag('in_wraith') )
		{
			if (!thePlayer.IsInCombat()) 
			{
				if ( ACS_StaminaBlockAction_Enabled() 
				&& StaminaCheck()
				)
				{									 
					if(thePlayer.IsInCombat()){thePlayer.RaiseEvent( 'CombatTaunt' );} thePlayer.SoundEvent("gui_no_stamina");
				}
				else
				{
					WraithModeActivate();
				}
			}
		}
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Claw Attacks
	
	function geraltRandomClawFistAttack() 
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if (combo_counter_claw_fist_light == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 1)
				{
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 3)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}

				else if (combo_counter_claw_fist_light == 4)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light -= combo_counter_claw_fist_light;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_fist_attack_index_1 = RandDifferent(this.previous_claw_fist_attack_index_1 , 5);

				switch (claw_fist_attack_index_1) 
				{	
					case 4:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_light_02_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_light_01_ACS');
					break;
				}
			
				this.previous_claw_fist_attack_index_1 = claw_fist_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if (combo_counter_claw_fist_light == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 1)
				{
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}
				else if (combo_counter_claw_fist_light == 3)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light += 1;
				}

				else if (combo_counter_claw_fist_light == 4)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_light -= combo_counter_claw_fist_light;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_fist_attack_index_3 = RandDifferent(this.previous_claw_fist_attack_index_3 , 5);

				switch (claw_fist_attack_index_3) 
				{							
					case 4:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_light_02_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_light_01_ACS');
					break;
				}
				
				this.previous_claw_fist_attack_index_3 = claw_fist_attack_index_3;
			}
		}	
	}

	function geraltClawSprintingAttack() 
	{
		MovementAdjust();

		ACS_Combo_Mode_Reset_Hard();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			PlayerPlayAnimation( 'bruxa_attack_special_charge_run_ACS');
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'bruxa_attack_special_charge_run_ACS');
		}

		thePlayer.SetSprintActionPressed( false );
		thePlayer.SetSprintToggle( false );
		thePlayer.SetWalkToggle( true );
	}
	
	function geraltRandomHeavyClawAttack() 
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if (combo_counter_claw_fist_heavy == 0)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 1)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 2)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 3)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}

				else if (combo_counter_claw_fist_heavy == 4)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}

				else if (combo_counter_claw_fist_heavy == 5)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}

				else if (combo_counter_claw_fist_heavy == 6)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}

				else if (combo_counter_claw_fist_heavy == 7)
				{
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy -= combo_counter_claw_fist_heavy;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{							
					heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 3);

					switch (heavy_claw_attack_index) 
					{		
						case 2:
						PlayerPlayAnimation( 'attack_counter_medium_ACS');
						break;	
						
						case 1:	
						PlayerPlayAnimation( 'attack_counter_close_ACS');	
						break;

						default:
						PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	
						break;
					}
						
					this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
				}
				else
				{
					heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 5);

					switch (heavy_claw_attack_index) 
					{		
						case 4:
						PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
						break;
						
						case 3:
						PlayerPlayAnimation( 'attack_heavy_single_02_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'attack_heavy_single_01_ACS');
						break;	
						
						case 1:	
						PlayerPlayAnimation( 'attack_heavy_02_ACS');	
						break;

						default:
						PlayerPlayAnimation( 'attack_heavy_01_ACS');	
						break;
					}
						
					this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if (combo_counter_claw_fist_heavy == 0)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 1)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 2)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}
				else if (combo_counter_claw_fist_heavy == 3)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}

				else if (combo_counter_claw_fist_heavy == 4)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}

				else if (combo_counter_claw_fist_heavy == 5)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}

				else if (combo_counter_claw_fist_heavy == 6)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy += 1;
				}

				else if (combo_counter_claw_fist_heavy == 7)
				{
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	

					combo_counter_damage += 1;

					combo_counter_claw_fist_heavy -= combo_counter_claw_fist_heavy;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 5);

				switch (heavy_claw_attack_index) 
				{									
					case 4:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
					break;
						
					case 3:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');
					break;	
						
					case 1:	
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	
					break;
				}
				
				this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
			}
		}	
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Fist Attacks

	function geraltRandomLightFistAttack()
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_fist_attack == 0)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 1)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_lh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 2)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_rh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 3)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_5_rl_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 4)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 5)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 6)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 7)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 8)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 9)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 10)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 11)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 12)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 13)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 14)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 15)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 16)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 17)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 18)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack -= combo_counter_fist_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					fist_attack_index_1 = RandDifferent(this.previous_fist_attack_index_1 , 8);

					switch (fist_attack_index_1) 
					{	
						case 7:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	
						break;

						case 6:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms_short');	
						break;

						case 5:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms_short');	
						break;

						case 4:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms_short');	
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms_short');	
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms_short');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms_short');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms_short');
						break;
					}
				
					this.previous_fist_attack_index_1 = fist_attack_index_1;
				}
				else if( targetDistance > 1.5*1.5 && targetDistance <= 3.5*3.5) 
				{
					fist_attack_index_1 = RandDifferent(this.previous_fist_attack_index_1 , 8);

					switch (fist_attack_index_1) 
					{	
						case 7:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_5_rl_40ms');	
						break;

						case 6:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms');	
						break;

						case 5:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms');	
						break;

						case 4:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms');	
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms');	
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms');
						break;
					}
				
					this.previous_fist_attack_index_1 = fist_attack_index_1;
				}
				else
				{
					fist_attack_index_2 = RandDifferent(this.previous_fist_attack_index_2 , 3);

					switch (fist_attack_index_2) 
					{	
						case 2:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_lh_50ms');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_rh_50ms');
						break;
					}
				
					this.previous_fist_attack_index_2 = fist_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_fist_attack == 0)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 1)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_lh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 2)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_rh_50ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}
				else if (combo_counter_fist_attack == 3)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_5_rl_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 4)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 5)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 6)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 7)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 8)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 9)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 10)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 11)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 12)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 13)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 14)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 15)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 16)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 17)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms_short');	

					combo_counter_damage += 1;

					combo_counter_fist_attack += 1;
				}

				else if (combo_counter_fist_attack == 18)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack -= combo_counter_fist_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				fist_attack_index_3 = RandDifferent(this.previous_fist_attack_index_3 , 19);

				switch (fist_attack_index_3) 
				{	
					case 18:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_1_rh_50ms');	
					break;
					
					case 17:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_lh_50ms');
					break;

					case 16:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_far_forward_2_rh_50ms');
					break;

					case 15:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_5_rl_40ms');	
					break;

					case 14:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms');	
					break;

					case 13:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms');	
					break;

					case 12:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms');	
					break;
					
					case 11:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms');	
					break;
					
					case 10:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms');	
					break;
					
					case 9:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms');
					break;

					case 8:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms');
					break;

					case 7:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	
					break;

					case 6:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_4_lh_40ms_short');	
					break;

					case 5:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_rh_40ms_short');	
					break;

					case 4:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_lh_40ms_short');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_1_rh_40ms_short');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_lh_40ms_short');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_2_rh_40ms_short');
					break;

					default:
					PlayerPlayAnimation( 'man_fistfight_attack_fast_3_lh_40ms_short');
					break;
				}
				
				this.previous_fist_attack_index_3 = fist_attack_index_3;
			}
		}
	}

	function geraltRandomHeavyFistAttack()
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_fist_attack_heavy == 0)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 1)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_rh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 2)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_lh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 3)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 4)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 5)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 6)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_3_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 7)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_4_ll_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 8)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 9)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_2');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 10)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_3');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 11)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_4');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 12)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_5');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 13)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_6');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy -= combo_counter_fist_attack_heavy;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					heavy_fist_attack_index_1 = RandDifferent(this.previous_heavy_fist_attack_index_1 , 6);

					switch (heavy_fist_attack_index_1) 
					{	
						case 5:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	
						break;

						case 4:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_6');	
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_5');	
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_4');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_3');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_close_combo_attack_2');
						break;
					}
				
					this.previous_heavy_fist_attack_index_1 = heavy_fist_attack_index_1;
				}
				else if( targetDistance > 1.5*1.5 && targetDistance <= 3.5*3.5) 
				{
					heavy_fist_attack_index_1 = RandDifferent(this.previous_heavy_fist_attack_index_1 , 6);

					switch (heavy_fist_attack_index_1) 
					{	
						case 5:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_4_ll_70ms');	
						break;

						case 4:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_3_lh_70ms');	
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_rh_70ms');	
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_lh_70ms');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_rh_70ms');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_lh_70ms');
						break;
					}
				
					this.previous_heavy_fist_attack_index_1 = heavy_fist_attack_index_1;
				}
				else
				{
					heavy_fist_attack_index_2 = RandDifferent(this.previous_heavy_fist_attack_index_2 , 3);

					switch (heavy_fist_attack_index_2) 
					{	
						case 2:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_rh_80ms');
						break;

						default:
						PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_lh_80ms');
						break;
					}
				
					this.previous_heavy_fist_attack_index_2 = heavy_fist_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_fist_attack_heavy == 0)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 1)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_rh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 2)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_lh_80ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}
				else if (combo_counter_fist_attack_heavy == 3)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 4)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 5)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_rh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 6)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_3_lh_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 7)
				{
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_4_ll_70ms');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 8)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 9)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_2');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 10)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_3');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 11)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_4');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 12)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_5');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy += 1;
				}

				else if (combo_counter_fist_attack_heavy == 13)
				{
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_6');	

					combo_counter_damage += 1;

					combo_counter_fist_attack_heavy -= combo_counter_fist_attack_heavy;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				heavy_fist_attack_index_3 = RandDifferent(this.previous_heavy_fist_attack_index_3 , 15);

				switch (heavy_fist_attack_index_3) 
				{
					case 14:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_2_ll_80ms');	
					break;
					
					case 13:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_rh_80ms');
					break;

					case 12:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_far_1_lh_80ms');
					break;

					case 11:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_4_ll_70ms');	
					break;

					case 10:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_3_lh_70ms');	
					break;
					
					case 9:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_rh_70ms');	
					break;
					
					case 8:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_2_lh_70ms');	
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_rh_70ms');
					break;

					case 6:
					PlayerPlayAnimation( 'man_fistfight_attack_heavy_1_lh_70ms');
					break;

					case 5:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_1');	
					break;

					case 4:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_6');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_5');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_4');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_3');
					break;

					default:
					PlayerPlayAnimation( 'man_fistfight_close_combo_attack_2');
					break;
				}
				
				this.previous_heavy_fist_attack_index_3 = heavy_fist_attack_index_3;
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Counters
	
	function geraltRandomKick() 
	{
		MovementAdjust();

		//ACS_EventHackAttack();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_kick == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_kick += 1;
				}

				else if (combo_counter_kick == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_kick_ACS');	

					combo_counter_damage += 1;

					combo_counter_kick -= combo_counter_kick;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				kick_index_1 = RandDifferent(this.previous_kick_index_1 , 2);

				switch (kick_index_1) 
				{										
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_kick_ACS');
					break;	
				}
			
				this.previous_kick_index_1 = kick_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_kick == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_kick_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_kick += 1;
				}

				else if (combo_counter_kick == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');	

					combo_counter_damage += 1;

					combo_counter_kick -= combo_counter_kick;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				kick_index_2 = RandDifferent(this.previous_kick_index_2 , 2);

				switch (kick_index_2) 
				{						
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_kick_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_kick_ACS');
					break;
				}
				
				this.previous_kick_index_2 = kick_index_2;
			}
		}	
	}
	
	function geraltRandomPush() 
	{
		MovementAdjust();

		//ACS_EventHackAttack();

		if (thePlayer.HasTag('axii_sword_equipped'))
		{
			RemoveTimer('ACS_Shield_Spawn_Delay');

			AddTimer('ACS_Shield_Spawn_Delay', 0.5, false);
		}
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_push == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_push += 1;
				}

				else if (combo_counter_push == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_push -= combo_counter_push;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				push_index_1 = RandDifferent(this.previous_push_index_1 , 2);

				switch (push_index_1) 
				{													
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_1_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_2_ACS');
					break;
				}
					
				this.previous_push_index_1 = push_index_1;
			}

			AddTimer('ACS_HeadbuttDamage', 0.2, false);
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_push == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_push += 1;
				}

				else if (combo_counter_push == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_push -= combo_counter_push;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				push_index_2 = RandDifferent(this.previous_push_index_2 , 2);

				switch (push_index_2) 
				{	
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_1_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_push_2_ACS');
					break;
				}
				
				this.previous_push_index_2 = push_index_2;
			}

			AddTimer('ACS_HeadbuttDamage', 0.2, false);
		}	
	}
	
	/*
	function geraltRandomPunch() 
	{
		MovementAdjust();

		ACS_Dagger_Summon();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_punch == 0)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_punch += 1;
				}

				else if (combo_counter_punch == 1)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');	

					combo_counter_damage += 1;

					combo_counter_punch -= combo_counter_punch;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				punch_index_1 = RandDifferent(this.previous_punch_index_1 , 2);

				switch (punch_index_1) 
				{														
					case 1:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');
					break;

					default:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');
					break;
				}
					
				this.previous_punch_index_1 = punch_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_punch == 0)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_punch += 1;
				}

				else if (combo_counter_punch == 1)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');	

					combo_counter_damage += 1;

					combo_counter_punch -= combo_counter_punch;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				punch_index_2 = RandDifferent(this.previous_punch_index_2 , 2);

				switch (punch_index_2) 
				{	
					case 1:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');
					break;

					default:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');
					break;
				}
				
				this.previous_punch_index_2 = punch_index_2;
			}
		}	
	}
	*/

	function geraltRandomPunch() 
	{
		MovementAdjust();

		if (thePlayer.IsAnyWeaponHeld() && !thePlayer.IsWeaponHeld('fist'))
		{
			ACS_Dagger_Summon();	
		}

		//ACS_EventHackAttack();

		if (thePlayer.HasTag('axii_sword_equipped'))
		{
			RemoveTimer('ACS_Shield_Spawn_Delay');

			AddTimer('ACS_Shield_Spawn_Delay', 0.5, false);
		}
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if( targetDistance <= 1.75 * 1.75 ) 
			{	
				PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');
			}
			else
			{
				PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_punch == 0)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_punch += 1;
				}

				else if (combo_counter_punch == 1)
				{
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');	

					combo_counter_damage += 1;

					combo_counter_punch -= combo_counter_punch;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				punch_index_2 = RandDifferent(this.previous_punch_index_2 , 2);

				switch (punch_index_2) 
				{	
					case 1:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_70ms_far');
					break;

					default:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');
					break;
				}
				
				this.previous_punch_index_2 = punch_index_2;
			}
		}	
	}
	
	function geraltRandomYrdenCounter() 
	{
		MovementAdjust();

		ACS_EventHackAttack();
		
		//ACS_Giant_Lightning_Strike_Single();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			PlayerPlayAnimation( 'man_npc_2h_parry_ACS');
			
			/*
			yrden_counter_index_1 = RandDifferent(this.previous_yrden_counter_index_1 , 2);

			switch (yrden_counter_index_1) 
			{														
				case 1:
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');
				break;	

				default:
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');
				break;
			}
				
			this.previous_yrden_counter_index_1 = yrden_counter_index_1;
			*/
		}
		else
		{	
			if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			PlayerPlayAnimation( 'man_npc_2h_parry_ACS');
			
			/*
			yrden_counter_index_2 = RandDifferent(this.previous_yrden_counter_index_2 , 2);

			switch (yrden_counter_index_2) 
			{	
				case 1:
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');
				break;	

				default:
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');
				break;
			}
			
			this.previous_yrden_counter_index_2 = yrden_counter_index_2;
			*/
		}

		AddTimer('ACS_HeadbuttDamage', 0.5, false);	
	}
	
	function geraltRandomAardCounter() 
	{
		MovementAdjust();

		ACS_EventHackAttack();

		//ACS_toadtest(1);

		AddTimer('ACS_Blood_Spray', 0.5, false);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_aard_counter == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
				}

				else if (combo_counter_aard_counter == 1)
				{
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_1 = RandDifferent(this.previous_aard_counter_index_1 , 2);

				switch (aard_counter_index_1) 
				{	
					case 1:	
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	
					break;
				}
					
				this.previous_aard_counter_index_1 = aard_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_aard_counter == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
				}

				else if (combo_counter_aard_counter == 1)
				{
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_2 = RandDifferent(this.previous_aard_counter_index_2 , 2);

				switch (aard_counter_index_2) 
				{	
					case 1:	
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	
					break;
				}
				
				this.previous_aard_counter_index_2 = aard_counter_index_2;
			}
		}	
	}

	function geraltRandomVampireCounter() 
	{
		MovementAdjust();

		//ACS_toadtest(1);

		AddTimer('ACS_Blood_Spray', 0.5, false);

		VampVoiceEffects_Monster();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_aard_counter == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
				}

				else if (combo_counter_aard_counter == 1)
				{
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_1 = RandDifferent(this.previous_aard_counter_index_1 , 2);

				switch (aard_counter_index_1) 
				{	
					case 1:	
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	
					break;
				}
					
				this.previous_aard_counter_index_1 = aard_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_aard_counter == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_aard_counter += 1;
				}

				else if (combo_counter_aard_counter == 1)
				{
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');	

					combo_counter_damage += 1;

					combo_counter_aard_counter -= combo_counter_aard_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_2 = RandDifferent(this.previous_aard_counter_index_2 , 2);

				switch (aard_counter_index_2) 
				{	
					case 1:	
					PlayerPlayAnimation( 'bruxa_special_attack_02_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'bruxa_attack_special_01_ACS');	
					break;
				}
				
				this.previous_aard_counter_index_2 = aard_counter_index_2;
			}
		}	
	}
	
	function geraltRandomQuenCounter() 
	{
		MovementAdjust();

		ACS_EventHackAttack();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_quen_counter == 0)
				{
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_quen_counter += 1;
				}

				else if (combo_counter_quen_counter == 1)
				{
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_shout_ACS');

						RemoveTimer('ACS_Shout_Stop');
						AddTimer('ACS_Shout_Stop', 1.5, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_sand_hand_right_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter += 1;
				}

				else if (combo_counter_quen_counter == 2)
				{
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_with_shout_001_ACS');

						RemoveTimer('ACS_Shout');
						AddTimer('ACS_Shout', 1, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_elbow_r_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter -= combo_counter_quen_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				quen_counter_index_1 = RandDifferent(this.previous_quen_counter_index_1 , 3);

				switch (quen_counter_index_1) 
				{	
					/*
					case 3:
					PlayerPlayAnimation( 'attack_sand_1_ACS');
					break;	
					*/
					
					case 2:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_with_shout_001_ACS');

						RemoveTimer('ACS_Shout');
						AddTimer('ACS_Shout', 1, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_sand_hand_right_ACS');
					}
					break;	
									
					case 1:
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');
					break;	

					default:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_shout_ACS');

						RemoveTimer('ACS_Shout_Stop');
						AddTimer('ACS_Shout_Stop', 1.5, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_elbow_r_ACS');
					}
					break;
				}
					
				this.previous_quen_counter_index_1 = quen_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_quen_counter == 0)
				{
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_quen_counter += 1;
				}

				else if (combo_counter_quen_counter == 1)
				{
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_shout_ACS');

						RemoveTimer('ACS_Shout_Stop');
						AddTimer('ACS_Shout_Stop', 1.5, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_sand_hand_right_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter += 1;
				}

				else if (combo_counter_quen_counter == 2)
				{
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_with_shout_001_ACS');

						RemoveTimer('ACS_Shout');
						AddTimer('ACS_Shout', 1, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_elbow_r_ACS');
					}

					combo_counter_damage += 1;

					combo_counter_quen_counter -= combo_counter_quen_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				quen_counter_index_2 = RandDifferent(this.previous_quen_counter_index_2 , 3);

				switch (quen_counter_index_2) 
				{	
					/*
					case 3:
					PlayerPlayAnimation( 'attack_sand_1_ACS');
					break;	
					*/
					
					case 2:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_with_shout_001_ACS');

						RemoveTimer('ACS_Shout');
						AddTimer('ACS_Shout', 1, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_sand_hand_right_ACS');
					}
					break;	
									
					case 1:
					PlayerPlayAnimation( 'attack_sand_hand_left_ACS');
					break;	

					default:
					if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
					{
						PlayerPlayAnimation( 'ethereal_attack_shout_ACS');

						RemoveTimer('ACS_Shout_Stop');
						AddTimer('ACS_Shout_Stop', 1.5, false);
					}
					else
					{
						PlayerPlayAnimation( 'attack_elbow_r_ACS');
					}
					break;
				}
				
				this.previous_quen_counter_index_2 = quen_counter_index_2;
			}
		}	
	}
	
	function geraltRandomAxiiCounter() 
	{
		MovementAdjust();

		ACS_EventHackAttack();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axii_counter == 0)
				{
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							Shrink_Geralt(0.799999640000072);
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							Shrink_Geralt(0.899999820000036);
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						Shrink_Geralt(0.9599998080000384);
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}


					combo_counter_damage -= combo_counter_damage;

					combo_counter_axii_counter += 1;
				}

				else if (combo_counter_axii_counter == 1)
				{
					Shrink_Geralt(0.899999820000036);
					PlayerPlayAnimation( 'attack_ready_stepthrust_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter += 1;
				}

				else if (combo_counter_axii_counter == 2)
				{
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'attack_ready_kickswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter -= combo_counter_axii_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axii_counter_index_1 = RandDifferent(this.previous_axii_counter_index_1 , 3);

				switch (axii_counter_index_1) 
				{	
					case 2:
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							Shrink_Geralt(0.799999640000072);
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							Shrink_Geralt(0.899999820000036);
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						Shrink_Geralt(0.9599998080000384);
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}
					break;

					case 1:
					Shrink_Geralt(0.899999820000036);
					PlayerPlayAnimation( 'attack_ready_stepthrust_01_ACS');
					break;
						
					default:
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'attack_ready_kickswing_01_ACS');
					break;
				}
					
				this.previous_axii_counter_index_1 = axii_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axii_counter == 0)
				{
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							Shrink_Geralt(0.799999640000072);
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							Shrink_Geralt(0.899999820000036);
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						Shrink_Geralt(0.9599998080000384);
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axii_counter += 1;
				}

				else if (combo_counter_axii_counter == 1)
				{
					Shrink_Geralt(0.899999820000036);
					PlayerPlayAnimation( 'attack_ready_stepthrust_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter += 1;
				}

				else if (combo_counter_axii_counter == 2)
				{
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'attack_ready_kickswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_axii_counter -= combo_counter_axii_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axii_counter_index_2 = RandDifferent(this.previous_axii_counter_index_2 , 3);

				switch (axii_counter_index_2) 
				{		
					case 2:
					if( RandF() < 0.5 ) 
					{
						if( RandF() < 0.5 ) 
						{
							Shrink_Geralt(0.799999640000072);
							PlayerPlayAnimation( 'attack_ready_kick_01_ACS');
						}
						else
						{
							Shrink_Geralt(0.899999820000036);
							PlayerPlayAnimation( 'attack_ready_kick_02_ACS');
						}
					}
					else
					{
						Shrink_Geralt(0.9599998080000384);
						PlayerPlayAnimation( 'attack_ready_kick_03_ACS');
					}
					break;

					case 1:
					Shrink_Geralt(0.899999820000036);
					PlayerPlayAnimation( 'attack_ready_stepthrust_01_ACS');
					break;
						
					default:
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'attack_ready_kickswing_01_ACS');
					break;
				}
				
				this.previous_axii_counter_index_2 = axii_counter_index_2;
			}
		}	
	}
	
	function geraltRandomIgniCounter_Human() 
	{
		MovementAdjust();

		ACS_EventHackAttack();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_igni_counter == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5 * 1.5 ) 
				{	
					igni_counter_index_1 = RandDifferent(this.previous_igni_counter_index_1 , 2);

					switch (igni_counter_index_1) 
					{										
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

						AddTimer('ACS_HeadbuttDamage', 0.3, false);
						break;
						
						default:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
						break;	
					}
			
					this.previous_igni_counter_index_1 = igni_counter_index_1;
				}
				else
				{
					igni_counter_index_2 = RandDifferent(this.previous_igni_counter_index_2 , 2);

					switch (igni_counter_index_2) 
					{												
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_repel_lp_bash_ACS');

						AddTimer('ACS_HeadbuttDamage', 0.3, false);
						break;

						default:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
						break;
					}
					
					this.previous_igni_counter_index_2 = igni_counter_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_igni_counter == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage -= combo_counter_damage;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				igni_counter_index_3 = RandDifferent(this.previous_igni_counter_index_3 , 4);

				switch (igni_counter_index_3) 
				{						
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_repel_rp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
					break;	
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_repel_lp_bash_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.3, false);
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
					break;
				}
				
				this.previous_igni_counter_index_3 = igni_counter_index_3;
			}
		}	
	}

	function geraltRandomIgniCounter_Monster() 
	{
		MovementAdjust();

		ACS_EventHackAttack();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_igni_counter == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}

				else if (combo_counter_igni_counter == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_rp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5 * 1.5 ) 
				{	
					igni_counter_index_1 = RandDifferent(this.previous_igni_counter_index_1 , 3);

					switch (igni_counter_index_1) 
					{	
						case 2:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
						break;

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_lp');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');
						break;	
					}
			
					this.previous_igni_counter_index_1 = igni_counter_index_1;
				}
				else
				{
					igni_counter_index_2 = RandDifferent(this.previous_igni_counter_index_2 , 3);

					switch (igni_counter_index_2) 
					{	
						case 2:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
						break;

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_lp');
						break;

						default:
						PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_rp');
						break;
					}
					
					this.previous_igni_counter_index_2 = igni_counter_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_igni_counter == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}

				else if (combo_counter_igni_counter == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_lp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_rp');

					combo_counter_damage += 1;

					combo_counter_igni_counter += 1;
				}

				else if (combo_counter_igni_counter == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_igni_counter -= combo_counter_igni_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				igni_counter_index_3 = RandDifferent(this.previous_igni_counter_index_3 , 6);

				switch (igni_counter_index_3) 
				{
					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_lp');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_rp');
					break;	
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_left_lp');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_sidestep_counter_right_rp');
					break;
				}
				
				this.previous_igni_counter_index_3 = igni_counter_index_3;
			}
		}	
	}
	
	function geraltRandomSpearCounter() 
	{
		MovementAdjust();

		ACS_EventHackAttack();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_counter == 0)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_counter += 1;
				}

				else if (combo_counter_spear_counter == 1)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_counter -= combo_counter_spear_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				quen_counter_index_1 = RandDifferent(this.previous_quen_counter_index_1 , 2);

				switch (quen_counter_index_1) 
				{	
					case 1:	
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');	
					break;
				}
					
				this.previous_quen_counter_index_1 = quen_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_counter == 0)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_counter += 1;
				}

				else if (combo_counter_spear_counter == 1)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_counter -= combo_counter_spear_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				quen_counter_index_2 = RandDifferent(this.previous_quen_counter_index_2 , 2);

				switch (quen_counter_index_2) 
				{	
					case 1:	
					PlayerPlayAnimation( 'man_mage_force_blast_01_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'man_mage_force_blast_02_ACS');	
					break;
				}
				
				this.previous_quen_counter_index_2 = quen_counter_index_2;
			}
		}

		AddTimer('ACS_HeadbuttDamage', 0.3, false);	
	}
	
	function geraltRandomGiantCounter() 
	{
		MovementAdjust();

		ACS_EventHackAttack();

		RemoveTimer( 'ACS_alive_check' );
		AddTimer( 'ACS_alive_check', 1, false );
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			Shrink_Geralt(1);
			PlayerPlayAnimation( 'attack_counter_caretaker_ACS');		

			/*
			yrden_counter_index_1 = RandDifferent(this.previous_yrden_counter_index_1 , 2);

			switch (yrden_counter_index_1) 
			{	
				case 1:	
				Shrink_Geralt(1);
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');		
				break;

				default:
				Shrink_Geralt(1);
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');	
				break;
			}
				
			this.previous_yrden_counter_index_1 = yrden_counter_index_1;
			*/
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			Shrink_Geralt(1);
			PlayerPlayAnimation( 'attack_counter_caretaker_ACS');	

			/*
			yrden_counter_index_2 = RandDifferent(this.previous_yrden_counter_index_2 , 2);

			switch (yrden_counter_index_2) 
			{	
				case 1:	
				Shrink_Geralt(1);
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');		
				break;

				default:
				Shrink_Geralt(1);
				PlayerPlayAnimation( 'attack_counter_caretaker_ACS');	
				break;
			}
			
			this.previous_yrden_counter_index_2 = yrden_counter_index_2;
			*/
		}	
	}

	function HeadbuttDamageActual()
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;
		var attAction				: W3Action_Attack;

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(1.65, VecHeading(thePlayer.GetHeadingVector()), 10, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Headbutt_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Headbutt_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Headbutt_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticket, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);
				
				//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.10; 

					damageMin = maxTargetVitality * 0.075; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.125; 
					
					damageMin = maxTargetEssence * 0.075; 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				if (actortarget.IsGuarded()
				|| actortarget.IsCurrentlyDodging())
				{
					dmg.ClearDamage(); 

					dmg.SetHitReactionType( EHRT_Reflect, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield')
					|| ((CNewNPC)actortarget).IsShielded( NULL ) )
					{
						actortarget.SoundEvent("shield_wood_impact");
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						thePlayer.SoundEvent("monster_bruxa_movement_whoosh_mid");
					}
				}
				else
				{
					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

					dmg.SetHitReactionType( EHRT_Heavy, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield')
					|| ((CNewNPC)actortarget).IsShielded( NULL ) )
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						if( RandF() < 0.25 ) 
						{
							movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
							dmg.AddEffectInfo( EET_Stagger, 0.1 );
						}
					}

					thePlayer.SoundEvent("scene_cmb_fist_hit");

					thePlayer.SoundEvent("cmb_fistfight_parry");

					actortarget.PlayEffect('blood');
					actortarget.StopEffect('blood');

					actortarget.PlayEffect('death_blood');
					actortarget.StopEffect('death_blood');

					actortarget.PlayEffect('heavy_hit');
					actortarget.StopEffect('heavy_hit');

					actortarget.PlayEffect('light_hit');
					actortarget.StopEffect('light_hit');

					actortarget.PlayEffect('blood_spill');
					actortarget.StopEffect('blood_spill');

					theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 )
					{
						RemoveAllCoveredBlood();

						if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
						{
							if (actortarget.HasAbility('mon_lessog_base')
							|| actortarget.HasAbility('mon_sprigan_base')
							)
							{						
								thePlayer.PlayEffect('covered_blood_black_ACS');
							} 
							else
							{
								thePlayer.PlayEffect('covered_blood_red_ACS');
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
						{
							if (actortarget.HasAbility('mon_kikimore_base')
							|| actortarget.HasAbility('mon_black_spider_base')
							|| actortarget.HasAbility('mon_black_spider_ep2_base')
							)
							{						
								thePlayer.PlayEffect('covered_blood_black_ACS');
							} 
							else 
							{
								thePlayer.PlayEffect('covered_blood_green_ACS');
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
						{
							if (actortarget.HasAbility('mon_archespor_base'))
							{
								thePlayer.PlayEffect('covered_blood_yellow_ACS');
							} 
							else 
							{
								thePlayer.PlayEffect('covered_blood_red_ACS');
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
						{
							if ( mc == MC_Vampire ) 
							{
								thePlayer.PlayEffect('covered_blood_red_ACS');
							}
							else if ( mc == MC_Magicals ) 
							{
								if (actortarget.HasAbility('mon_golem_base')
								|| actortarget.HasAbility('mon_djinn')
								|| actortarget.HasAbility('mon_gargoyle')
								)
								{

									thePlayer.PlayEffect('covered_blood_black_ACS');
								}
								else
								{
									thePlayer.PlayEffect('covered_blood_red_ACS');
								}
							}
							else
							{
								thePlayer.PlayEffect('covered_blood_black_ACS');
							}
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');
						}

						RemoveTimer('ACS_RemoveCoveredBlood');
						AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
					}
				}
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;
			}		
		}
	}

	function KickDamageActual()
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(1.75, VecHeading(thePlayer.GetHeadingVector()), 10, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Kick_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Kick_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Kick_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);
				
				//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.025; 

					damageMin = maxTargetVitality * 0.0125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.0125; 
					
					damageMin = maxTargetEssence * 0.00625; 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(1 + damageMax,1 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(1 + damageMax,1 + damageMin) );

				if (actortarget.IsGuarded()
				|| actortarget.IsCurrentlyDodging())
				{
					dmg.ClearDamage(); 

					dmg.SetHitReactionType( EHRT_Reflect, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield')
					|| ((CNewNPC)actortarget).IsShielded( NULL ) )
					{
						actortarget.SoundEvent("shield_wood_impact");
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						thePlayer.SoundEvent("monster_bruxa_movement_whoosh_mid");
					}
				}
				else
				{
					dmg.SetHitReactionType( EHRT_Heavy, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield') 
					|| ((CNewNPC)actortarget).IsShielded( NULL ) 
					)
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						if( RandF() < 0.25 ) 
						{
							movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
							dmg.AddEffectInfo( EET_Stagger, 0.1 );
						}
					}

					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

					thePlayer.SoundEvent("scene_cmb_fist_hit");

					thePlayer.SoundEvent("cmb_fistfight_parry");

					actortarget.PlayEffect('blood');
					actortarget.StopEffect('blood');

					actortarget.PlayEffect('death_blood');
					actortarget.StopEffect('death_blood');

					actortarget.PlayEffect('heavy_hit');
					actortarget.StopEffect('heavy_hit');

					actortarget.PlayEffect('light_hit');
					actortarget.StopEffect('light_hit');

					actortarget.PlayEffect('blood_spill');
					actortarget.StopEffect('blood_spill');

					theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 )
					{
						RemoveAllCoveredBlood();

						if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
						{
							if (actortarget.HasAbility('mon_lessog_base')
							|| actortarget.HasAbility('mon_sprigan_base')
							)
							{						
								thePlayer.PlayEffect('covered_blood_black_ACS');
							} 
							else
							{
								thePlayer.PlayEffect('covered_blood_red_ACS');
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
						{
							if (actortarget.HasAbility('mon_kikimore_base')
							|| actortarget.HasAbility('mon_black_spider_base')
							|| actortarget.HasAbility('mon_black_spider_ep2_base')
							)
							{						
								thePlayer.PlayEffect('covered_blood_black_ACS');
							} 
							else 
							{
								thePlayer.PlayEffect('covered_blood_green_ACS');
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
						{
							if (actortarget.HasAbility('mon_archespor_base'))
							{
								thePlayer.PlayEffect('covered_blood_yellow_ACS');
							} 
							else 
							{
								thePlayer.PlayEffect('covered_blood_red_ACS');
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
						{
							if ( mc == MC_Vampire ) 
							{
								thePlayer.PlayEffect('covered_blood_red_ACS');
							}
							else if ( mc == MC_Magicals ) 
							{
								if (actortarget.HasAbility('mon_golem_base')
								|| actortarget.HasAbility('mon_djinn')
								|| actortarget.HasAbility('mon_gargoyle')
								)
								{

									thePlayer.PlayEffect('covered_blood_black_ACS');
								}
								else
								{
									thePlayer.PlayEffect('covered_blood_red_ACS');
								}
							}
							else
							{
								thePlayer.PlayEffect('covered_blood_black_ACS');
							}
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');
						}

						RemoveTimer('ACS_RemoveCoveredBlood');
						AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
					}
				}
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	function PushDamageActual()
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(1.5, VecHeading(thePlayer.GetHeadingVector()), 10, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Push_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Push_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Push_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);
				
				//dmg.AddDamage( theGame.params.DAMAGE_NAME_DIRECT, RandRangeF(damageMax,damageMin) );

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality ) - actortarget.GetStat( BCS_Vitality );

					damageMax = maxTargetVitality * 0.025; 

					damageMin = maxTargetVitality * 0.0125; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence ) - actortarget.GetStat( BCS_Essence );
					
					damageMax = maxTargetEssence * 0.0125; 
					
					damageMin = maxTargetEssence * 0.00625; 
				}

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(1 + damageMax,1 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(1 + damageMax,1 + damageMin) );

				if (actortarget.IsGuarded()
				|| actortarget.IsCurrentlyDodging())
				{
					dmg.ClearDamage(); 

					dmg.SetHitReactionType( EHRT_Reflect, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield')
					|| ((CNewNPC)actortarget).IsShielded( NULL ) )
					{
						actortarget.SoundEvent("shield_wood_impact");
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						thePlayer.SoundEvent("monster_bruxa_movement_whoosh_mid");
					}
				}
				else
				{
					dmg.SetHitReactionType( EHRT_Heavy, true);

					if (actortarget.HasTag('ACS_Swapped_To_Shield')
					|| ((CNewNPC)actortarget).IsShielded( NULL ) )
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
					else
					{
						if( RandF() < 0.25 ) 
						{
							movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
							dmg.AddEffectInfo( EET_Stagger, 0.1 );
						}
					}	

					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

					thePlayer.SoundEvent("scene_cmb_fist_hit");

					thePlayer.SoundEvent("cmb_fistfight_parry");

					actortarget.PlayEffect('blood');
					actortarget.StopEffect('blood');

					actortarget.PlayEffect('death_blood');
					actortarget.StopEffect('death_blood');

					actortarget.PlayEffect('heavy_hit');
					actortarget.StopEffect('heavy_hit');

					actortarget.PlayEffect('light_hit');
					actortarget.StopEffect('light_hit');

					actortarget.PlayEffect('blood_spill');
					actortarget.StopEffect('blood_spill');

					theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

					if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 )
					{
						RemoveAllCoveredBlood();

						if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
						{
							if (actortarget.HasAbility('mon_lessog_base')
							|| actortarget.HasAbility('mon_sprigan_base')
							)
							{						
								thePlayer.PlayEffect('covered_blood_black_ACS');
							} 
							else
							{
								thePlayer.PlayEffect('covered_blood_red_ACS');
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
						{
							if (actortarget.HasAbility('mon_kikimore_base')
							|| actortarget.HasAbility('mon_black_spider_base')
							|| actortarget.HasAbility('mon_black_spider_ep2_base')
							)
							{						
								thePlayer.PlayEffect('covered_blood_black_ACS');
							} 
							else 
							{
								thePlayer.PlayEffect('covered_blood_green_ACS');
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
						{
							if (actortarget.HasAbility('mon_archespor_base'))
							{
								thePlayer.PlayEffect('covered_blood_yellow_ACS');
							} 
							else 
							{
								thePlayer.PlayEffect('covered_blood_red_ACS');
							}
						}
						else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
						{
							if ( mc == MC_Vampire ) 
							{
								thePlayer.PlayEffect('covered_blood_red_ACS');
							}
							else if ( mc == MC_Magicals ) 
							{
								if (actortarget.HasAbility('mon_golem_base')
								|| actortarget.HasAbility('mon_djinn')
								|| actortarget.HasAbility('mon_gargoyle')
								)
								{

									thePlayer.PlayEffect('covered_blood_black_ACS');
								}
								else
								{
									thePlayer.PlayEffect('covered_blood_red_ACS');
								}
							}
							else
							{
								thePlayer.PlayEffect('covered_blood_black_ACS');
							}
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');
						}

						RemoveTimer('ACS_RemoveCoveredBlood');
						AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
					}
				}
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}
	
	function geraltRandomGregCounter() 
	{
		MovementAdjust();

		ACS_EventHackAttack();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
				
			//PlayerPlayAnimation( 'gregoire_attack_punch_ACS');

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_counter == 0)
				{
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_counter += 1;
				}
				else if (combo_counter_greg_counter == 1)
				{
					PlayerPlayAnimation( 'man_finisher_hilt_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_counter -= combo_counter_greg_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				punch_index_1 = RandDifferent(this.previous_punch_index_1 , 2);

				switch (punch_index_1) 
				{														
					case 1:
					PlayerPlayAnimation( 'man_finisher_hilt_01_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');
					break;
				}
					
				this.previous_punch_index_1 = punch_index_1;
			}

			AddTimer('ACS_HeadbuttDamage', 0.3, false);
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			//PlayerPlayAnimation( 'gregoire_attack_punch_ACS');

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_counter == 0)
				{
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_counter += 1;
				}
				else if (combo_counter_greg_counter == 1)
				{
					PlayerPlayAnimation( 'man_finisher_hilt_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_counter -= combo_counter_greg_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				punch_index_1 = RandDifferent(this.previous_punch_index_1 , 2);

				switch (punch_index_1) 
				{														
					case 1:
					PlayerPlayAnimation( 'man_finisher_hilt_01_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_finisher_hilt_01_rp_ACS');
					break;
				}
					
				this.previous_punch_index_1 = punch_index_1;
			}

			AddTimer('ACS_HeadbuttDamage', 0.3, false);
		}	
	}
	
	function geraltRandomAxeCounter() 
	{
		MovementAdjust();

		ACS_EventHackAttack();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_counter == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_counter += 1;
				}
				else if (combo_counter_axe_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_counter -= combo_counter_axe_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_1 = RandDifferent(this.previous_aard_counter_index_1 , 2);

				switch (aard_counter_index_1) 
				{	
					case 1:	
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');	
					break;
				}
					
				this.previous_aard_counter_index_1 = aard_counter_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_counter == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_counter += 1;
				}
				else if (combo_counter_axe_counter == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_counter -= combo_counter_axe_counter;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				aard_counter_index_2 = RandDifferent(this.previous_aard_counter_index_2 , 2);

				switch (aard_counter_index_2) 
				{	
					case 1:	
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');		
					break;

					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');	
					break;
				}
				
				this.previous_aard_counter_index_2 = aard_counter_index_2;
			}
		}	
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Claw Weapon Stuff
	
	function geraltRandomClawAttack() 
	{		
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_attack == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 1)
				{

					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 3)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_turn_left_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 4)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_turn_right_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 5)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 6)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 7)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 8)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 9)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 10)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 11)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 12)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 13)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack -= combo_counter_claw_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{	
					claw_attack_index_1 = RandDifferent(this.previous_claw_attack_index_1 , 7);

					switch (claw_attack_index_1) 
					{	
						case 6:
						PlayerPlayAnimation( 'bruxa_attack_special_turn_right_ACS');	
						break;
							
						case 5:
						PlayerPlayAnimation( 'bruxa_attack_special_turn_left_ACS');	
						break;
					
						case 4:
						PlayerPlayAnimation( 'attack_counter_medium_ACS');	
						break;

						case 3:
						PlayerPlayAnimation( 'attack_counter_close_ACS');	
						break;	
						
						case 2:
						PlayerPlayAnimation( 'bruxa_attack_03_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'bruxa_attack_02_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'bruxa_attack_01_ACS');
						break;
					}
			
					this.previous_claw_attack_index_1 = claw_attack_index_1;
				}
				else
				{
					claw_attack_index_2 = RandDifferent(this.previous_claw_attack_index_2 , 7);

					switch (claw_attack_index_2) 
					{								
						case 6:
						PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
						break;
						
						case 5:	
						PlayerPlayAnimation( 'attack_heavy_single_02_ACS');	
						break;

						case 4:
						PlayerPlayAnimation( 'attack_heavy_single_01_ACS');	
						break;

						case 3:
						PlayerPlayAnimation( 'attack_heavy_02_ACS');	
						break;
						
						case 2:
						PlayerPlayAnimation( 'attack_heavy_01_ACS');	
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_light_02_ACS');	
						break;

						default:
						PlayerPlayAnimation( 'attack_light_01_ACS');	
						break;
					}
					
					this.previous_claw_attack_index_2 = claw_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_attack == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 1)
				{

					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 3)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_turn_left_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 4)
				{
					PlayerPlayAnimation( 'bruxa_attack_special_turn_right_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 5)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 6)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 7)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 8)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 9)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 10)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 11)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 12)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack += 1;
				}

				else if (combo_counter_claw_attack == 13)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack -= combo_counter_claw_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_attack_index_3 = RandDifferent(this.previous_claw_attack_index_3 , 14);

				switch (claw_attack_index_3) 
				{	
					case 13:
					PlayerPlayAnimation( 'bruxa_attack_special_turn_right_ACS');	
					break;
							
					case 12:
					PlayerPlayAnimation( 'bruxa_attack_special_turn_left_ACS');	
					break;
						
					case 11:	
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
					break;
					
					case 10:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');	
					break;

					case 9:	
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');	
					break;

					case 8:
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	
					break;
					
					case 7:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	
					break;
					
					case 6:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	
					break;
					
					case 5:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	
					break;
					
					case 4:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');	
					break;

					case 2:
					PlayerPlayAnimation( 'attack_counter_close_ACS');	
					break;	
					
					case 1:
					PlayerPlayAnimation( 'attack_light_02_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_light_01_ACS');	
					break;
				}
				
				this.previous_claw_attack_index_3 = claw_attack_index_3;
			}
		}	
	}
	
	function geraltRandomClawComboAttack() 
	{		
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack_alt += 1;
				}

				else if (combo_counter_claw_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt += 1;
				}

				else if (combo_counter_claw_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt -= combo_counter_claw_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_attack_alt_index_1 = RandDifferent(this.previous_claw_attack_alt_index_1 , 3);

				switch (claw_attack_alt_index_1) 
				{												
					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');	
					break;
						
					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');	
					break;
						
					default:	
					PlayerPlayAnimation( 'attack_combo_01_ACS');	
					break;
				}
					
				this.previous_claw_attack_alt_index_1 = claw_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_attack_alt += 1;
				}

				else if (combo_counter_claw_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt += 1;
				}

				else if (combo_counter_claw_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_attack_alt -= combo_counter_claw_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_attack_alt_index_3 = RandDifferent(this.previous_claw_attack_alt_index_3 , 3);

				switch (claw_attack_alt_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');	
					break;
						
					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');	
					break;
						
					default:	
					PlayerPlayAnimation( 'attack_combo_01_ACS');	
					break;
				}
				
				this.previous_claw_attack_alt_index_3 = claw_attack_alt_index_3;
			}
		}	
	}
	
	function jump_attack()
	{
		MovementAdjust();
		
		thePlayer.BreakAttachment();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if( targetDistance <= 3*3 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}

				if (thePlayer.IsAnyWeaponHeld())
				{
					if (thePlayer.IsWeaponHeld('fist')
					|| thePlayer.HasTag('vampire_claws_equipped')
					|| thePlayer.HasTag('aard_sword_equipped'))
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
						
						thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

						PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
					}
					else
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

						jump_attack_index_1 = RandDifferent(this.previous_jump_attack_index_1 , 2);

						switch (jump_attack_index_1) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
							break;
							
							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
							break;
						}
						
						this.previous_jump_attack_index_1 = jump_attack_index_1;
					}
				}
			}
			if( targetDistance > 3*3 && targetDistance <= 5*5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
						movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
						movementAdjustor.SlideTo( ticket, TraceFloor( ( thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 2.5 ) + theCamera.GetCameraDirection() + theCamera.GetCameraForward() * 2.5) );
					}
				}

				if (thePlayer.IsAnyWeaponHeld())
				{
					if (thePlayer.IsWeaponHeld('fist')
					|| thePlayer.HasTag('vampire_claws_equipped')
					|| thePlayer.HasTag('aard_sword_equipped'))
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
						
						thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

						PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
					}
					else
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

						jump_attack_index_1 = RandDifferent(this.previous_jump_attack_index_1 , 2);

						switch (jump_attack_index_1) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
							break;
							
							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
							break;
						}
						
						this.previous_jump_attack_index_1 = jump_attack_index_1;	
					}
				}
			}
			else if( targetDistance > 5*5 && targetDistance <= 15*15 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
						movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
						movementAdjustor.SlideTo( ticket, TraceFloor( ( thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 3.25 ) + theCamera.GetCameraDirection() + theCamera.GetCameraForward() * 3.25) );
					}
				}

				if (thePlayer.IsAnyWeaponHeld())
				{
					if (thePlayer.IsWeaponHeld('fist')
					|| thePlayer.HasTag('aard_sword_equipped')
					|| thePlayer.HasTag('vampire_claws_equipped')
					)
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
						
						thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

						PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
					}
					else
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

						jump_attack_index_1 = RandDifferent(this.previous_jump_attack_index_1 , 2);

						switch (jump_attack_index_1) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
							break;
							
							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
							break;
						}
						
						this.previous_jump_attack_index_1 = jump_attack_index_1;	
					}
				}
			}
			else if( targetDistance > 15*15 ) 
			{
				if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				movementAdjustor.SlideTo( ticket, TraceFloor( ( thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 3.25 ) + theCamera.GetCameraDirection() + theCamera.GetCameraForward() * 3.25) );

				if (thePlayer.IsAnyWeaponHeld())
				{
					if (thePlayer.IsWeaponHeld('fist')
					|| thePlayer.HasTag('aard_sword_equipped')
					|| thePlayer.HasTag('vampire_claws_equipped')
					)
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
						
						thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

						PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
					}
					else
					{
						thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

						jump_attack_index_1 = RandDifferent(this.previous_jump_attack_index_1 , 2);

						switch (jump_attack_index_1) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
							break;
							
							default:
							PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
							break;
						}
						
						this.previous_jump_attack_index_1 = jump_attack_index_1;	
					}
				}
			}
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); 
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			movementAdjustor.SlideTo( ticket, TraceFloor( ( thePlayer.GetWorldPosition() + thePlayer.GetWorldForward() * 3.25 ) + theCamera.GetCameraDirection() + theCamera.GetCameraForward() * 3.25) );
			
			if (thePlayer.IsAnyWeaponHeld())
			{
				if (thePlayer.IsWeaponHeld('fist')
				|| thePlayer.HasTag('aard_sword_equipped')
				|| thePlayer.HasTag('vampire_claws_equipped')
				)
				{
					thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");
					
					thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

					PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
				}
				else
				{
					thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

					if( RandF() < 0.5 ) 
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					}
					else
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					}	
				}
			}
		}
	}
	
	function air_jump_attack()
	{
		MovementAdjust();
		
		thePlayer.BreakAttachment();
		
		if 
		(
		GetWeatherConditionName() == 'WT_Wild_Hunt' 
		|| GetWeatherConditionName() == 'WT_q501_Storm' 
		|| GetWeatherConditionName() == 'WT_Rain_Storm' 
		|| GetWeatherConditionName() == 'WT_Rain_Heavy' 
		|| GetWeatherConditionName() == 'WT_Heavy_Clouds_Dark' 
		|| GetWeatherConditionName() == 'WT_Battle' 
		|| GetWeatherConditionName() == 'WT_Battle_Forest' 
		)
		{
			ACS_Lightning_Area();
		
			ACS_Giant_Lightning_Strike_Mult();
		}
		
		ACS_Rock_Pillar();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

			movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );
			
			if (thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

				PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
			}
			else
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				PlayerPlayAnimation( 'bruxa_jump_up_stop_ACS');
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			movementAdjustor.SlideTo( ticket, TraceFloor(theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 7.5) );
			
			if (thePlayer.HasTag('vampire_claws_equipped'))
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				thePlayer.SoundEvent("monster_dettlaff_monster_construct_whoosh_claws_large");

				PlayerPlayAnimation( 'bruxa_jump_up_attack_ACS');
			}
			else
			{
				thePlayer.SoundEvent("monster_dettlaff_monster_combat_construct_dash_vfx");

				PlayerPlayAnimation( 'bruxa_jump_up_stop_ACS');
			}
		}
	}
	
	function geraltRandomAttackSpecialDash() 
	{
		var actorPos, newActorPos			: Vector;

		//theGame.SetTimeScale( 0.75, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

		//AddTimer( 'RemoveInstantKillSloMo', 0.3 );

		Bruxa_Camo_Decoy_Deactivate();

		MovementAdjust();

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{		
			if( targetDistance <= 3.5 * 3.5 ) 
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				RemoveTimer('SpecialDashCloseSlideDelay');

				if (actor.IsOnGround() && !((CNewNPC)actor).IsFlying())
				{
					AddTimer('SpecialDashCloseSlideDelay', 0.375, false);
				}

				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffect('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				PlayerPlayAnimation( 'attack_special_dash_close_ACS');

				if (!thePlayer.HasTag('ACS_Vampire_Dash_Attack'))
				{
					thePlayer.AddTag('ACS_Vampire_Dash_Attack');
				}
			}
			else if( targetDistance > 3.5 * 3.5 && targetDistance <= 10 * 10 ) 
			{
				RemoveTimer('ACS_dodge_timer_end');

				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffect('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');

				attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 3);

				switch (attack_special_dash_index_1) 
				{	
					case 2:

					PlayerPlayAnimation( 'attack_special_dash_close_ACS');

					thePlayer.AddTag('ACS_Vampire_Dash_Close');

					AddTimer('ACS_bruxa_tackle', 0.375  , false);
					break;

					case 1:

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');

					AddTimer('ACS_bruxa_tackle', 0.5  , false);
					break;
					
					default:

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	

					AddTimer('ACS_bruxa_tackle', 0.75  , false);
					break;
				}
				
				this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;

				if (!thePlayer.HasTag('ACS_Vampire_Dash_Attack'))
				{
					thePlayer.AddTag('ACS_Vampire_Dash_Attack');
				}
			}
			else
			{
				RemoveTimer('ACS_dodge_timer_end');

				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffect('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
		}
		else
		{
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 3);

			switch (attack_special_dash_index_1) 
			{	
				case 2:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				PlayerPlayAnimation( 'attack_special_dash_close_ACS');
				break;

				case 1:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');
				break;
				
				default:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	
				break;
			}
			
			this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;
		}			
	}

	function SpecialDashCloseSlideDelayActual()
	{
		var actorPos, newActorPos			: Vector;

		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			actorPos = TraceFloor(actor.PredictWorldPosition(0.25)) + VecFromHeading( AngleNormalize180( thePlayer.GetHeading() - dist ) ) * 4;

			if( !theGame.GetWorld().NavigationFindSafeSpot( actorPos, 0.3, 0.3 , newActorPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( actorPos, 0.3, 4 , newActorPos );
				actorPos = newActorPos;
			}

			SpecialDashCloseDamage();

			special_dash_close_dodge_timer_actual();

			movementAdjustor.AdjustmentDuration( ticket, 0.125 );

			movementAdjustor.SlideTo( ticket, TraceFloor(actorPos) );

			thePlayer.StopEffect('shadowdash_shockwave');

			thePlayer.PlayEffect('shadowdash_shockwave');

			thePlayer.StopEffect('shadowdash_shockwave');

			if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
			{
				thePlayer.StopEffect( 'magic_step_l_new' );	
				thePlayer.PlayEffectSingle( 'magic_step_l_new' );

				thePlayer.StopEffect( 'magic_step_r_new' );	
				thePlayer.PlayEffectSingle( 'magic_step_r_new' );

				//thePlayer.PlayEffect('dash_close_fx');
				thePlayer.StopEffect('dash_close_fx');
			}
		}
	}

	function SpecialDashCloseDamage()
	{
		var tmpBool 				: bool;
		var mc 						: EMonsterCategory;
		var tmpName 				: name;
		var actors	    			: array<CActor>;
		var i 						: int;
		var dmg						: W3DamageAction;
		var actortarget	    		: CActor;
		var curTargetVitality, maxTargetVitality, curTargetEssence, maxTargetEssence, finisherDist, vampireDmgValSteel, vampireDmgValSilver										: float;
		var item_steel, item_silver																																				: SItemUniqueId;
	
		thePlayer.GetInventory().GetItemEquippedOnSlot(EES_SteelSword, item_steel);

		thePlayer.GetInventory().GetItemEquippedOnSlot(EES_SilverSword, item_silver);

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInCone(5, 

		AngleNormalize180( VecHeading(thePlayer.GetHeadingVector()) )
		
		, 45, 20, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Special_Dash_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Special_Dash_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Special_Dash_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);
	
				if (actortarget.UsesVitality()) 
				{
					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

					vampireDmgValSteel = thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_SLASHING, GetInvalidUniqueId()) 
					+ thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_PIERCING, GetInvalidUniqueId())
					+ thePlayer.GetTotalWeaponDamage(item_steel, theGame.params.DAMAGE_NAME_BLUDGEONING, GetInvalidUniqueId());

					dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, vampireDmgValSteel );

					dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * 0.15 );
				} 
				else if (actortarget.UsesEssence()) 
				{
					thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.1 ); 

					vampireDmgValSilver = thePlayer.GetTotalWeaponDamage(item_silver, theGame.params.DAMAGE_NAME_SILVER, GetInvalidUniqueId()); 

					dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, vampireDmgValSilver );

					dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, (actortarget.GetMaxHealth() - actortarget.GetCurrentHealth()) * 0.15 );
				}

				if( ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					((CNewNPC)actortarget).ProcessShieldDestruction();
				}

				dmg.SetHitReactionType( EHRT_Heavy );

				dmg.SetForceExplosionDismemberment();

				dmg.AddEffectInfo( EET_Stagger, 0.5 );

				thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax(BCS_Vitality) * 0.025 ); 

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffect('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffect('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffect('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffect('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffect('blood_spill');
				actortarget.StopEffect('blood_spill');

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				if (VecDistanceSquared2D( thePlayer.GetWorldPosition(), actortarget.GetWorldPosition() ) <= 5 * 5 )
				{
					RemoveAllCoveredBlood();

					if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
					{
						if (actortarget.HasAbility('mon_lessog_base')
						|| actortarget.HasAbility('mon_sprigan_base')
						)
						{						
							thePlayer.PlayEffect('covered_blood_black_ACS');
						} 
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
					{
						if (actortarget.HasAbility('mon_kikimore_base')
						|| actortarget.HasAbility('mon_black_spider_base')
						|| actortarget.HasAbility('mon_black_spider_ep2_base')
						)
						{						
							thePlayer.PlayEffect('covered_blood_black_ACS');
						} 
						else 
						{
							thePlayer.PlayEffect('covered_blood_green_ACS');
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
					{
						if (actortarget.HasAbility('mon_archespor_base'))
						{
							thePlayer.PlayEffect('covered_blood_yellow_ACS');
						} 
						else 
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');
						}
					}
					else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
					{
						if ( mc == MC_Vampire ) 
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');
						}
						else if ( mc == MC_Magicals ) 
						{
							if (actortarget.HasAbility('mon_golem_base')
							|| actortarget.HasAbility('mon_djinn')
							|| actortarget.HasAbility('mon_gargoyle')
							)
							{

								thePlayer.PlayEffect('covered_blood_black_ACS');
							}
							else
							{
								thePlayer.PlayEffect('covered_blood_red_ACS');
							}
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_black_ACS');
						}
					}
					else
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');
					}

					RemoveTimer('ACS_RemoveCoveredBlood');
					AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
				}
	
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	public timer function SpecialDashCloseSlideDelay(deltaTime : float , id : int)
	{
		SpecialDashCloseSlideDelayActual();
	}

	function geraltRandomClawAttackSpecialDash() 
	{
		var actorPos, newActorPos			: Vector;

		Bruxa_Camo_Decoy_Deactivate();

		MovementAdjust();

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{		
			if( targetDistance <= 3.5 * 3.5 ) 
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				RemoveTimer('SpecialDashCloseSlideDelay');

				if (actor.IsOnGround() && !((CNewNPC)actor).IsFlying())
				{
					AddTimer('SpecialDashCloseSlideDelay', 0.375, false);
				}

				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffect('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				PlayerPlayAnimation( 'attack_special_dash_close_ACS');

				if (!thePlayer.HasTag('ACS_Vampire_Dash_Attack'))
				{
					thePlayer.AddTag('ACS_Vampire_Dash_Attack');
				}
			}
			else if( targetDistance > 3.5 * 3.5 && targetDistance <= 10 * 10 ) 
			{
				RemoveTimer('ACS_dodge_timer_end');

				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffect('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');

				attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 3);

				switch (attack_special_dash_index_1) 
				{	
					case 2:

					PlayerPlayAnimation( 'attack_special_dash_close_ACS');

					thePlayer.AddTag('ACS_Vampire_Dash_Close');

					AddTimer('ACS_bruxa_tackle', 0.375 , false);
					break;

					case 1:

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
					AddTimer('ACS_ResetAnimation', 1 , false);

					PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');

					AddTimer('ACS_bruxa_tackle', 0.5 , false);
					break;
					
					default:

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
					AddTimer('ACS_ResetAnimation', 1 , false);

					PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	

					AddTimer('ACS_bruxa_tackle', 0.75 , false);
					break;
				}
				
				this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;

				if (!thePlayer.HasTag('ACS_Vampire_Dash_Attack'))
				{
					thePlayer.AddTag('ACS_Vampire_Dash_Attack');
				}
			}
			else
			{
				RemoveTimer('ACS_dodge_timer_end');

				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 1 , false);

				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

				if (!thePlayer.HasTag('ACS_Camo_Active') && ACS_DodgeEffects_Enabled() )
				{
					thePlayer.StopEffect( 'magic_step_l_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_l_new' );

					thePlayer.StopEffect( 'magic_step_r_new' );	
					thePlayer.PlayEffectSingle( 'magic_step_r_new' );
				}

				thePlayer.StopEffect('shadowdash_shockwave');

				thePlayer.PlayEffect('shadowdash_shockwave');

				thePlayer.StopEffect('shadowdash_shockwave');

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
		}
		else
		{
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 3);

			switch (attack_special_dash_index_1) 
			{	
				case 2:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				PlayerPlayAnimation( 'attack_special_dash_close_ACS');
				break;

				case 1:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');
				break;
				
				default:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	
				break;
			}
			
			this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;
		}			
	}
	
	function geraltClawWhirlAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{			
			if( targetDistance <= 3.5 * 3.5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				PlayerPlayAnimation( 'attack_light_03_ACS');
			}
			else if( targetDistance > 3.5 * 3.5  && targetDistance <= 5*5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

						//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

						//movementAdjustor.SlideTo( ticket, thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5 );
					}
				}

				//PlayerPlayAnimation( 'attack_light_03_ACS');

				PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');

				thePlayer.AddTag('ACS_Whirl_Attack');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
			else
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

						//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
						
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

						//movementAdjustor.SlideTo( ticket, theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 7.5 );
					}
				}

				//PlayerPlayAnimation( 'attack_light_03_ACS');

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');

				thePlayer.AddTag('ACS_Whirl_Attack');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'attack_light_03_ACS');
		}
	}

	function geraltClawWhirlReactionAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{			
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			PlayerPlayAnimation( 'attack_light_03_ACS');
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'attack_light_03_ACS');
		}
	}
	
	function geraltRandomClawHeavyAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 4)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt -= combo_counter_claw_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 5);

				switch (heavy_claw_attack_index) 
				{		
					case 4:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
					break;
						
					case 3:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');
					break;	
						
					case 1:	
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	
					break;
				}
						
				this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_heavy_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_heavy_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt += 1;
				}

				else if (combo_counter_claw_heavy_attack_alt == 4)
				{
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack_alt -= combo_counter_claw_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 5);

				switch (heavy_claw_attack_index) 
				{									
					case 4:
					PlayerPlayAnimation( 'attack_heavy_single_03_ACS');	
					break;
						
					case 3:
					PlayerPlayAnimation( 'attack_heavy_single_02_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'attack_heavy_single_01_ACS');
					break;	
						
					case 1:	
					PlayerPlayAnimation( 'attack_heavy_02_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_heavy_01_ACS');	
					break;
				}
				
				this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
			}
		}
	}
	
	function geraltRandomClawHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack += 1;
				}

				else if (combo_counter_claw_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack += 1;
				}

				else if (combo_counter_claw_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack -= combo_counter_claw_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{	
				heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 3);

				switch (heavy_claw_attack_index) 
				{		
					case 2:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');
					break;	
						
					case 1:	
					PlayerPlayAnimation( 'attack_counter_close_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	
					break;
				}
						
				this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'attack_counter_medium_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_heavy_attack += 1;
				}

				else if (combo_counter_claw_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'attack_counter_close_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack += 1;
				}

				else if (combo_counter_claw_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_heavy_attack -= combo_counter_claw_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				heavy_claw_attack_index = RandDifferent(this.previous_heavy_claw_attack_index , 3);

				switch (heavy_claw_attack_index) 
				{									
					case 2:
					PlayerPlayAnimation( 'attack_counter_medium_ACS');
					break;	
						
					case 1:	
					PlayerPlayAnimation( 'attack_counter_close_ACS');	
					break;

					default:
					PlayerPlayAnimation( 'attack_special_strong_uppercut_ACS');	
					break;
				}
				
				this.previous_heavy_claw_attack_index = heavy_claw_attack_index;
			}
		}
	}
	
	function geraltRandomClawLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack_alt += 1;
				}

				else if (combo_counter_claw_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt += 1;
				}

				else if (combo_counter_claw_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt -= combo_counter_claw_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_attack_alt_index_1 = RandDifferent(this.previous_claw_attack_alt_index_1 , 3);

				switch (claw_attack_alt_index_1) 
				{												
					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');	
					break;
						
					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');	
					break;
						
					default:	
					PlayerPlayAnimation( 'attack_combo_01_ACS');	
					break;
				}
					
				this.previous_claw_attack_alt_index_1 = claw_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'attack_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack_alt += 1;
				}

				else if (combo_counter_claw_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'attack_combo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt += 1;
				}

				else if (combo_counter_claw_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'attack_combo_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack_alt -= combo_counter_claw_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_attack_alt_index_3 = RandDifferent(this.previous_claw_attack_alt_index_3 , 3);

				switch (claw_attack_alt_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'attack_combo_03_ACS');	
					break;
						
					case 1:
					PlayerPlayAnimation( 'attack_combo_02_ACS');	
					break;
						
					default:	
					PlayerPlayAnimation( 'attack_combo_01_ACS');	
					break;
				}
				
				this.previous_claw_attack_alt_index_3 = claw_attack_alt_index_3;
			}
		}
	}		
	
	function geraltRandomClawLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_light_attack == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 1)
				{
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 3)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 4)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack -= combo_counter_claw_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_fist_attack_index_1 = RandDifferent(this.previous_claw_fist_attack_index_1 , 5);

				switch (claw_fist_attack_index_1) 
				{	
					case 4:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_light_02_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_light_01_ACS');
					break;
				}
			
				this.previous_claw_fist_attack_index_1 = claw_fist_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_claw_light_attack == 0)
				{
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 1)
				{
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 2)
				{
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 3)
				{
					PlayerPlayAnimation( 'attack_light_01_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack += 1;
				}

				else if (combo_counter_claw_light_attack == 4)
				{
					PlayerPlayAnimation( 'attack_light_02_ACS');

					combo_counter_damage += 1;

					combo_counter_claw_light_attack -= combo_counter_claw_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				claw_fist_attack_index_3 = RandDifferent(this.previous_claw_fist_attack_index_3 , 5);

				switch (claw_fist_attack_index_3) 
				{							
					case 4:
					PlayerPlayAnimation( 'bruxa_attack_03_ACS');	
					break;
					
					case 3:
					PlayerPlayAnimation( 'bruxa_attack_02_ACS');	
					break;
					
					case 2:
					PlayerPlayAnimation( 'bruxa_attack_01_ACS');	
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_light_02_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_light_01_ACS');
					break;
				}
				
				this.previous_claw_fist_attack_index_3 = claw_fist_attack_index_3;
			}
		}	
	}
	
	function geraltRandomClawSpecialAttackAlt()
	{
		//theGame.SetTimeScale( 0.75, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

		//AddTimer( 'RemoveInstantKillSloMo', 0.3 );

		Bruxa_Camo_Decoy_Deactivate();

		MovementAdjust();

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if( targetDistance <= 2.5*2.5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					//movementAdjustor.SlideTowards( ticket, actor, dist * 0.25, dist * 0.25 );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

						//movementAdjustor.SlideTowards( ticket, actor, dist * 0.25, dist * 0.25 );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				thePlayer.PlayEffectSingle('shadowdash_short');
				
				PlayerPlayAnimation( 'attack_special_dash_close_ACS');

				thePlayer.StopEffect('shadowdash_short');
			}
			else if( targetDistance > 2.5*2.5 && targetDistance <= 5*5 ) 
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				//dodge_timer_attack_actual();

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}

				attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 2);

				switch (attack_special_dash_index_1) 
				{	
					case 1:
					PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	
					break;
				}
				
				this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;

				//PlayerPlayAnimation( 'attack_special_dash_close_ACS');	

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
			else
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);

				//dodge_timer_attack_actual();
				
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');

				//PlayerPlayAnimation( 'attack_special_dash_close_ACS');	

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
		}
		else
		{
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}

			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			attack_special_dash_index_1 = RandDifferent(this.previous_attack_special_dash_index_1 , 2);

			switch (attack_special_dash_index_1) 
			{	
				case 2:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.25 , false);
				PlayerPlayAnimation( 'attack_special_dash_close_ACS');
				break;

				case 1:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);
				PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');
				break;
				
				default:
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }	
						
				AddTimer('ACS_ResetAnimation', 0.75 , false);
				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');	
				break;
			}
			
			this.previous_attack_special_dash_index_1 = attack_special_dash_index_1;
		}			
	}

	function geraltRandomClawSpecialAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{			
			if( targetDistance <= 3.5 * 3.5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				PlayerPlayAnimation( 'attack_light_03_ACS');
			}
			else if( targetDistance > 3.5 * 3.5  && targetDistance <= 5*5 ) 
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

						//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

						//movementAdjustor.SlideTo( ticket, thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5 );
					}
				}

				//PlayerPlayAnimation( 'attack_light_03_ACS');

				PlayerPlayAnimation( 'attack_special_dash_medium_02_ACS');

				thePlayer.AddTag('ACS_Whirl_Attack');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
			else
			{
				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

					//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  

						//movementAdjustor.SlideTowards( ticket, actor, distClawWhirl, distClawWhirl );
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

						//movementAdjustor.SlideTo( ticket, theCamera.GetCameraPosition() + theCamera.GetCameraDirection() * 7.5 );
					}
				}

				//PlayerPlayAnimation( 'attack_light_03_ACS');

				PlayerPlayAnimation( 'attack_special_dash_medium_01_ACS');

				thePlayer.AddTag('ACS_Whirl_Attack');

				AddTimer('ACS_bruxa_tackle', 0.75 , false);
			}
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'attack_light_03_ACS');
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Geralt attack stuff

	function geraltRandomGeraltLightAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack == 0)
				{
					PlayerPlayAnimation( 'attack_pirouette_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 1)
				{
					PlayerPlayAnimation( 'attack_pirouette_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 2)
				{
					PlayerPlayAnimation( 'attack_pirouette_5_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 9)
				{
					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 10)
				{
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 11)
				{
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 12)
				{
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 13)
				{
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 14)
				{
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 15)
				{
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 9);

					switch (geralt_light_attack_index_1) 
					{
						case 8:
						PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');
						break;	

						case 7:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_single_2_ACS');
						break;	
						
						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_single_1_ACS');
						break;	

						case 5:
						PlayerPlayAnimation( 'attack_strong_up_right_ACS');
						break;			
						
						case 4:
						PlayerPlayAnimation( 'attack_strong_down_left_ACS');
						break;	
						
						case 3:
						PlayerPlayAnimation( 'attack_strong_single_1_ACS');
						break;	
						
						case 2:
						PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
						break;	
					
						case 1:
						PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
						break;	
						
						default:
						PlayerPlayAnimation( 'attack_strong_single_2_ACS');
						break;	
					}

					this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
				}
				else
				{
					geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 7);

					switch (geralt_light_attack_index_1) 
					{	
						case 6:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'attack_pirouette_5_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_pirouette_2_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_pirouette_1_ACS');
						break;
					}

					this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack == 0)
				{
					PlayerPlayAnimation( 'attack_pirouette_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 1)
				{
					PlayerPlayAnimation( 'attack_pirouette_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 2)
				{
					PlayerPlayAnimation( 'attack_pirouette_5_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 7)
				{
					PlayerPlayAnimation( 'attack_fast_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 9)
				{
					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 10)
				{
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 11)
				{
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 12)
				{
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 13)
				{
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 14)
				{
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}

				else if (combo_counter_geralt_light_attack == 15)
				{
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 14);

				switch (geralt_light_attack_index_3) 
				{	
					case 13:
					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');
					break;	

					case 12:
					PlayerPlayAnimation( 'attack_pirouette_5_ACS');
					break;	
						
					case 11:
					PlayerPlayAnimation( 'attack_pirouette_4_ACS');
					break;
							
					case 10:
					PlayerPlayAnimation( 'attack_pirouette_3_ACS');
					break;	

					case 9:
					PlayerPlayAnimation( 'attack_pirouette_2_ACS');
					break;	
					
					case 8:
					
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');
					break;
					
					case 7:
					
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');
					break;
					
					case 6:
					
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
					break;	
					
					case 5:
					
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');
					break;	
					
					case 4:
					
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
					break;	
				
					case 3:
					
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
					break;	

					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');
					break;	

					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'attack_pirouette_1_ACS');
					break;	
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_back_1_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 7)
				{
					PlayerPlayAnimation( 'attack_fast_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 8)
				{
					PlayerPlayAnimation( 'attack_fast_single_2_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 9)
				{
					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 10)
				{
					
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 11)
				{
					
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 12)
				{
					
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 13)
				{
					
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 14)
				{
					
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 15)
				{
					
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 6);

					switch (geralt_light_attack_forward_index_1) 
					{
						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_back_1_rp_40ms');
						break;			
						
						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');
						break;	
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;	
						
						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;	
					
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
				else
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 6);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_back_1_rp_40ms');
						break;			
						
						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');
						break;	
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;	
						
						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;	
					
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_back_1_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 7)
				{
					PlayerPlayAnimation( 'attack_fast_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 8)
				{
					PlayerPlayAnimation( 'attack_fast_single_2_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 9)
				{
					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 10)
				{
					
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 11)
				{
					
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 12)
				{
					
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 13)
				{
					
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 14)
				{
					
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 15)
				{
					
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 6);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_back_1_rp_40ms');
					break;			
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');
					break;	
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;	
					
					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;	
				
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	// Bear School

	function geraltRandomGeraltLightAttack_Bear() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if (combo_counter_geralt_light_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear -= combo_counter_geralt_light_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 9);

				switch (geralt_light_attack_index_1) 
				{
					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;
				}

				this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear += 1;
				}

				else if (combo_counter_geralt_light_attack_bear == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_bear -= combo_counter_geralt_light_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 9);

				switch (geralt_light_attack_index_3) 
				{	
					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;	
					
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;	
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;	
				
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');
					break;	
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Bear() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}
				else if (combo_counter_geralt_heavy_attack_bear == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear -= combo_counter_geralt_heavy_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 11);

				switch (geralt_heavy_attack_index_1) 
				{
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;	

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');
					break;
				}

				this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}
				else if (combo_counter_geralt_heavy_attack_bear == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear += 1;
				}

				else if (combo_counter_geralt_heavy_attack_bear == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_bear -= combo_counter_geralt_heavy_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_3 = RandDifferent(this.previous_geralt_heavy_attack_index_3 , 11);

				switch (geralt_heavy_attack_index_3) 
				{	
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');
					break;
				}

				this.previous_geralt_heavy_attack_index_3 = geralt_heavy_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Bear() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if( targetDistance <= 3 * 3 ) 
				{
					if (combo_counter_geralt_light_attack_bear == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_bear == 8)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_bear -= combo_counter_geralt_light_attack_bear;
					}
				}
				else
				{
					if (combo_counter_geralt_light_attack_forward_bear == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack_forward_bear += 1;
					}
					else if (combo_counter_geralt_light_attack_forward_bear == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_bear -= combo_counter_geralt_light_attack_forward_bear;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 9);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_lp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
				else
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 2);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_bear += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_bear -= combo_counter_geralt_light_attack_forward_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 2);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Bear() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if( targetDistance <= 3 * 3 ) 
				{
					if (combo_counter_geralt_heavy_attack_bear == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}
					else if (combo_counter_geralt_heavy_attack_bear == 1)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 8)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 9)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear += 1;
					}

					else if (combo_counter_geralt_heavy_attack_bear == 10)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_bear -= combo_counter_geralt_heavy_attack_bear;
					}
				}
				else
				{
					if (combo_counter_geralt_heavy_attack_forward_bear == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_heavy_attack_forward_bear += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward_bear == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_bear -= combo_counter_geralt_heavy_attack_forward_bear;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 11);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 10:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;

						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_10_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_9_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_8_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_7_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_6_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 2);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_bear += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_bear -= combo_counter_geralt_heavy_attack_forward_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 2);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	timer function RemoveBearSpecialAttackTag(dt : float, id : int)
	{
		thePlayer.RemoveTag('ACS_Bear_Special_Attack');
	}

	function geraltRandomGeraltSpecialAttack_Bear() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_bear += 1;
				}
				else if (combo_counter_geralt_special_attack_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_lp_end');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_bear -= combo_counter_geralt_special_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{		
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3 , 2);

				switch (geralt_special_attack_index_3) 
				{	
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_lp_end');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
					break;
				}

				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;	
			}

			thePlayer.AddTag('ACS_Bear_Special_Attack');
			RemoveTimer('RemoveBearSpecialAttackTag');	
			AddTimer('RemoveBearSpecialAttackTag', 1, false);
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_bear == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_bear += 1;
				}
				else if (combo_counter_geralt_special_attack_bear == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_lp_end');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_bear -= combo_counter_geralt_special_attack_bear;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3, 2);

				switch (geralt_special_attack_index_3) 
				{	
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_lp_end');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
					break;
				}	
				
				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;
			}

			thePlayer.AddTag('ACS_Bear_Special_Attack');
			RemoveTimer('RemoveBearSpecialAttackTag');	
			AddTimer('RemoveBearSpecialAttackTag', 1, false);	
		}
	}

	// Cat School

	function geraltRandomGeraltLightAttack_Cat() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_cat == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat -= combo_counter_geralt_light_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 4);

				switch (geralt_light_attack_index_1) 
				{		
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_cat == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_cat -= combo_counter_geralt_light_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 4);

				switch (geralt_light_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;	
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Cat() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat -= combo_counter_geralt_heavy_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 4);

				switch (geralt_light_attack_index_1) 
				{		
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_cat == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_cat -= combo_counter_geralt_heavy_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 4);

				switch (geralt_light_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Cat() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_cat == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat -= combo_counter_geralt_light_attack_forward_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 9);

				switch (geralt_light_attack_forward_index_1) 
				{	
					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;

					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
					break;	
					
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
					break;	
					
					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
					break;	
				
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
					break;	
					
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_cat == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_cat == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_cat -= combo_counter_geralt_light_attack_forward_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 9);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);	

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;

					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
					break;	
					
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
					break;	
					
					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
					break;	
				
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
					break;	
					
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1.5  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);	

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Cat() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat -= combo_counter_geralt_heavy_attack_forward_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 4);

				switch (geralt_heavy_attack_forward_index_1) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
					break;	
					
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					break;	
				
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
					break;	
				}

				this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_cat == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_cat -= combo_counter_geralt_heavy_attack_forward_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 4);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
					break;	
					
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					break;	
				
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
					break;		
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltSpecialAttack_Cat() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{		
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3 , 3);

				switch (geralt_special_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;
				}

				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;	
			}	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3, 3);

				switch (geralt_special_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;
				}	
				
				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;
			}
		}
	}

	// Griffin School

	function geraltRandomGeraltLightAttack_Griffin() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_griffin == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_griffin == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_griffin == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_griffin == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin -= combo_counter_geralt_light_attack_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 4);

				switch (geralt_light_attack_index_1) 
				{
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_griffin == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_griffin == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_griffin == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_griffin == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_griffin -= combo_counter_geralt_light_attack_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 4);

				switch (geralt_light_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Griffin() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_griffin == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_griffin == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_griffin == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin -= combo_counter_geralt_heavy_attack_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 8);

				switch (geralt_heavy_attack_index_1) 
				{	
					case 7:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
					break;
				}

				this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_griffin == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_griffin == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_griffin == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_griffin == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_griffin -= combo_counter_geralt_heavy_attack_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_3 = RandDifferent(this.previous_geralt_heavy_attack_index_3 , 8);

				switch (geralt_heavy_attack_index_3) 
				{	
					case 7:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
					break;	
				}

				this.previous_geralt_heavy_attack_index_3 = geralt_heavy_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Griffin() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_griffin == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 4)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 5)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 6)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 7)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 8)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 9)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 10)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin -= combo_counter_geralt_light_attack_forward_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 12);

				switch (geralt_light_attack_forward_index_1) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;
					
					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_griffin == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_griffin == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 4)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 5)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 6)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 7)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 8)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 9)
				{
					
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_griffin == 10)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_griffin -= combo_counter_geralt_light_attack_forward_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 12);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;
					
					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Griffin() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_griffin == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin -= combo_counter_geralt_heavy_attack_forward_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 2);

					switch (geralt_heavy_attack_forward_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 10);

					switch (geralt_heavy_attack_forward_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_griffin == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_griffin == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_griffin == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_griffin -= combo_counter_geralt_heavy_attack_forward_griffin;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 12);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;
							
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	
					
					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;	
					
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;	
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;	
				
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	timer function RemoveGriffinSpecialAttackTag(dt : float, id : int)
	{
		thePlayer.RemoveTag('ACS_Griffin_Special_Attack');
	}

	function geraltRandomGeraltSpecialAttack_Griffin() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

				thePlayer.AddTag('ACS_Griffin_Special_Attack');

				ACS_Griffin_Special_Attack_Effects();
			}
			else if (ACS_ComboMode() == 1)
			{		
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

				thePlayer.AddTag('ACS_Griffin_Special_Attack');

				ACS_Griffin_Special_Attack_Effects();
			}

			RemoveTimer('RemoveGriffinSpecialAttackTag');	
			AddTimer('RemoveGriffinSpecialAttackTag', 1.10625, false);	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

				thePlayer.AddTag('ACS_Griffin_Special_Attack');

				ACS_Griffin_Special_Attack_Effects();
			}
			else if (ACS_ComboMode() == 1)
			{
				PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

				thePlayer.AddTag('ACS_Griffin_Special_Attack');

				ACS_Griffin_Special_Attack_Effects();
			}

			RemoveTimer('RemoveGriffinSpecialAttackTag');	
			AddTimer('RemoveGriffinSpecialAttackTag', 1.10625, false);
		}
	}

	// Manticore School

	function geraltRandomGeraltLightAttack_Manticore() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_manticore == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_manticore == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore -= combo_counter_geralt_light_attack_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 4);

				switch (geralt_light_attack_index_1) 
				{
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_manticore == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_manticore == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_manticore -= combo_counter_geralt_light_attack_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 4);

				switch (geralt_light_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Manticore() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_manticore == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore -= combo_counter_geralt_heavy_attack_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 2);

					switch (geralt_heavy_attack_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
				else
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 10);

					switch (geralt_heavy_attack_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_manticore == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_manticore == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_manticore -= combo_counter_geralt_heavy_attack_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_3 = RandDifferent(this.previous_geralt_heavy_attack_index_3 , 12);

				switch (geralt_heavy_attack_index_3) 
				{
					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
					
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;	

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;
				}

				this.previous_geralt_heavy_attack_index_3 = geralt_heavy_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Manticore() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_manticore == 0)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 2)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_4_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_manticore == 4)
				{	
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore -= combo_counter_geralt_light_attack_forward_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 6);

				switch (geralt_light_attack_forward_index_1) 
				{	
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_4_lp_40ms');
					break;
					
					case 2:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');
					break;

					default:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_manticore == 0)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 2)
				{
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_4_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_manticore == 4)
				{	
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_manticore -= combo_counter_geralt_light_attack_forward_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 6);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_4_lp_40ms');
					break;
					
					case 2:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_3_lp_40ms');
					break;

					default:
					if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Manticore() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_manticore == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore -= combo_counter_geralt_heavy_attack_forward_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 2);

					switch (geralt_heavy_attack_forward_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 10);

					switch (geralt_heavy_attack_forward_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_manticore == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 8)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 9)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 10)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore += 1;
				}

				else if (combo_counter_geralt_heavy_attack_forward_manticore == 11)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_manticore -= combo_counter_geralt_heavy_attack_forward_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 12);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;
							
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	
					
					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;	
					
					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;	
					
					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;	
				
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	timer function RemoveManticoreSpecialAttackTag(dt : float, id : int)
	{
		thePlayer.RemoveTag('ACS_Manticore_Special_Attack');
	}

	function geraltRandomGeraltSpecialAttack_Manticore() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_manticore == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore -= combo_counter_geralt_special_attack_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{		
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3 , 4);

				switch (geralt_special_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
					break;
				}

				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;	
			}

			ACS_Manticore_Special_Attack_Effects();
			thePlayer.AddTag('ACS_Manticore_Special_Attack');
			RemoveTimer('RemoveManticoreSpecialAttackTag');	
			AddTimer('RemoveManticoreSpecialAttackTag', 1.10625, false);	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_manticore == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore += 1;
				}
				else if (combo_counter_geralt_special_attack_manticore == 3)
				{
					
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_manticore -= combo_counter_geralt_special_attack_manticore;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3 , 4);

				switch (geralt_special_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
					break;
				}

				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;	
			}

			ACS_Manticore_Special_Attack_Effects();
			thePlayer.AddTag('ACS_Manticore_Special_Attack');
			RemoveTimer('RemoveManticoreSpecialAttackTag');	
			AddTimer('RemoveManticoreSpecialAttackTag', 1.10625, false);
		}
	}

	// Wolf School

	function geraltRandomGeraltLightAttack_Wolf() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 4);

					switch (geralt_light_attack_index_1) 
					{
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;
					}

					this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
				}
				else
				{
					geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 2);

					switch (geralt_light_attack_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
						break;
					}

					this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack += 1;
				}
				else if (combo_counter_geralt_light_attack == 3)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 4);

				switch (geralt_light_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Wolf() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}
				else if (combo_counter_geralt_heavy_attack == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 )
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 10);

					switch (geralt_heavy_attack_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
				else
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 2);

					switch (geralt_heavy_attack_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}
				else if (combo_counter_geralt_heavy_attack == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack += 1;
				}

				else if (combo_counter_geralt_heavy_attack == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_3 = RandDifferent(this.previous_geralt_heavy_attack_index_3 , 12);

				switch (geralt_heavy_attack_index_3) 
				{
					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
					
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;	

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;
				}

				this.previous_geralt_heavy_attack_index_3 = geralt_heavy_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Wolf() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					ACS_Combo_Mode_Reset();
				
					if (combo_counter_geralt_light_attack == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 3)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
					}
				}
				else
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_geralt_light_attack_forward == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack_forward += 1;
					}
					else if (combo_counter_geralt_light_attack_forward == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 4);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
				else
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 4);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
						break;		
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 4);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Wolf() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					ACS_Combo_Mode_Reset();
				
					if (combo_counter_geralt_heavy_attack == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}
					else if (combo_counter_geralt_heavy_attack == 1)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 8)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 9)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;
					}
				}
				else
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_geralt_heavy_attack_forward == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_heavy_attack_forward += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 10);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 4);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
						break;	
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 4);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
					break;		
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltSpecialAttack_Wolf() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{		
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3 , 3);

				switch (geralt_special_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;
				}

				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;	
			}	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3, 3);

				switch (geralt_special_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;
				}	
				
				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;
			}
		}
	}

	// Viper School
	function geraltRandomGeraltLightAttack_Viper()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_viper == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_viper == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_viper == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper -= combo_counter_geralt_light_attack_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 9);

					switch (geralt_light_attack_index_1) 
					{
						case 8:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
						break;

						case 7:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
						break;

						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
						break;

						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
						break;

						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
						break;

						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;

						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;
					}

					this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
				}
				else
				{
					geralt_light_attack_index_1 = RandDifferent(this.previous_geralt_light_attack_index_1 , 2);

					switch (geralt_light_attack_index_1) 
					{
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
						break;
					}

					this.previous_geralt_light_attack_index_1 = geralt_light_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_viper == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_viper == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_viper == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_viper == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_viper -= combo_counter_geralt_light_attack_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_index_3 = RandDifferent(this.previous_geralt_light_attack_index_3 , 9);

				switch (geralt_light_attack_index_3) 
				{	
					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
					break;

					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;

					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;

					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;

					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;		
					
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
					break;

					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
					break;
					
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
					break;
					
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
					break;
				}

				this.previous_geralt_light_attack_index_3 = geralt_light_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttack_Viper()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_viper == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}
				else if (combo_counter_geralt_heavy_attack_viper == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper -= combo_counter_geralt_heavy_attack_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 )
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 10);

					switch (geralt_heavy_attack_index_1) 
					{
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
				else
				{
					geralt_heavy_attack_index_1 = RandDifferent(this.previous_geralt_heavy_attack_index_1 , 2);

					switch (geralt_heavy_attack_index_1) 
					{
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;
					}

					this.previous_geralt_heavy_attack_index_1 = geralt_heavy_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_viper == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}
				else if (combo_counter_geralt_heavy_attack_viper == 1)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 4)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 5)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 6)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 7)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 8)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper += 1;
				}

				else if (combo_counter_geralt_heavy_attack_viper == 9)
				{
					
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
	
					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_viper -= combo_counter_geralt_heavy_attack_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_index_3 = RandDifferent(this.previous_geralt_heavy_attack_index_3 , 12);

				switch (geralt_heavy_attack_index_3) 
				{
					case 11:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	
					
					case 10:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 9:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
					break;	

					case 8:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
					break;	

					case 7:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
					break;	

					case 6:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
					break;	

					case 5:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
					break;	

					case 4:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
					break;			
					
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
					break;
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
					break;
				}

				this.previous_geralt_heavy_attack_index_3 = geralt_heavy_attack_index_3;
			}
		}
	}

	function geraltRandomGeraltLightAttackForward_Viper()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					ACS_Combo_Mode_Reset();
				
					if (combo_counter_geralt_light_attack_viper == 0)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack_viper += 1;
					}
					else if (combo_counter_geralt_light_attack_viper == 1)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_viper += 1;
					}
					else if (combo_counter_geralt_light_attack_viper == 2)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_viper += 1;
					}
					else if (combo_counter_geralt_light_attack_viper == 3)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_viper == 4)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_viper == 5)
					{
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_viper -= combo_counter_geralt_light_attack_viper;
					}
				}
				else
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_geralt_light_attack_forward_viper == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}
					else if (combo_counter_geralt_light_attack_forward_viper == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_forward_viper == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper += 1;
					}

					else if (combo_counter_geralt_light_attack_forward_viper == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward_viper -= combo_counter_geralt_light_attack_forward_viper;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 9);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 8:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
						break;

						case 7:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
						break;

						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
						break;

						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
						break;

						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
						break;	
						
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;

						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }	
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
				else
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 4);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
						break;		
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward_viper == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}
				else if (combo_counter_geralt_light_attack_forward_viper == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_viper == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper += 1;
				}

				else if (combo_counter_geralt_light_attack_forward_viper == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward_viper -= combo_counter_geralt_light_attack_forward_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 4);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Viper()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					ACS_Combo_Mode_Reset();
				
					if (combo_counter_geralt_heavy_attack_viper == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}
					else if (combo_counter_geralt_heavy_attack_viper == 1)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 8)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper += 1;
					}

					else if (combo_counter_geralt_heavy_attack_viper == 9)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_viper -= combo_counter_geralt_heavy_attack_viper;
					}
				}
				else
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_geralt_heavy_attack_forward_viper == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_heavy_attack_forward_viper += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward_viper == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_viper += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward_viper == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_viper += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward_viper == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward_viper -= combo_counter_geralt_heavy_attack_forward_viper;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 10);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 4);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
						break;	
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward_viper == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward_viper += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_viper == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_viper += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_viper == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_viper += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward_viper == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward_viper -= combo_counter_geralt_heavy_attack_forward_viper;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 4);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
					break;		
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	timer function RemoveViperSpecialAttackTag(dt : float, id : int)
	{
		thePlayer.RemoveTag('ACS_Viper_Special_Attack');
	}

	function geraltRandomGeraltSpecialAttack_Viper()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

			ACS_Manticore_Special_Attack_Effects();
			thePlayer.AddTag('ACS_Viper_Special_Attack');
			RemoveTimer('RemoveViperSpecialAttackTag');	
			AddTimer('RemoveViperSpecialAttackTag', 1.10625, false);	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

			ACS_Manticore_Special_Attack_Effects();
			thePlayer.AddTag('ACS_Viper_Special_Attack');
			RemoveTimer('RemoveViperSpecialAttackTag');	
			AddTimer('RemoveViperSpecialAttackTag', 1.10625, false);	
		}
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomGeraltLightAttackForward_Ciri() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if( targetDistance <= 3 * 3 ) 
				{
					if (combo_counter_geralt_light_attack == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack += 1;
					}
					else if (combo_counter_geralt_light_attack == 3)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack -= combo_counter_geralt_light_attack;
					}
				}
				else
				{
					thePlayer.DestroyEffect('dodge_ciri');
					thePlayer.PlayEffectSingle('dodge_ciri');

					vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
					vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Attack_Engage();

					dodge_timer_attack_ciri_actual();

					movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );

					if (combo_counter_geralt_light_attack_forward == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_light_attack_forward += 1;
					}
					else if (combo_counter_geralt_light_attack_forward == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward += 1;
					}

					else if (combo_counter_geralt_light_attack_forward == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 4);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_lp_40ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_2_rp_40ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_lp_40ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_1_rp_40ms');
						break;	
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
				else
				{
					movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );

					thePlayer.DestroyEffect('dodge_ciri');
					thePlayer.PlayEffectSingle('dodge_ciri');

					vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
					vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Attack_Engage();

					dodge_timer_attack_ciri_actual();

					geralt_light_attack_forward_index_1 = RandDifferent(this.previous_geralt_light_attack_forward_index_1 , 4);

					switch (geralt_light_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
						break;		
					}

					this.previous_geralt_light_attack_forward_index_1 = geralt_light_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_light_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_light_attack_forward += 1;
				}
				else if (combo_counter_geralt_light_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward += 1;
				}

				else if (combo_counter_geralt_light_attack_forward == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_light_attack_forward -= combo_counter_geralt_light_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_light_attack_forward_index_3 = RandDifferent(this.previous_geralt_light_attack_forward_index_3 , 4);

				switch (geralt_light_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
					break;	
				}

				this.previous_geralt_light_attack_forward_index_3 = geralt_light_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltHeavyAttackForward_Ciri() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();

				if( targetDistance <= 3 * 3 ) 
				{
					if (combo_counter_geralt_heavy_attack == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}
					else if (combo_counter_geralt_heavy_attack == 1)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 4)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 5)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 6)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 7)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 8)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack += 1;
					}

					else if (combo_counter_geralt_heavy_attack == 9)
					{
						
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
		
						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack -= combo_counter_geralt_heavy_attack;
					}
				}
				else
				{
					movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );

					thePlayer.DestroyEffect('dodge_ciri');
					thePlayer.PlayEffectSingle('dodge_ciri');

					vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
					vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Attack_Engage();

					dodge_timer_attack_ciri_actual();
					
					if (combo_counter_geralt_heavy_attack_forward == 0)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

						combo_counter_damage -= combo_counter_damage;

						combo_counter_geralt_heavy_attack_forward += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward == 1)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward == 2)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward += 1;
					}
					else if (combo_counter_geralt_heavy_attack_forward == 3)
					{
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

						combo_counter_damage += 1;

						combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;
					}
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{
					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 10);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 9:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_lp_70ms');
						break;	

						case 8:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_5_rp_70ms');
						break;	

						case 7:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_lp_70ms');
						break;	

						case 6:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_4_rp_70ms');
						break;	

						case 5:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_lp_70ms');
						break;	

						case 4:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_3_rp_70ms');
						break;			
						
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_lp_70ms');
						break;

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_2_rp_70ms');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_lp_70ms');
						break;
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_1_rp_70ms');
						break;
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
				else
				{
					movementAdjustor.SlideTowards( ticket, actor, distJump, distJump );

					thePlayer.DestroyEffect('dodge_ciri');
					thePlayer.PlayEffectSingle('dodge_ciri');

					vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
					vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Attack_Engage();

					dodge_timer_attack_ciri_actual();

					geralt_heavy_attack_forward_index_1 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_1 , 4);

					switch (geralt_heavy_attack_forward_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
						break;	

						case 2:
						PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
						break;	
						
						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
						break;	
					}

					this.previous_geralt_heavy_attack_forward_index_1 = geralt_heavy_attack_forward_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_heavy_attack_forward == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 1)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward += 1;
				}
				else if (combo_counter_geralt_heavy_attack_forward == 3)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');	

					combo_counter_damage += 1;

					combo_counter_geralt_heavy_attack_forward -= combo_counter_geralt_heavy_attack_forward;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_heavy_attack_forward_index_3 = RandDifferent(this.previous_geralt_heavy_attack_forward_index_3 , 4);

				switch (geralt_heavy_attack_forward_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_lp_80ms');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_strong_far_forward_1_rp_80ms');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_lp_50ms');
					break;	
					
					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_fast_far_forward_1_rp_50ms');
					break;		
				}

				this.previous_geralt_heavy_attack_forward_index_3 = geralt_heavy_attack_forward_index_3;
			}
		}
	}

	function geraltRandomGeraltSpecialAttack_Ciri() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
			vACS_Ciri_Special_Attack.ACS_Ciri_Special_Attack_Engage();
		}	
		else
		{
			thePlayer.DestroyEffect('dodge_ciri');
			thePlayer.PlayEffectSingle('dodge_ciri');

			if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_geralt_special_attack_cat == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat += 1;
				}
				else if (combo_counter_geralt_special_attack_cat == 2)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage += 1;

					combo_counter_geralt_special_attack_cat -= combo_counter_geralt_special_attack_cat;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				geralt_special_attack_index_3 = RandDifferent(this.previous_geralt_special_attack_index_3, 3);

				switch (geralt_special_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;
				}	
				
				this.previous_geralt_special_attack_index_3 = geralt_special_attack_index_3;
			}
		}
	}

	function CiriSpectreDodgeFront()
	{
		vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
		vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Dodge_Front_Engage();
	}

	function CiriSpectreDodgeBack()
	{
		vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
		vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Dodge_Back_Engage();
	}

	function CiriSpectreDodgeLeft()
	{
		vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
		vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Dodge_Left_Engage();
	}

	function CiriSpectreDodgeRight()
	{
		vACS_Ciri_Special_Attack = new cACS_Ciri_Special_Attack in this;
	
		vACS_Ciri_Special_Attack.ACS_Ciri_Spectre_Dodge_Right_Engage();
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Olgierd attack stuff
	
	function geraltRandomOlgierdAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat() )
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_attack == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 10)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 11)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 12)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_down_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 13)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_up_right_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 14)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 15)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack -= combo_counter_olgierd_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					quen_sword_glow();

					olgierd_attack_index_1 = RandDifferent(this.previous_olgierd_attack_index_1 , 9);

					switch (olgierd_attack_index_1) 
					{
						case 8:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');
						break;	

						case 7:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_single_2_ACS');
						break;	
						
						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_single_1_ACS');
						break;	

						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_up_right_ACS');
						break;			
						
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_down_left_ACS');
						break;	
						
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_single_1_ACS');
						break;	
						
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
						break;	
					
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
						break;	
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_strong_single_2_ACS');
						break;	
					}

					this.previous_olgierd_attack_index_1 = olgierd_attack_index_1;
				}
				else
				{
					olgierd_attack_index_1 = RandDifferent(this.previous_olgierd_attack_index_1 , 7);

					switch (olgierd_attack_index_1) 
					{	
						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;	

						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;	

						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;			
						
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;

						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_5_ACS');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_2_ACS');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_1_ACS');
						break;
					}

					this.previous_olgierd_attack_index_1 = olgierd_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_attack == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}
				else if (combo_counter_olgierd_attack == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 10)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_single_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 11)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 12)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_down_left_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 13)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_up_right_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 14)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack += 1;
				}

				else if (combo_counter_olgierd_attack == 15)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();

					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_attack -= combo_counter_olgierd_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_attack_index_3 = RandDifferent(this.previous_olgierd_attack_index_3 , 14);

				switch (olgierd_attack_index_3) 
				{	
					case 13:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');
					break;	

					case 12:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');
					break;	
						
					case 11:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_4_ACS');
					break;
							
					case 10:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_3_ACS');
					break;	

					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');
					break;	
					
					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');
					break;
					
					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');
					break;
					
					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
					break;	
					
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');
					break;	
					
					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
					break;	
				
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
					break;	

					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');
					break;	

					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');
					break;
					
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');
					break;	
				}

				this.previous_olgierd_attack_index_3 = olgierd_attack_index_3;
			}
		}
	}
	
	function geraltRandomOlgierdPirouette()
	{	
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_pirouette == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 10)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 11)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 12)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 13)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette -= combo_counter_olgierd_pirouette;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					olgierd_pirouette_index_2 = RandDifferent(this.previous_olgierd_pirouette_index_2 , 9);

					switch (olgierd_pirouette_index_2) 
					{	
						/*
						case 1:
						PlayerPlayAnimation( 'attack_pirouette_down_r_001_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_pirouette_down_l_001_ACS');
						break;
						*/

						case 8:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_left_003_ACS');
						break;	

						case 7:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_right_002_ACS');
						break;	
						
						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');
						break;			
						
						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');
						break;
						
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
						break;

						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
						break;	
							
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
						break;
							
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
						break;	
							
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
						break;
					}
					
					this.previous_olgierd_pirouette_index_2 = olgierd_pirouette_index_2;
				}
				else
				{
					olgierd_attack_index_1 = RandDifferent(this.previous_olgierd_attack_index_1 , 5);

					switch (olgierd_attack_index_1) 
					{						
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
						break;
						
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
						break;
						
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
						break;
					}

					this.previous_olgierd_attack_index_1 = olgierd_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_pirouette == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}
				else if (combo_counter_olgierd_pirouette == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 10)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 11)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 12)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette += 1;
				}

				else if (combo_counter_olgierd_pirouette == 13)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);
					
					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_pirouette -= combo_counter_olgierd_pirouette;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_attack_index_3 = RandDifferent(this.previous_olgierd_attack_index_3 , 10);

				switch (olgierd_attack_index_3) 
				{
					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
					break;	

					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					break;	
						
					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');
					break;			
						
					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');
					break;
						
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
					break;

					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
					break;
						
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
					break;
						
					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
					break;
						
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
					break;
						
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
					break;
				}

				this.previous_olgierd_attack_index_3 = olgierd_attack_index_3;
			}
		}
	}	
	
	function geraltRandomShadowAttack() 
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//theGame.SetTimeScale( 0.75, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

		//AddTimer( 'RemoveInstantKillSloMo', 0.3 );

		MovementAdjust();

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);

		quen_sword_glow();	
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{			
			if( targetDistance <= 3.25*3.25 ) 
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				olgierd_shadow_attack_index_1 = RandDifferent(this.previous_olgierd_shadow_attack_index_1 , 3);

				switch (olgierd_shadow_attack_index_1) 
				{	
					case 2:
					PlayerPlayAnimation( 'attack_shadowdash_strong_3_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'shadow_attack_jump_forward_middle_right_ACS');
					break;
				}

				this.previous_olgierd_shadow_attack_index_1 = olgierd_shadow_attack_index_1;
			}
			else if( targetDistance > 3.25*3.25 && targetDistance <= 11*11) 
			{
				RemoveTimer('ACS_dodge_timer_end');

				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
				
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}

				olgierd_shadow_attack_part_2_index_2 = RandDifferent(this.previous_olgierd_shadow_attack_part_2_index_2 , 2);

				switch (olgierd_shadow_attack_part_2_index_2) 
				{	
					case 1:
					thePlayer.PlayEffectSingle('special_attack_fx');
					PlayerPlayAnimation( 'attack_shadowdash_strong_1_ACS');
					thePlayer.StopEffect('special_attack_fx');
					break;
					
					default:
					PlayerPlayAnimation( 'attack_shadowstep_001_ACS');
					break;
				}

				this.previous_olgierd_shadow_attack_part_2_index_2 = olgierd_shadow_attack_part_2_index_2;

				AddTimer('ACS_bruxa_tackle', 0.5  , false);
			}
			else
			{
				RemoveTimer('ACS_dodge_timer_end');

				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
				
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}
			
				if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
				{
					thePlayer.PlayEffectSingle('special_attack_fx');
					PlayerPlayAnimation( 'ethereal_shadow_attack_001_ACS');
					thePlayer.StopEffect('special_attack_fx');
					AddTimer('ACS_bruxa_tackle', 1.5  , false);
				}
				else
				{
					PlayerPlayAnimation( 'attack_shadowstep_001_ACS');
					AddTimer('ACS_bruxa_tackle', 1.5  , false);
				}

				if (!thePlayer.HasTag('ACS_Shadowstep_Long_Buff'))
				{
					thePlayer.AddTag('ACS_Shadowstep_Long_Buff');
				} 
			}
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			olgierd_shadow_attack_index_2 = RandDifferent(this.previous_olgierd_shadow_attack_index_2 , 4);

			switch (olgierd_shadow_attack_index_2) 
			{	
				case 3:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'attack_shadowdash_strong_3_ACS');
				break;

				case 2:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
				break;
				
				case 1:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'shadow_attack_jump_forward_middle_right_ACS');
				break;

				default:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}						
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				PlayerPlayAnimation( 'attack_shadowstep_001_ACS');

				AddTimer('ACS_bruxa_tackle', 1.5 , false);
				break;
			}

			this.previous_olgierd_shadow_attack_index_2 = olgierd_shadow_attack_index_2;
		}
	}

	function Umbral_Slash_End() 
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffect('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		quen_sword_glow();

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInRange( 50, 50, , FLAG_ExcludePlayer + FLAG_Attitude_Hostile + FLAG_OnlyAliveActors);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];
				
				actortarget.AddEffectDefault( EET_Confusion, thePlayer, 'ACS_Umbral_Slash_End_Start' );

				actortarget.AddEffectDefault( EET_Stagger, thePlayer, 'ACS_Umbral_Slash_End_Start' );
			}
		}

		thePlayer.StopEffect('olgierd_energy_blast');
		thePlayer.PlayEffect('olgierd_energy_blast');

		environment = (CEnvironmentDefinition)LoadResource(
			"dlc\dlc_acs\data\env\q605_hell_red_blockout.env"
			, true);
		envID = ActivateEnvironmentDefinition( environment, 1000, 0.9f, 0.25f );
		theGame.SetEnvironmentID(envID);

		//theGame.SetTimeScale( 0.25, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

		//thePlayer.AddTimer( 'RemoveInstantKillSloMo', 1.25 );

		MovementAdjust();

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);

		quen_sword_glow();	
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{			
			RemoveTimer('ACS_dodge_timer_end');

			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
									
			thePlayer.SetAnimationSpeedMultiplier( 1.25 );
			
			AddTimer('ACS_ResetAnimation', 0.25 , false);
			
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}
			}
		
			PlayerPlayAnimation( 'attack_shadowstep_001_ACS');

			//AddTimer('ACS_bruxa_tackle', 1.5  , false);

			//thePlayer.AddTag('ACS_Shadowstep_Long_Buff');

			AddTimer('ACS_Umbral_Slash_End', 1 , false);
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}						
			thePlayer.SetAnimationSpeedMultiplier( 1.25  );
			AddTimer('ACS_ResetAnimation', 0.25 , false);

			PlayerPlayAnimation( 'attack_shadowstep_001_ACS');

			AddTimer('ACS_Umbral_Slash_End', 1 );
		}
	}

	function geraltRandomOlgierdComboAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_combo_attack == 0)
				{
					PlayerPlayAnimation( 'attack_fast_combo_004_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 1)
				{
					PlayerPlayAnimation( 'attack_fast_combo_005_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 2)
				{
					PlayerPlayAnimation( 'attack_fast_combo_006_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 3)
				{
					PlayerPlayAnimation( 'attack_fast_combo_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 4)
				{
					PlayerPlayAnimation( 'attack_fast_combo_003_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 5)
				{
					PlayerPlayAnimation( 'attack_fast_combo_007_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 6)
				{
					PlayerPlayAnimation( 'attack_fast_combo_008_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 7)
				{
					PlayerPlayAnimation( 'attack_fast_combo_009_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 8)
				{
					PlayerPlayAnimation( 'attack_fast_combo_010_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 9)
				{
					PlayerPlayAnimation( 'attack_fast_combo_011_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 10)
				{
					PlayerPlayAnimation( 'attack_fast_combo_012_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 11)
				{
					PlayerPlayAnimation( 'attack_fast_combo_013_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 12)
				{
					PlayerPlayAnimation( 'attack_fast_combo_014_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 13)
				{
					PlayerPlayAnimation( 'attack_fast_combo_015_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 14)
				{
					PlayerPlayAnimation( 'attack_fast_combo_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 15)
				{
					PlayerPlayAnimation( 'attack_fast_combo_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 16)
				{
					PlayerPlayAnimation( 'attack_fast_combo_3_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 17)
				{
					PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack -= combo_counter_olgierd_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.25*2.25 ) 
				{
					olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 4);

					switch (olgierd_combo_attack_index_1) 
					{	
						case 3:
						PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'attack_fast_combo_3_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_fast_combo_2_ACS');
						break;

						default:
						PlayerPlayAnimation( 'attack_fast_combo_1_ACS');
						break;
					}

					this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
				}
				else if( targetDistance > 2.25*2.25 
				&& targetDistance <= 3.5*3.5 ) 
				{
					olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 11);

					switch (olgierd_combo_attack_index_1) 
					{									
						case 10:
						PlayerPlayAnimation( 'attack_fast_combo_012_ACS');
						break;
						
						case 9:
						PlayerPlayAnimation( 'attack_fast_combo_011_ACS');
						break;
						
						case 8:
						PlayerPlayAnimation( 'attack_fast_combo_010_ACS');
						break;
						
						case 7:
						PlayerPlayAnimation( 'attack_fast_combo_009_ACS');
						break;
						
						case 6:
						PlayerPlayAnimation( 'attack_fast_combo_008_ACS');
						break;
						
						case 5:
						PlayerPlayAnimation( 'attack_fast_combo_007_ACS');
						break;
						
						case 4:
						PlayerPlayAnimation( 'attack_fast_combo_013_ACS');
						break;
						
						case 3:
						PlayerPlayAnimation( 'attack_fast_combo_014_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'attack_fast_combo_015_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_fast_combo_003_ACS');
						break;

						default:
						PlayerPlayAnimation( 'attack_fast_combo_002_ACS');
						break;
					}

					this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
				}
				else
				{
					olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 3);

					switch (olgierd_combo_attack_index_1) 
					{	
						case 2:
						PlayerPlayAnimation( 'attack_fast_combo_006_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_fast_combo_005_ACS');
						break;

						default:
						PlayerPlayAnimation( 'attack_fast_combo_004_ACS');
						break;
					}

					this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_combo_attack == 0)
				{
					PlayerPlayAnimation( 'attack_fast_combo_004_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 1)
				{
					PlayerPlayAnimation( 'attack_fast_combo_005_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 2)
				{
					PlayerPlayAnimation( 'attack_fast_combo_006_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}
				else if (combo_counter_olgierd_combo_attack == 3)
				{
					PlayerPlayAnimation( 'attack_fast_combo_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 4)
				{
					PlayerPlayAnimation( 'attack_fast_combo_003_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 5)
				{
					PlayerPlayAnimation( 'attack_fast_combo_007_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 6)
				{
					PlayerPlayAnimation( 'attack_fast_combo_008_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 7)
				{
					PlayerPlayAnimation( 'attack_fast_combo_009_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 8)
				{
					PlayerPlayAnimation( 'attack_fast_combo_010_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 9)
				{
					PlayerPlayAnimation( 'attack_fast_combo_011_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 10)
				{
					PlayerPlayAnimation( 'attack_fast_combo_012_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 11)
				{
					PlayerPlayAnimation( 'attack_fast_combo_013_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 12)
				{
					PlayerPlayAnimation( 'attack_fast_combo_014_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 13)
				{
					PlayerPlayAnimation( 'attack_fast_combo_015_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 14)
				{
					PlayerPlayAnimation( 'attack_fast_combo_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 15)
				{
					PlayerPlayAnimation( 'attack_fast_combo_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 16)
				{
					PlayerPlayAnimation( 'attack_fast_combo_3_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack += 1;
				}

				else if (combo_counter_olgierd_combo_attack == 17)
				{
					PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_combo_attack -= combo_counter_olgierd_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_combo_attack_index_2 = RandDifferent(this.previous_olgierd_combo_attack_index_2 , 18);

				switch (olgierd_combo_attack_index_2) 
				{	
					case 17:
					PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');
					break;	
				
					case 16:
					PlayerPlayAnimation( 'attack_fast_combo_3_ACS');
					break;	

					case 15:
					PlayerPlayAnimation( 'attack_fast_combo_2_ACS');
					break;	

					case 14:
					PlayerPlayAnimation( 'attack_fast_combo_1_ACS');
					break;	
					
					case 13:
					PlayerPlayAnimation( 'attack_fast_combo_015_ACS');
					break;
					
					case 12:
					PlayerPlayAnimation( 'attack_fast_combo_014_ACS');
					break;
					
					case 11:
					PlayerPlayAnimation( 'attack_fast_combo_013_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'attack_fast_combo_012_ACS');
					break;
					
					case 9:
					PlayerPlayAnimation( 'attack_fast_combo_011_ACS');
					break;
					
					case 8:
					PlayerPlayAnimation( 'attack_fast_combo_010_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'attack_fast_combo_009_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'attack_fast_combo_008_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'attack_fast_combo_007_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_fast_combo_006_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'attack_fast_combo_005_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'attack_fast_combo_004_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_fast_combo_003_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_fast_combo_002_ACS');
					break;
				}

				this.previous_olgierd_combo_attack_index_2 = olgierd_combo_attack_index_2;
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomOlgierdHeavyAttackAlt()
	{			
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 2)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 3)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt -= combo_counter_olgierd_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					quen_sword_glow();

					olgierd_heavy_attack_alt_index_1 = RandDifferent(this.previous_olgierd_heavy_attack_alt_index_1 , 2);

					switch (olgierd_heavy_attack_alt_index_1) 
					{						
						case 1:
						PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
						break;	
					}

					this.previous_olgierd_heavy_attack_alt_index_1 = olgierd_heavy_attack_alt_index_1;
				}
				else
				{
					olgierd_heavy_attack_alt_index_2 = RandDifferent(this.previous_olgierd_heavy_attack_alt_index_2 , 2);

					switch (olgierd_heavy_attack_alt_index_2) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;
					}

					this.previous_olgierd_heavy_attack_alt_index_2 = olgierd_heavy_attack_alt_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 2)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt += 1;
				}
				else if (combo_counter_olgierd_heavy_attack_alt == 3)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack_alt -= combo_counter_olgierd_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_heavy_attack_alt_index_3 = RandDifferent(this.previous_olgierd_heavy_attack_alt_index_3 , 6);

				switch (olgierd_heavy_attack_alt_index_3) 
				{									
					case 3:
					PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
					break;
				}

				this.previous_olgierd_heavy_attack_alt_index_3 = olgierd_heavy_attack_alt_index_3;
			}
		}
	}
	
	function geraltRandomOlgierdHeavyAttack()
	{			
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_heavy_attack += 1;
				}
				else if (combo_counter_olgierd_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}
				else if (combo_counter_olgierd_heavy_attack == 2)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 3)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 4)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 5)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack -= combo_counter_olgierd_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					quen_sword_glow();

					olgierd_heavy_attack_index_1 = RandDifferent(this.previous_olgierd_heavy_attack_index_1 , 2);

					switch (olgierd_heavy_attack_index_1) 
					{						
						case 1:
						PlayerPlayAnimation( 'attack_strong_down_left_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_strong_single_1_ACS');
						break;	
					}

					this.previous_olgierd_heavy_attack_index_1 = olgierd_heavy_attack_index_1;
				}
				else
				{
					olgierd_heavy_attack_index_2 = RandDifferent(this.previous_olgierd_heavy_attack_index_2 , 4);

					switch (olgierd_heavy_attack_index_2) 
					{						
						case 3:
						PlayerPlayAnimation( 'attack_strong_up_right_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'attack_strong_single_2_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}

					this.previous_olgierd_heavy_attack_index_2 = olgierd_heavy_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');	

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_heavy_attack += 1;
				}
				else if (combo_counter_olgierd_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}
				else if (combo_counter_olgierd_heavy_attack == 2)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 3)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 4)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack += 1;
				}

				else if (combo_counter_olgierd_heavy_attack == 5)
				{
					quen_sword_glow();
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');	

					combo_counter_damage += 1;

					combo_counter_olgierd_heavy_attack -= combo_counter_olgierd_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_heavy_attack_index_3 = RandDifferent(this.previous_olgierd_heavy_attack_index_3 , 6);

				switch (olgierd_heavy_attack_index_3) 
				{									
					case 5:
					PlayerPlayAnimation( 'attack_strong_single_2_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_strong_single_1_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'attack_strong_up_right_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'attack_strong_down_left_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
					break;
				}

				this.previous_olgierd_heavy_attack_index_3 = olgierd_heavy_attack_index_3;
			}
		}
	}
	
	function geraltRandomOlgierdLightAttackAlt()
	{	
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_light_attack_alt == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);
						
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_light_attack_alt += 1;
				}
				else if (combo_counter_olgierd_light_attack_alt == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}
				else if (combo_counter_olgierd_light_attack_alt == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt -= combo_counter_olgierd_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					olgierd_light_attack_alt_index_1 = RandDifferent(this.previous_olgierd_light_attack_alt_index_1 , 5);

					switch (olgierd_light_attack_alt_index_1) 
					{						
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_left_003_ACS');
						break;	

						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_right_002_ACS');
						break;	
						
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');
						break;			
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
						break;
					}

					this.previous_olgierd_light_attack_alt_index_1 = olgierd_light_attack_alt_index_1;
				}
				else
				{
					olgierd_light_attack_alt_index_2 = RandDifferent(this.previous_olgierd_light_attack_alt_index_2 , 5);

					switch (olgierd_light_attack_alt_index_2) 
					{	
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
						break;
						
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
						break;
						
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
						break;
					}

					this.previous_olgierd_light_attack_alt_index_2 = olgierd_light_attack_alt_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_light_attack_alt == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_light_attack_alt += 1;
				}
				else if (combo_counter_olgierd_light_attack_alt == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}
				else if (combo_counter_olgierd_light_attack_alt == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt += 1;
				}

				else if (combo_counter_olgierd_light_attack_alt == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack_alt -= combo_counter_olgierd_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_light_attack_alt_index_3 = RandDifferent(this.previous_olgierd_light_attack_alt_index_3 , 10);

				switch (olgierd_light_attack_alt_index_3) 
				{	
					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_left_003_ACS');
					break;	

					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_right_002_ACS');
					break;	
					
					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_knee_slash_180_1_ACS');
					break;			
					
					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_r_002_ACS');
					break;
					
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.5 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_l_003_ACS');
					break;
					
					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_left_NEW_test_ACS');
					break;
						
					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_1_right_NEW_test_ACS');
					break;
						
					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_left_NEW_ACS');
					break;
						
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_2_right_NEW_ACS');
					break;
						
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }		

					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.75  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_lll_3_right_NEW_ACS');
					break;
				}

				this.previous_olgierd_light_attack_alt_index_3 = olgierd_light_attack_alt_index_3;
			}
		}
	}
	
	function geraltRandomOlgierdLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_light_attack == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_light_attack += 1;
				}
				else if (combo_counter_olgierd_light_attack == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}
				else if (combo_counter_olgierd_light_attack == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack -= combo_counter_olgierd_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					//quen_sword_glow();

					olgierd_light_attack_index_1 = RandDifferent(this.previous_olgierd_light_attack_index_1 , 3);

					switch (olgierd_light_attack_index_1) 
					{	
						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');
						break;

						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_single_2_ACS');
						break;	
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_fast_single_1_ACS');
						break;	
					}

					this.previous_olgierd_light_attack_index_1 = olgierd_light_attack_index_1;
				}
				else
				{
					olgierd_light_attack_index_2 = RandDifferent(this.previous_olgierd_light_attack_index_2 , 7);

					switch (olgierd_light_attack_index_2) 
					{						
						case 6:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
						break;	
							
						case 5:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
						break;
							
						case 4:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
						break;	
							
						case 3:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
						break;

						case 2:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_5_ACS');
						break;
						
						case 1:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_2_ACS');
						break;
						
						default:
						if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
						RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

						PlayerPlayAnimation( 'attack_pirouette_1_ACS');
						break;
					}

					this.previous_olgierd_light_attack_index_2 = olgierd_light_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_olgierd_light_attack == 0)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_olgierd_light_attack += 1;
				}
				else if (combo_counter_olgierd_light_attack == 1)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}
				else if (combo_counter_olgierd_light_attack == 2)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 3)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 4)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 5)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 6)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 7)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');
	
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 8)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack += 1;
				}

				else if (combo_counter_olgierd_light_attack == 9)
				{
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');

					combo_counter_damage += 1;

					combo_counter_olgierd_light_attack -= combo_counter_olgierd_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				olgierd_light_attack_index_3 = RandDifferent(this.previous_olgierd_light_attack_index_3 , 10);

				switch (olgierd_light_attack_index_3) 
				{	
					case 9:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
					break;	
						
					case 8:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					break;

					case 7:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_tripple_1_ACS');
					break;

					case 6:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_2_ACS');
					break;
					
					case 5:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 1.25 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_fast_single_1_ACS');
					break;
					
					case 4:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_5_ACS');
					break;

					case 3:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
					break;

					case 2:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
					break;
					
					case 1:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_2_ACS');
					break;
					
					default:
					if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier( 2 ); }
												
					RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

					PlayerPlayAnimation( 'attack_pirouette_1_ACS');
					break;
				}

				this.previous_olgierd_light_attack_index_3 = olgierd_light_attack_index_3;
			}
		}
	}
	
	function geraltRandomOlgierdSpecialAttackAlt()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//theGame.SetTimeScale( 0.75, theGame.GetTimescaleSource( ETS_InstantKill ), theGame.GetTimescalePriority( ETS_InstantKill ), false, true );

		//AddTimer( 'RemoveInstantKillSloMo', 0.3 );

		MovementAdjust();

		quen_sword_glow();	

		dodge_timer_attack_actual();

		thePlayer.SetIsCurrentlyDodging(true);
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if( targetDistance <= 3.25*3.25 ) 
			{
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}	
				}

				olgierd_shadow_attack_index_1 = RandDifferent(this.previous_olgierd_shadow_attack_index_1 , 3);

				switch (olgierd_shadow_attack_index_1) 
				{	
					case 2:
					PlayerPlayAnimation( 'attack_shadowdash_strong_3_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'shadow_attack_jump_forward_middle_right_ACS');
					break;
				}

				this.previous_olgierd_shadow_attack_index_1 = olgierd_shadow_attack_index_1;
			}
			else if( targetDistance > 3.25*3.25 && targetDistance <= 11*11) 
			{
				RemoveTimer('ACS_dodge_timer_end');

				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.5  ); }
				
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}
			
				olgierd_shadow_attack_part_2_index_2 = RandDifferent(this.previous_olgierd_shadow_attack_part_2_index_2 , 2);

				switch (olgierd_shadow_attack_part_2_index_2) 
				{	
					case 1:
					thePlayer.PlayEffectSingle('special_attack_fx');
					PlayerPlayAnimation( 'attack_shadowdash_strong_1_ACS');
					thePlayer.StopEffect('special_attack_fx');
					break;
					
					default:
					PlayerPlayAnimation( 'attack_shadowstep_001_ACS');
					break;
				}

				this.previous_olgierd_shadow_attack_part_2_index_2 = olgierd_shadow_attack_part_2_index_2;

				AddTimer('ACS_bruxa_tackle', 0.5  , false);
			}
			else
			{
				RemoveTimer('ACS_dodge_timer_end');

				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
										
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
				
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else if ( ACS_GetTargetMode() == 2 )
				{
					if (thePlayer.IsHardLockEnabled())
					{
						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
					}
					else
					{
						if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

						if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
					}
				}
			
				if (thePlayer.GetStat(BCS_Vitality) <= thePlayer.GetStatMax(BCS_Vitality) * 0.5)
				{
					thePlayer.PlayEffectSingle('special_attack_fx');
					PlayerPlayAnimation( 'ethereal_shadow_attack_001_ACS');
					thePlayer.StopEffect('special_attack_fx');
					AddTimer('ACS_bruxa_tackle', 1.5  , false);
				}
				else
				{
					PlayerPlayAnimation( 'attack_shadowstep_001_ACS');
					AddTimer('ACS_bruxa_tackle', 1.5  , false);
				}

				if (!thePlayer.HasTag('ACS_Shadowstep_Long_Buff'))
				{
					thePlayer.AddTag('ACS_Shadowstep_Long_Buff');
				} 
			}
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			olgierd_shadow_attack_index_2 = RandDifferent(this.previous_olgierd_shadow_attack_index_2 , 4);

			switch (olgierd_shadow_attack_index_2) 
			{	
				case 3:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'attack_shadowdash_strong_3_ACS');
				break;

				case 2:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'attack_shadowdash_strong_2_ACS');
				break;
				
				case 1:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}							
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	
				RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);

				PlayerPlayAnimation( 'shadow_attack_jump_forward_middle_right_ACS');
				break;

				default:
				if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}						
				if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.25  ); }
				AddTimer('ACS_ResetAnimation', 0.25 , false);

				PlayerPlayAnimation( 'attack_shadowstep_001_ACS');

				AddTimer('ACS_bruxa_tackle', 1.5 , false);
				break;
			}

			this.previous_olgierd_shadow_attack_index_2 = olgierd_shadow_attack_index_2;
		}
	}
	
	function geraltRandomOlgierdSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if( targetDistance <= 2.25*2.25 ) 
			{
				olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 4);

				switch (olgierd_combo_attack_index_1) 
				{	
					case 3:
					PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'attack_fast_combo_3_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_fast_combo_2_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_fast_combo_1_ACS');
					break;
				}

				this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
			}
			else if( targetDistance > 2.25*2.25 
			&& targetDistance <= 3.5*3.5 ) 
			{
				olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 11);

				switch (olgierd_combo_attack_index_1) 
				{									
					case 10:
					PlayerPlayAnimation( 'attack_fast_combo_012_ACS');
					break;
					
					case 9:
					PlayerPlayAnimation( 'attack_fast_combo_011_ACS');
					break;
					
					case 8:
					PlayerPlayAnimation( 'attack_fast_combo_010_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'attack_fast_combo_009_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'attack_fast_combo_008_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'attack_fast_combo_007_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_fast_combo_013_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'attack_fast_combo_014_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'attack_fast_combo_015_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_fast_combo_003_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_fast_combo_002_ACS');
					break;
				}

				this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
			}
			else
			{
				olgierd_combo_attack_index_1 = RandDifferent(this.previous_olgierd_combo_attack_index_1 , 3);

				switch (olgierd_combo_attack_index_1) 
				{	
					case 2:
					PlayerPlayAnimation( 'attack_fast_combo_006_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'attack_fast_combo_005_ACS');
					break;

					default:
					PlayerPlayAnimation( 'attack_fast_combo_004_ACS');
					break;
				}

				this.previous_olgierd_combo_attack_index_1 = olgierd_combo_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			olgierd_combo_attack_index_2 = RandDifferent(this.previous_olgierd_combo_attack_index_2 , 18);

			switch (olgierd_combo_attack_index_2) 
			{	
				case 17:
				PlayerPlayAnimation( 'attack_fast_combo_to_strong_ACS');
				break;	
			
				case 16:
				PlayerPlayAnimation( 'attack_fast_combo_3_ACS');
				break;	

				case 15:
				PlayerPlayAnimation( 'attack_fast_combo_2_ACS');
				break;	

				case 14:
				PlayerPlayAnimation( 'attack_fast_combo_1_ACS');
				break;	
				
				case 13:
				PlayerPlayAnimation( 'attack_fast_combo_015_ACS');
				break;
				
				case 12:
				PlayerPlayAnimation( 'attack_fast_combo_014_ACS');
				break;
				
				case 11:
				PlayerPlayAnimation( 'attack_fast_combo_013_ACS');
				break;
				
				case 10:
				PlayerPlayAnimation( 'attack_fast_combo_012_ACS');
				break;
				
				case 9:
				PlayerPlayAnimation( 'attack_fast_combo_011_ACS');
				break;
				
				case 8:
				PlayerPlayAnimation( 'attack_fast_combo_010_ACS');
				break;
				
				case 7:
				PlayerPlayAnimation( 'attack_fast_combo_009_ACS');
				break;
				
				case 6:
				PlayerPlayAnimation( 'attack_fast_combo_008_ACS');
				break;
				
				case 5:
				PlayerPlayAnimation( 'attack_fast_combo_007_ACS');
				break;
				
				case 4:
				PlayerPlayAnimation( 'attack_fast_combo_006_ACS');
				break;
				
				case 3:
				PlayerPlayAnimation( 'attack_fast_combo_005_ACS');
				break;
				
				case 2:
				PlayerPlayAnimation( 'attack_fast_combo_004_ACS');
				break;
				
				case 1:
				PlayerPlayAnimation( 'attack_fast_combo_003_ACS');
				break;

				default:
				PlayerPlayAnimation( 'attack_fast_combo_002_ACS');
				break;
			}

			this.previous_olgierd_combo_attack_index_2 = olgierd_combo_attack_index_2;
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Shield stuff

	function geraltRandomShieldAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack += 1;
					}
					else if (combo_counter_shield_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');

						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}
					else if (combo_counter_shield_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');


						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 3)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 4)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 5)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
						
						combo_counter_damage += 1;

						combo_counter_shield_attack -= combo_counter_shield_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					if( targetDistance <= 1.5*1.5 ) 
					{	
						eredin_attack_index_1 = RandDifferent(this.previous_eredin_attack_index_1 , 2);

						switch (eredin_attack_index_1) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
							break;
							
							default:
							PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
							break;
						}
						
						this.previous_eredin_attack_index_1 = eredin_attack_index_1;

						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
					}
					else
					{		
						eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 4);

						switch (eredin_attack_index_2) 
						{	
							case 3:
							PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');
							break;
							
							case 2:
							PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');
							break;
							
							case 1:
							PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
							break;
							
							default:
							PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');
							break;
						}

						this.previous_eredin_attack_index_2 = eredin_attack_index_2;
					}
				}
			}	
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack += 1;
					}
					else if (combo_counter_shield_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}
					else if (combo_counter_shield_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');


						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 3)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 4)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack += 1;
					}

					else if (combo_counter_shield_attack == 5)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
						
						combo_counter_damage += 1;

						combo_counter_shield_attack -= combo_counter_shield_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 6);

					switch (eredin_attack_index_3) 
					{					
						case 5:
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
						break;
							
						case 4:
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
						break;
							
						case 3:
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');
						break;
							
						case 2:
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldComboAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack_alt += 1;
					}
					else if (combo_counter_shield_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt += 1;
					}
					else if (combo_counter_shield_attack_alt == 2)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt += 1;
					}

					else if (combo_counter_shield_attack_alt == 3)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt -= combo_counter_shield_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 4);

					switch (eredin_attack_index_2) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;
							
						case 2:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}
					this.previous_eredin_attack_index_2 = eredin_attack_index_2;			
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack_alt += 1;
					}
					else if (combo_counter_shield_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt += 1;
					}
					else if (combo_counter_shield_attack_alt == 2)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt += 1;
					}

					else if (combo_counter_shield_attack_alt == 3)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_alt -= combo_counter_shield_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 4);

					switch (eredin_attack_index_3) 
					{					
						case 3:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;
							
						case 2:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack_special_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack_special_alt += 1;
					}
					else if (combo_counter_shield_attack_special_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_special_alt -= combo_counter_shield_attack_special_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{	
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 4);

					switch (eredin_attack_index_2) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}
			}	
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_attack_special_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_attack_special_alt += 1;
					}
					else if (combo_counter_shield_attack_special_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_attack_special_alt -= combo_counter_shield_attack_special_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 6);

					switch (eredin_attack_index_3) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function geraltRandomShieldHeavyAttackAlt()
	{		
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_heavy_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_heavy_attack_alt += 1;
					}
					else if (combo_counter_shield_heavy_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack_alt -= combo_counter_shield_heavy_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

					switch (eredin_attack_index_2) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;	
				}
			}	
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_heavy_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_heavy_attack_alt += 1;
					}
					else if (combo_counter_shield_heavy_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack_alt -= combo_counter_shield_heavy_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 2);

					switch (eredin_attack_index_3) 
					{							
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_heavy_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_heavy_attack += 1;
					}
					else if (combo_counter_shield_heavy_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack += 1;
					}

					else if (combo_counter_shield_heavy_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack -= combo_counter_shield_heavy_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					if( targetDistance <= 1.5*1.5 ) 
					{	
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
					}
					else
					{		
						eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

						switch (eredin_attack_index_2) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
							break;
							
							default:
							PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');
							break;
						}

						this.previous_eredin_attack_index_2 = eredin_attack_index_2;
					}		
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_heavy_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_heavy_attack += 1;
					}
					else if (combo_counter_shield_heavy_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack += 1;
					}

					else if (combo_counter_shield_heavy_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_heavy_attack -= combo_counter_shield_heavy_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 3);

					switch (eredin_attack_index_3) 
					{					
						case 2:
						PlayerPlayAnimation( 'man_npc_shield_attack_push_rp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_03_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_shield_attack_lp_02_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_light_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_light_attack_alt += 1;
					}
					else if (combo_counter_shield_light_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack_alt -= combo_counter_shield_light_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

					switch (eredin_attack_index_2) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_light_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_light_attack_alt += 1;
					}
					else if (combo_counter_shield_light_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack_alt -= combo_counter_shield_light_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 2);

					switch (eredin_attack_index_3) 
					{							
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_light_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_light_attack += 1;
					}
					else if (combo_counter_shield_light_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack += 1;
					}

					else if (combo_counter_shield_light_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack -= combo_counter_shield_light_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					if( targetDistance <= 1.5*1.5 ) 
					{	
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
					}
					else
					{		
						eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

						switch (eredin_attack_index_2) 
						{	
							case 1:
							PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');
							break;
							
							default:
							PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');
							break;
						}

						this.previous_eredin_attack_index_2 = eredin_attack_index_2;
					}	
				}
			}		
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_light_attack == 0)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_light_attack += 1;
					}
					else if (combo_counter_shield_light_attack == 1)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack += 1;
					}

					else if (combo_counter_shield_light_attack == 2)
					{
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_light_attack -= combo_counter_shield_light_attack;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 3);

					switch (eredin_attack_index_3) 
					{					
						case 2:
						PlayerPlayAnimation( 'man_npc_shield_attack_push_lp_ACS');
						ACS_Shield().PlayEffectSingle('destroy');
						ACS_Shield().StopEffect('destroy');
						ACS_Shield().PlayEffectSingle('destroy_shield_fx');
						ACS_Shield().StopEffect('destroy_shield_fx');
						ACS_Shield().PlayEffectSingle('igni_cone_hit');
						ACS_Shield().StopEffect('igni_cone_hit');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_03_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_shield_attack_rp_02_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_special_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_special_attack_alt += 1;
					}
					else if (combo_counter_shield_special_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_special_attack_alt -= combo_counter_shield_special_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{	
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 4);

					switch (eredin_attack_index_2) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}
			}		
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				if (ACS_ComboMode() == 0)
				{
					ACS_Combo_Mode_Reset();
					
					if (combo_counter_shield_special_attack_alt == 0)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');

						combo_counter_damage -= combo_counter_damage;

						combo_counter_shield_special_attack_alt += 1;
					}
					else if (combo_counter_shield_special_attack_alt == 1)
					{
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');

						combo_counter_damage += 1;

						combo_counter_shield_special_attack_alt -= combo_counter_shield_special_attack_alt;
					}
				}
				else if (ACS_ComboMode() == 1)
				{
					eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 6);

					switch (eredin_attack_index_3) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_lf_l_ACS');
						break;
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_charge_attack_rf_r_ACS');
						break;
					}

					this.previous_eredin_attack_index_3 = eredin_attack_index_3;
				}
			}
		}
	}
	
	function geraltRandomShieldSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 4);

				switch (eredin_attack_index_2) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_npc_shield_taunt_rp_01_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_03_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_02_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_01_ACS');
					break;
				}

				this.previous_eredin_attack_index_2 = eredin_attack_index_2;
			}	
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if(!thePlayer.HasTag('ACS_Shielded_Entity'))
			{
				eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 2);

				switch (eredin_attack_index_3) 
				{							
					case 3:
					PlayerPlayAnimation( 'man_npc_shield_taunt_rp_01_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_03_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_02_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_shield_taunt_lp_01_ACS');
					break;
				}

				this.previous_eredin_attack_index_3 = eredin_attack_index_3;
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Eredin attack stuff
	
	function geraltRandomEredinAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_attack == 0)
				{
					Shrink_Geralt(1.209999688000062);
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 1)
				{
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 2)
				{
					Shrink_Geralt(0.159999820000036);
					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 3)
				{
					Shrink_Geralt(0.759999736000053);
					PlayerPlayAnimation( 'attack_ready_swingswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 4)
				{
					Shrink_Geralt(0.35);
					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 5)
				{
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 6)
				{
					Shrink_Geralt(0.35);
					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
	
					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 10)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 11)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 12)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack -= combo_counter_eredin_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if (targetDistance <= 1.5 * 1.5  )
				{	
					eredin_attack_index_1 = RandDifferent(this.previous_eredin_attack_index_1 , 6);

					switch (eredin_attack_index_1) 
					{	
						case 5:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
						break;	
							
						case 2:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
						break;
							
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
						break;	
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
						break;
					}
					
					this.previous_eredin_attack_index_1 = eredin_attack_index_1;
				}
				else if (targetDistance > 1.5 * 1.5 && targetDistance <= 5*5 )
				{		
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 6);

					switch (eredin_attack_index_2) 
					{	
						case 5:
						Shrink_Geralt(0.35);
						PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');
						break;

						case 4:
						Shrink_Geralt(0.35);
						PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');
						break;			
					
						case 3:
						Shrink_Geralt(1.009999520000096);
						PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');
						break;
						
						case 2:
						Shrink_Geralt(0.159999820000036);
						PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');
						break;
						
						case 1:
						Shrink_Geralt(1.009999520000096);
						PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_ACS');
						break;
						
						default:
						Shrink_Geralt(0.759999736000053);
						PlayerPlayAnimation( 'attack_ready_swingswing_01_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}		
				else
				{
					Shrink_Geralt(1.209999688000062);
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');
				}		
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_attack == 0)
				{
					Shrink_Geralt(1.209999688000062);
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 1)
				{
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 2)
				{
					Shrink_Geralt(0.159999820000036);
					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}
				else if (combo_counter_eredin_attack == 3)
				{
					Shrink_Geralt(0.759999736000053);
					PlayerPlayAnimation( 'attack_ready_swingswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 4)
				{
					Shrink_Geralt(0.35);
					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 5)
				{
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 6)
				{
					Shrink_Geralt(0.35);
					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
	
					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 10)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 11)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack += 1;
				}

				else if (combo_counter_eredin_attack == 12)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_attack -= combo_counter_eredin_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 12);

				switch (eredin_attack_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
					break;	
						
					case 10:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					break;
						
					case 9:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
					break;	
						
					case 8:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
					break;

					case 7:

					Shrink_Geralt(0.35);

					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');
					break;

					case 6:

					Shrink_Geralt(0.35);

					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');
					break;			
				
					case 5:

					Shrink_Geralt(1.009999520000096);

					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');
					break;
					
					case 4:

					Shrink_Geralt(0.159999820000036);

					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');
					break;
					
					case 3:

					Shrink_Geralt(1.009999520000096);

					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_ACS');
					break;
					
					case 2:

					Shrink_Geralt(0.759999736000053);

					PlayerPlayAnimation( 'attack_ready_swingswing_01_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
					break;
				}

				this.previous_eredin_attack_index_3 = eredin_attack_index_3;
			}
		}
	}

	function geraltRandomEredinComboAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_combo_attack == 0)
				{
					Shrink_Geralt(2.55);
					PlayerPlayAnimation( 'attack_ready_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 1)
				{
					Shrink_Geralt(1.519999856000029);
					PlayerPlayAnimation( 'attack_ready_swingswing_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 2)
				{
					Shrink_Geralt(2.45);
					PlayerPlayAnimation( 'attack_ready_r_combo_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 3)
				{
					Shrink_Geralt(0.759999928000014);
					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 4)
				{
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 5)
				{
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 6)
				{
					Shrink_Geralt(0.45);
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
	
					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack -= combo_counter_eredin_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2*2 ) 
				{
					eredin_combo_attack_index_1 = RandDifferent(this.previous_eredin_combo_attack_index_1 , 3);
					
					switch (eredin_combo_attack_index_1) 
					{					
						case 2:
						Shrink_Geralt(0.45);
						PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
						break;
						
						case 1:
						Shrink_Geralt(0.3);
						PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');
						break;
						
						default:
						Shrink_Geralt(0.3);
						PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');
						break;
					}

					this.previous_eredin_combo_attack_index_1 = eredin_combo_attack_index_1;
				}
				else if( targetDistance > 2*2 && targetDistance <= 3.5*3.5) 
				{
					eredin_combo_attack_index_2 = RandDifferent(this.previous_eredin_combo_attack_index_2 , 2);
					
					switch (eredin_combo_attack_index_2) 
					{	
						case 1:
						Shrink_Geralt(0.759999928000014);
						PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_caretaker_ACS');
						break;
						
						default:
						Shrink_Geralt(1.519999856000029);
						PlayerPlayAnimation( 'attack_ready_swingswing_01_caretaker_ACS');
						break;
					}
					this.previous_eredin_combo_attack_index_2 = eredin_combo_attack_index_2;
				}
				else
				{
					eredin_combo_attack_index_2 = RandDifferent(this.previous_eredin_combo_attack_index_2 , 2);
					
					switch (eredin_combo_attack_index_2) 
					{	
						case 1:
						Shrink_Geralt(2.55);
						PlayerPlayAnimation( 'attack_ready_combo_01_ACS');
						break;
						
						default:
						Shrink_Geralt(2.45);
						PlayerPlayAnimation( 'attack_ready_r_combo_01_caretaker_ACS');
						break;
					}
					this.previous_eredin_combo_attack_index_2 = eredin_combo_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_combo_attack == 0)
				{
					Shrink_Geralt(2.55);
					PlayerPlayAnimation( 'attack_ready_combo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 1)
				{
					Shrink_Geralt(1.519999856000029);
					PlayerPlayAnimation( 'attack_ready_swingswing_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 2)
				{
					Shrink_Geralt(2.45);
					PlayerPlayAnimation( 'attack_ready_r_combo_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}
				else if (combo_counter_eredin_combo_attack == 3)
				{
					Shrink_Geralt(0.759999928000014);
					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_caretaker_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 4)
				{
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 5)
				{
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack += 1;
				}

				else if (combo_counter_eredin_combo_attack == 6)
				{
					Shrink_Geralt(0.45);
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
	
					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack -= combo_counter_eredin_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_combo_attack_index_3 = RandDifferent(this.previous_eredin_combo_attack_index_3 , 7);
					
				switch (eredin_combo_attack_index_3) 
				{		
					case 6:
					Shrink_Geralt(2.55);
					PlayerPlayAnimation( 'attack_ready_combo_01_ACS');
					break;
						
					case 5:
					Shrink_Geralt(0.45);
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
					break;
						
					case 4:
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');
					break;
						
					case 3:
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');
					break;
					
					case 2:
					Shrink_Geralt(0.759999928000014);
					PlayerPlayAnimation( 'attack_ready_swingswingturnswing_01_caretaker_ACS');
					break;
						
					case 1:
					Shrink_Geralt(1.519999856000029);
					PlayerPlayAnimation( 'attack_ready_swingswing_01_caretaker_ACS');
					break;
						
					default:
					Shrink_Geralt(2.45);
					PlayerPlayAnimation( 'attack_ready_r_combo_01_caretaker_ACS');
					break;
				}
				
				this.previous_eredin_combo_attack_index_3 = eredin_combo_attack_index_3;
			}
		}
	}
	
	function geraltEredinStab() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			Shrink_Geralt(5);
			PlayerPlayAnimation( 'attack_special_stab_caretaker_ACS');

			thePlayer.AddTag('ACS_Eredin_Stab');

			AddTimer('ACS_bruxa_tackle', 0.5  , false);
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			Shrink_Geralt(5);
			
			PlayerPlayAnimation( 'attack_special_stab_caretaker_ACS');
		}
	}
	
	function geraltEredinFuryCombo() 
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_combo_attack_alt == 0)
				{
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_combo_attack_alt += 1;
				}
				else if (combo_counter_eredin_combo_attack_alt == 1)
				{
					Shrink_Geralt(1.95);
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack_alt += 1;
				}
				else if (combo_counter_eredin_combo_attack_alt == 2)
				{
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack_alt -= combo_counter_eredin_combo_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{	
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');
				}
				else if( targetDistance > 3 * 3 
				&& targetDistance <= 4 * 4 ) 
				{	
					Shrink_Geralt(1.95);
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');
				}
				else
				{
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_combo_attack_alt == 0)
				{
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_combo_attack_alt += 1;
				}
				else if (combo_counter_eredin_combo_attack_alt == 1)
				{
					Shrink_Geralt(1.95);
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack_alt += 1;
				}
				else if (combo_counter_eredin_combo_attack_alt == 2)
				{
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_combo_attack_alt -= combo_counter_eredin_combo_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				Shrink_Geralt(2.15);
				PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomEredinHeavyAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_heavy_attack_alt += 1;
				}
				else if (combo_counter_eredin_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt += 1;
				}
				else if (combo_counter_eredin_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt += 1;
				}

				else if (combo_counter_eredin_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt -= combo_counter_eredin_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if (targetDistance <= 1.5 * 1.5 )
				{	
					eredin_attack_index_1 = RandDifferent(this.previous_eredin_attack_index_1 , 2);

					switch (eredin_attack_index_1) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
						break;			
						
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
						break;
					}
					
					this.previous_eredin_attack_index_1 = eredin_attack_index_1;
				}
				else
				{		
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

					switch (eredin_attack_index_2) 
					{		
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
						break;	

						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
						break;	
					}
					
					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_heavy_attack_alt += 1;
				}
				else if (combo_counter_eredin_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt += 1;
				}
				else if (combo_counter_eredin_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt += 1;
				}

				else if (combo_counter_eredin_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack_alt -= combo_counter_eredin_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_combo_attack_index_3 = RandDifferent(this.previous_eredin_combo_attack_index_3 , 4);
					
				switch (eredin_combo_attack_index_3) 
				{		
					case 3:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_right_ACS');
					break;	

					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_2_left_ACS');
					break;	

					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_right_ACS');
					break;			
					
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_h_1_left_ACS');
					break;
				}
				
				this.previous_eredin_combo_attack_index_3 = eredin_combo_attack_index_3;
			}
		}
	}
	
	function geraltRandomEredinHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_heavy_attack == 0)
				{
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_heavy_attack += 1;
				}
				else if (combo_counter_eredin_heavy_attack == 1)
				{
					Shrink_Geralt(0.35);
					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}
				else if (combo_counter_eredin_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 3)
				{
					Shrink_Geralt(0.159999820000036);
					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 5)
				{
					Shrink_Geralt(0.35);
					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack -= combo_counter_eredin_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if (targetDistance <= 1.5 * 1.5 )
				{	
					eredin_attack_index_1 = RandDifferent(this.previous_eredin_attack_index_1 , 4);

					switch (eredin_attack_index_1) 
					{	
						case 3:
						Shrink_Geralt(1.009999520000096);
						PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');
						break;
						
						case 2:
						Shrink_Geralt(0.35);
						PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');
						break;
						
						case 1:
						Shrink_Geralt(0.159999820000036);
						PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');
						break;
						
						default:
						Shrink_Geralt(0.35);
						PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');
						break;
					}
					
					this.previous_eredin_attack_index_1 = eredin_attack_index_1;
				}
				else
				{		
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 6);

					switch (eredin_attack_index_2) 
					{		
						case 5:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
						break;
						
						case 4:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
						break;
					
						case 1:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_heavy_attack == 0)
				{
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_heavy_attack += 1;
				}
				else if (combo_counter_eredin_heavy_attack == 1)
				{
					Shrink_Geralt(0.35);
					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}
				else if (combo_counter_eredin_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 3)
				{
					Shrink_Geralt(0.159999820000036);
					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 5)
				{
					Shrink_Geralt(0.35);
					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack += 1;
				}

				else if (combo_counter_eredin_heavy_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_heavy_attack -= combo_counter_eredin_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_combo_attack_index_3 = RandDifferent(this.previous_eredin_combo_attack_index_3 , 10);
					
				switch (eredin_combo_attack_index_3) 
				{	
					case 9:
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_ready_lowswing_overhead_01_ACS');
					break;
						
					case 8:
					Shrink_Geralt(0.35);
					PlayerPlayAnimation( 'attack_relaxed_left_45_READY_ACS');
					break;
						
					case 7:
					Shrink_Geralt(0.159999820000036);
					PlayerPlayAnimation( 'attack_relaxed_right_45_READY_ACS');
					break;
						
					case 6:
					Shrink_Geralt(0.35);
					PlayerPlayAnimation( 'attack_relaxed_forward_01_READY_ACS');
					break;
						
					case 5:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
						
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;
						
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
					break;
				}
				
				this.previous_eredin_combo_attack_index_3 = eredin_combo_attack_index_3;
			}
		}
	}
	
	function geraltRandomEredinLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_light_attack_alt == 0)
				{
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_light_attack_alt += 1;
				}
				else if (combo_counter_eredin_light_attack_alt == 1)
				{
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack_alt += 1;
				}
				else if (combo_counter_eredin_light_attack_alt == 2)
				{
					Shrink_Geralt(0.45);
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack_alt -= combo_counter_eredin_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_combo_attack_index_1 = RandDifferent(this.previous_eredin_combo_attack_index_1 , 3);
					
				switch (eredin_combo_attack_index_1) 
				{					
					case 2:
					Shrink_Geralt(0.45);
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
					break;
						
					case 1:
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');
					break;
						
					default:
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');
					break;
				}

				this.previous_eredin_combo_attack_index_1 = eredin_combo_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_light_attack_alt == 0)
				{
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_light_attack_alt += 1;
				}
				else if (combo_counter_eredin_light_attack_alt == 1)
				{
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack_alt += 1;
				}
				else if (combo_counter_eredin_light_attack_alt == 2)
				{
					Shrink_Geralt(0.45);
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack_alt -= combo_counter_eredin_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_combo_attack_index_3 = RandDifferent(this.previous_eredin_combo_attack_index_3 , 3);
					
				switch (eredin_combo_attack_index_3) 
				{		
					case 2:
					Shrink_Geralt(0.45);
					PlayerPlayAnimation( 'attack_ready_kickcombo_02_ACS');
					break;
						
					case 1:
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_kickcombo_01_ACS');
					break;
						
					default:
					Shrink_Geralt(0.3);
					PlayerPlayAnimation( 'attack_ready_punchcombo_01_ACS');
					break;
				}
				
				this.previous_eredin_combo_attack_index_3 = eredin_combo_attack_index_3;
			}
		}
	}
	
	function geraltRandomEredinLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_light_attack == 0)
				{
					Shrink_Geralt(1.209999688000062);
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_light_attack += 1;
				}
				else if (combo_counter_eredin_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}
				else if (combo_counter_eredin_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack -= combo_counter_eredin_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if (targetDistance <= 1.5 * 1.5 )
				{	
					eredin_attack_index_1 = RandDifferent(this.previous_eredin_attack_index_1 , 4);

					switch (eredin_attack_index_1) 
					{
						case 3:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
						break;	

						case 1:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
						break;
					}
					
					this.previous_eredin_attack_index_1 = eredin_attack_index_1;
				}
				else if (targetDistance > 1.5 * 1.5 && targetDistance <= 5*5 )
				{		
					eredin_attack_index_2 = RandDifferent(this.previous_eredin_attack_index_2 , 2);

					switch (eredin_attack_index_2) 
					{			
						case 1:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
						break;	
							
						default:
						PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
						break;
					}

					this.previous_eredin_attack_index_2 = eredin_attack_index_2;
				}		
				else
				{
					Shrink_Geralt(1.209999688000062);
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_light_attack == 0)
				{
					Shrink_Geralt(1.209999688000062);
					PlayerPlayAnimation( 'walkattack_ready_lf_01_TO_IDLE_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_light_attack += 1;
				}
				else if (combo_counter_eredin_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}
				else if (combo_counter_eredin_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack += 1;
				}

				else if (combo_counter_eredin_light_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_light_attack -= combo_counter_eredin_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				eredin_attack_index_3 = RandDifferent(this.previous_eredin_attack_index_3 , 6);

				switch (eredin_attack_index_3) 
				{		
					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_start_lll_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_right_NEW_LONG_ACS');
					break;	
						
					case 2:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_left_NEW_LONG_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_1_left_NEW_LONG_ACS');
					break;	
						
					default:
					PlayerPlayAnimation( 'man_npc_sword_1hand_attack_l_2_right_NEW_LONG_ACS');
					break;
				}

				this.previous_eredin_attack_index_3 = eredin_attack_index_3;
			}
		}
	}
	
	function geraltRandomEredinSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			Shrink_Geralt(5);
			PlayerPlayAnimation( 'attack_special_stab_caretaker_ACS');

			thePlayer.AddTag('ACS_Eredin_Stab');

			AddTimer('ACS_bruxa_tackle', 0.5  , false);
		}
		else
		{
			if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');

			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			Shrink_Geralt(5);
			PlayerPlayAnimation( 'attack_special_stab_caretaker_ACS');
		}
	}
	
	function geraltRandomEredinSpecialAttack()
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_special_attack_alt == 0)
				{
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_special_attack_alt += 1;
				}
				else if (combo_counter_eredin_special_attack_alt == 1)
				{
					Shrink_Geralt(1.95);
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_special_attack_alt += 1;
				}
				else if (combo_counter_eredin_special_attack_alt == 2)
				{
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_special_attack_alt -= combo_counter_eredin_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3 * 3 ) 
				{	
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');
				}
				else if( targetDistance > 3 * 3 
				&& targetDistance <= 4 * 4 ) 
				{	
					Shrink_Geralt(1.95);
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');
				}
				else
				{
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_eredin_special_attack_alt == 0)
				{
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_eredin_special_attack_alt += 1;
				}
				else if (combo_counter_eredin_special_attack_alt == 1)
				{
					Shrink_Geralt(1.95);
					PlayerPlayAnimation( 'attack_ready_light2heavy_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_special_attack_alt += 1;
				}
				else if (combo_counter_eredin_special_attack_alt == 2)
				{
					Shrink_Geralt(2.15);
					PlayerPlayAnimation( 'attack_ready_furycombo_01_ACS');

					combo_counter_damage += 1;

					combo_counter_eredin_special_attack_alt -= combo_counter_eredin_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				Shrink_Geralt(2.15);
				PlayerPlayAnimation( 'attack_ready_furycombo_02_ACS');
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Imlerith Attack Stuff

	function geraltRandomImlerithAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_attack == 0)
				{
					Shrink_Geralt(1.009999520000096);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 1)
				{
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 2)
				{
					Shrink_Geralt(2.85);
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 3)
				{
					Shrink_Geralt(1.49999970000006);
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 4)
				{
					Shrink_Geralt(0.759999760000048);
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 5)
				{
					Shrink_Geralt(0.909999940000012);
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 6)
				{
					Shrink_Geralt(2.5);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 7)
				{
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 8)
				{
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 9)
				{
					Shrink_Geralt(1.419999916000017);
					PlayerPlayAnimation( 'attack_front_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 10)
				{
					Shrink_Geralt(1.059999760000048);
					PlayerPlayAnimation( 'attack_fast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 11)
				{
					Shrink_Geralt(1.779999844000031);
					PlayerPlayAnimation( 'attack_front_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 12)
				{
					Shrink_Geralt(0.2599999880000024);
					PlayerPlayAnimation( 'attack_fast_01_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack -= combo_counter_imlerith_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_2 = RandDifferent(this.previous_imlerith_attack_index_2 , 13);

				switch (imlerith_attack_index_2) 
				{		
					/*
					case 16:
					PlayerPlayAnimation( 'hit_guard_attack_right_45_imlerith_ACS');
					break;
					
					case 15:
					PlayerPlayAnimation( 'hit_guard_attack_left_45_imlerith_ACS');
					break;

					case 14:
					PlayerPlayAnimation( 'attack_idle_right_45_imlerith_ACS');
					break;

					case 13:
					PlayerPlayAnimation( 'attack_idle_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 11:
					PlayerPlayAnimation( 'attack_idle_backhandturn_right_45_imlerith_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'attack_idle_backhandturn_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 8:
					PlayerPlayAnimation( 'attack_guard_right_45_imlerith_ACS');
					break;
						
					case 7:
					PlayerPlayAnimation( 'attack_guard_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 5:
					PlayerPlayAnimation( 'attack_counter_right_45_imlerith_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_counter_left_45_imlerith_ACS');
					break;
					*/

					case 12:
					Shrink_Geralt(1.49999970000006);
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');
					break;

					case 11:
					Shrink_Geralt(0.909999940000012);
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');
					break;
					
					case 10:
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');
					break;
					
					case 9:
					Shrink_Geralt(2.5);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
					break;
					
					case 8:
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');
					break;
					
					case 7:
					Shrink_Geralt(2.85);
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');
					break;

					case 6:
					Shrink_Geralt(1.009999520000096);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
					break;

					case 5:
					Shrink_Geralt(0.759999760000048);
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
					break;

					case 4:
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
					break;

					case 3:
					Shrink_Geralt(1.419999916000017);
					PlayerPlayAnimation( 'attack_front_03_ACS');
					break;
					
					case 2:
					Shrink_Geralt(1.779999844000031);
					PlayerPlayAnimation( 'attack_front_02_ACS');
					break;
					
					case 1:
					Shrink_Geralt(1.059999760000048);
					PlayerPlayAnimation( 'attack_fast_03_ACS');
					break;
					
					default:
					Shrink_Geralt(0.2599999880000024);
					PlayerPlayAnimation( 'attack_fast_01_ACS');
					break;
				}

				this.previous_imlerith_attack_index_2 = imlerith_attack_index_2;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_attack == 0)
				{
					Shrink_Geralt(1.009999520000096);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 1)
				{
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 2)
				{
					Shrink_Geralt(2.85);
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}
				else if (combo_counter_imlerith_attack == 3)
				{
					Shrink_Geralt(1.49999970000006);
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 4)
				{
					Shrink_Geralt(0.759999760000048);
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 5)
				{
					Shrink_Geralt(0.909999940000012);
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 6)
				{
					Shrink_Geralt(2.5);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 7)
				{
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 8)
				{
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 9)
				{
					Shrink_Geralt(1.419999916000017);
					PlayerPlayAnimation( 'attack_front_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 10)
				{
					Shrink_Geralt(1.059999760000048);
					PlayerPlayAnimation( 'attack_fast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 11)
				{
					Shrink_Geralt(1.779999844000031);
					PlayerPlayAnimation( 'attack_front_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_attack += 1;
				}

				else if (combo_counter_imlerith_attack == 12)
				{
					Shrink_Geralt(0.2599999880000024);
					PlayerPlayAnimation( 'attack_fast_01_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_attack -= combo_counter_imlerith_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_3 = RandDifferent(this.previous_imlerith_attack_index_3 , 13);

				switch (imlerith_attack_index_3) 
				{	
					/*
					case 16:
					PlayerPlayAnimation( 'hit_guard_attack_right_45_imlerith_ACS');
					break;
					
					case 15:
					PlayerPlayAnimation( 'hit_guard_attack_left_45_imlerith_ACS');
					break;

					case 14:
					PlayerPlayAnimation( 'attack_idle_right_45_imlerith_ACS');
					break;

					case 13:
					PlayerPlayAnimation( 'attack_idle_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 11:
					PlayerPlayAnimation( 'attack_idle_backhandturn_right_45_imlerith_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'attack_idle_backhandturn_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 8:
					PlayerPlayAnimation( 'attack_guard_right_45_imlerith_ACS');
					break;
						
					case 7:
					PlayerPlayAnimation( 'attack_guard_left_45_imlerith_ACS');
					break;
					*/
					
					/*
					case 5:
					PlayerPlayAnimation( 'attack_counter_right_45_imlerith_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_counter_left_45_imlerith_ACS');
					break;
					*/

					case 12:
					Shrink_Geralt(1.49999970000006);
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');
					break;

					case 11:
					Shrink_Geralt(0.909999940000012);
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');
					break;
					
					case 10:
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');
					break;
					
					case 9:
					Shrink_Geralt(2.5);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
					break;
					
					case 8:
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');
					break;
					
					case 7:
					Shrink_Geralt(2.85);
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');
					break;

					case 6:
					Shrink_Geralt(1.009999520000096);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
					break;

					case 5:
					Shrink_Geralt(0.759999760000048);
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
					break;

					case 4:
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
					break;

					case 3:
					Shrink_Geralt(1.419999916000017);
					PlayerPlayAnimation( 'attack_front_03_ACS');
					break;
					
					case 2:
					Shrink_Geralt(1.779999844000031);
					PlayerPlayAnimation( 'attack_front_02_ACS');
					break;
					
					case 1:
					Shrink_Geralt(1.059999760000048);
					PlayerPlayAnimation( 'attack_fast_03_ACS');
					break;
					
					default:
					Shrink_Geralt(0.2599999880000024);
					PlayerPlayAnimation( 'attack_fast_01_ACS');
					break;
				}

				this.previous_imlerith_attack_index_3 = imlerith_attack_index_3;
			}
		}	
	}

	function geraltRandomImlerithBerserkAttack() 
	{	
		//yrden_sword_effect_around();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_berserk_attack == 0)
				{
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 1)
				{
					Shrink_Geralt(2.125);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 2)
				{
					Shrink_Geralt(1.59999940000012);
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 3)
				{
					Shrink_Geralt(1.599999640000072);
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 4)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 5)
				{
					Shrink_Geralt(1.99999940000012);
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 6)
				{
					Shrink_Geralt(1.679999664000067);
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 7)
				{
					Shrink_Geralt(2.25);
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 8)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
				
					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack -= combo_counter_imlerith_berserk_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2 * 2 ) 
				{	
					imlerith_berserk_attack_index_1 = RandDifferent(this.previous_imlerith_berserk_attack_index_1 , 6);

					switch (imlerith_berserk_attack_index_1) 
					{	
						/*						
						case 7:
						PlayerPlayAnimation( 'berserk_stuck_attack_right_imlerith_ACS');
						break;
						
						case 6:
						PlayerPlayAnimation( 'berserk_stuck_attack_left_imlerith_ACS');
						break;
						*/

						case 5:
						Shrink_Geralt(1.99999940000012);
						PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');
						break;
						
						case 4:
						Shrink_Geralt(1.599999640000072);
						PlayerPlayAnimation( 'berserk_start_imlerith_ACS');
						break;
						
						case 3:
						Shrink_Geralt(0.5);
						PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						break;		
										
						case 2:
						Shrink_Geralt(0.5);
						PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
						break;			
						
						case 1:
						Shrink_Geralt(2.25);
						PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');
						break;

						default:
						Shrink_Geralt(1.679999664000067);
						PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');
						break;		
					}
					
					this.previous_imlerith_berserk_attack_index_1 = imlerith_berserk_attack_index_1;
				}
				else
				{
					imlerith_berserk_attack_index_2 = RandDifferent(this.previous_imlerith_berserk_attack_index_2 , 3);

					switch (imlerith_berserk_attack_index_2) 
					{								
						case 2:
						Shrink_Geralt(1.59999940000012);
						PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');
						break;
						
						case 1:
						Shrink_Geralt(1.75);
						PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');
						break;
						
						default:
						Shrink_Geralt(2.125);
						PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');
						break;	
					}
					
					this.previous_imlerith_berserk_attack_index_2 = imlerith_berserk_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_berserk_attack == 0)
				{
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 1)
				{
					Shrink_Geralt(2.125);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 2)
				{
					Shrink_Geralt(1.59999940000012);
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 3)
				{
					Shrink_Geralt(1.599999640000072);
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 4)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 5)
				{
					Shrink_Geralt(1.99999940000012);
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 6)
				{
					Shrink_Geralt(1.679999664000067);
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 7)
				{
					Shrink_Geralt(2.25);
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}

				else if (combo_counter_imlerith_berserk_attack == 8)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
				
					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack -= combo_counter_imlerith_berserk_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_berserk_attack_index_3 = RandDifferent(this.previous_imlerith_berserk_attack_index_3 , 9);

				switch (imlerith_berserk_attack_index_3) 
				{	
					/*
					case 10:
					PlayerPlayAnimation( 'berserk_stuck_attack_right_imlerith_ACS');
					break;
						
					case 9:
					PlayerPlayAnimation( 'berserk_stuck_attack_left_imlerith_ACS');
					break;
					*/

					case 8:
					Shrink_Geralt(1.99999940000012);
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');
					break;
						
					case 7:
					Shrink_Geralt(1.599999640000072);
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');
					break;
						
					case 6:
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
					break;
						
					case 5:
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
					break;
					
					case 4:
					Shrink_Geralt(2.25);
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');
					break;
					
					case 3:
					Shrink_Geralt(1.679999664000067);
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');				
					break;	
						
					case 2:
					Shrink_Geralt(1.59999940000012);
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');
					break;
						
					case 1:
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');
					break;
						
					default:
					Shrink_Geralt(2.125);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');
					break;	
				}

				this.previous_imlerith_berserk_attack_index_3 = imlerith_berserk_attack_index_3;
			}
		}	
	}
	
	function geraltImlerithWalkAttack() 
	{
		//yrden_sword_effect_big();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_walk_attack == 0)
				{
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_walk_attack += 1;
				}
				else if (combo_counter_imlerith_walk_attack == 1)
				{
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_walk_attack += 1;
				}
				else if (combo_counter_imlerith_walk_attack == 2)
				{
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_walk_attack -= combo_counter_imlerith_walk_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_walk_attack_index_1 = RandDifferent(this.previous_imlerith_walk_attack_index_1 , 3);

				switch (imlerith_walk_attack_index_1) 
				{	
					case 2:
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
					break;
					
					case 1:
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
					break;
			
					default:
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');
					break;
				}

				this.previous_imlerith_walk_attack_index_1 = imlerith_walk_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_walk_attack == 0)
				{
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_walk_attack += 1;
				}
				else if (combo_counter_imlerith_walk_attack == 1)
				{
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_walk_attack += 1;
				}
				else if (combo_counter_imlerith_walk_attack == 2)
				{
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_walk_attack -= combo_counter_imlerith_walk_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_walk_attack_index_2 = RandDifferent(this.previous_imlerith_walk_attack_index_2 , 3);

				switch (imlerith_walk_attack_index_2) 
				{	
					case 2:
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
					break;
					
					case 1:
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
					break;
			
					default:
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');
					break;
				}

				this.previous_imlerith_walk_attack_index_2 = imlerith_walk_attack_index_2;
			}
		}
	}

	function geraltRandomImlerithComboAttack() 
	{
		//yrden_sword_effect_around();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_combo_attack == 0)
				{
					Shrink_Geralt(3.25);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_combo_attack += 1;
				}
				else if (combo_counter_imlerith_combo_attack == 1)
				{
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 2)
				{
					Shrink_Geralt(2.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 3)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 4)
				{
					Shrink_Geralt(2.5);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 5)
				{
					Shrink_Geralt(4);
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack -= combo_counter_imlerith_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_combo_attack_index_1 = RandDifferent(this.previous_imlerith_combo_attack_index_1 , 6);

				switch (imlerith_combo_attack_index_1) 
				{	
					/*
					case 6:
					PlayerPlayAnimation( 'berserk_attack_combo_7_attacks_01_unused_imlerith_ACS');
					break;
					*/

					case 5:
					Shrink_Geralt(3.25);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');
					break;
					
					case 4:
					Shrink_Geralt(4);
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');
					break;
					
					case 3:
					Shrink_Geralt(2.5);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');
					break;
					
					case 2:
					Shrink_Geralt(2.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					break;
					
					case 1:
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					break;

					default:
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');
					break;
					
					/*
					default:
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_02_imlerith_ACS');
					break;
					*/
				}	

				this.previous_imlerith_combo_attack_index_1 = imlerith_combo_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_combo_attack == 0)
				{
					Shrink_Geralt(3.25);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_combo_attack += 1;
				}
				else if (combo_counter_imlerith_combo_attack == 1)
				{
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 2)
				{
					Shrink_Geralt(2.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 3)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 4)
				{
					Shrink_Geralt(2.5);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack += 1;
				}

				else if (combo_counter_imlerith_combo_attack == 5)
				{
					Shrink_Geralt(4);
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_combo_attack -= combo_counter_imlerith_combo_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_combo_attack_index_2 = RandDifferent(this.previous_imlerith_combo_attack_index_2 , 6);

				switch (imlerith_combo_attack_index_2) 
				{	
					/*
					case 6:
					PlayerPlayAnimation( 'berserk_attack_combo_7_attacks_01_unused_imlerith_ACS');
					break;
					*/

					case 5:
					Shrink_Geralt(3.25);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');
					break;
					
					case 4:
					Shrink_Geralt(4);
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');
					break;
					
					case 3:
					Shrink_Geralt(2.5);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS'); // OK
					break;
					
					case 2:
					Shrink_Geralt(2.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					break;
					
					case 1:
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					break;

					default:
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');
					break;
					
					/*
					default:
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_02_imlerith_ACS');
					break;
					*/
				}	
				
				this.previous_imlerith_combo_attack_index_2 = imlerith_combo_attack_index_2;
			}
		}	
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomImlerithHeavyAttackAlt()
	{
		//yrden_sword_effect_big();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_heavy_attack_alt == 0)
				{
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}
				else if (combo_counter_imlerith_heavy_attack_alt == 1)
				{
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 2)
				{
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 3)
				{
					Shrink_Geralt(1.419999916000017);
					PlayerPlayAnimation( 'attack_front_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 4)
				{
					Shrink_Geralt(1.779999844000031);
					PlayerPlayAnimation( 'attack_front_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 5)
				{
					Shrink_Geralt(0.759999760000048);
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 6)
				{
					Shrink_Geralt(1.009999520000096);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 7)
				{
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 8)
				{
					Shrink_Geralt(0.2599999880000024);
					PlayerPlayAnimation( 'attack_fast_01_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 9)
				{
					Shrink_Geralt(1.059999760000048);
					PlayerPlayAnimation( 'attack_fast_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt -= combo_counter_imlerith_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2 * 2 ) 
				{	
					imlerith_attack_index_1 = RandDifferent(this.previous_imlerith_attack_index_1 , 5);

					switch (imlerith_attack_index_1) 
					{					
						case 4:
						Shrink_Geralt(0.759999760000048);
						PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
						break;
							
						case 3:
						Shrink_Geralt(1.009999520000096);
						ACS_Yrden_Sidearm_Summon();
						PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
						break;
						
						case 2:
						Shrink_Geralt(1.009999520000096);
						PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
						break;
						
						case 1:
						Shrink_Geralt(1.059999760000048);
						PlayerPlayAnimation( 'attack_fast_03_ACS');
						break;
						
						default:
						Shrink_Geralt(0.2599999880000024);
						PlayerPlayAnimation( 'attack_fast_01_ACS');
						break;
					}

					this.previous_imlerith_attack_index_1 = imlerith_attack_index_1;
				}
				else
				{
					imlerith_attack_index_2 = RandDifferent(this.previous_imlerith_attack_index_2 , 5);

					switch (imlerith_attack_index_2) 
					{	
						case 4:
						Shrink_Geralt(1.419999916000017);
						PlayerPlayAnimation( 'attack_front_03_ACS');
						break;
						
						case 3:
						Shrink_Geralt(1.779999844000031);
						PlayerPlayAnimation( 'attack_front_02_ACS');
						break;
						
						case 2:
						Shrink_Geralt(1.5);
						PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
						break;
						
						case 1:
						Shrink_Geralt(3.25);
						PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
						break;
				
						default:
						Shrink_Geralt(3.25);
						PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');
						break;
					}

					this.previous_imlerith_attack_index_2 = imlerith_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_heavy_attack_alt == 0)
				{
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}
				else if (combo_counter_imlerith_heavy_attack_alt == 1)
				{
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 2)
				{
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 3)
				{
					Shrink_Geralt(1.419999916000017);
					PlayerPlayAnimation( 'attack_front_03_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 4)
				{
					Shrink_Geralt(1.779999844000031);
					PlayerPlayAnimation( 'attack_front_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 5)
				{
					Shrink_Geralt(0.759999760000048);
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 6)
				{
					Shrink_Geralt(1.009999520000096);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 7)
				{
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 8)
				{
					Shrink_Geralt(0.2599999880000024);
					PlayerPlayAnimation( 'attack_fast_01_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt += 1;
				}

				else if (combo_counter_imlerith_heavy_attack_alt == 9)
				{
					Shrink_Geralt(1.059999760000048);
					PlayerPlayAnimation( 'attack_fast_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack_alt -= combo_counter_imlerith_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_3 = RandDifferent(this.previous_imlerith_attack_index_3 , 10);

				switch (imlerith_attack_index_3) 
				{	
					case 9:
					Shrink_Geralt(1.5);
					PlayerPlayAnimation( 'walk_attack_rightfoot_forward_01_imlerith_ACS');
					break;
						
					case 8:
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_02_imlerith_ACS');
					break;
				
					case 7:
					Shrink_Geralt(3.25);
					PlayerPlayAnimation( 'walk_attack_leftfoot_forward_01_imlerith_ACS');
					break;
						
					case 6:
					Shrink_Geralt(0.759999760000048);
					PlayerPlayAnimation( 'attack_idle_backhandturn_forward_imlerith_ACS');
					break;
					
					case 5:
					Shrink_Geralt(1.009999520000096);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_idle_forward_imlerith_ACS');
					break;
					
					case 4:
					Shrink_Geralt(1.009999520000096);
					PlayerPlayAnimation( 'attack_guard_forward_imlerith_ACS');
					break;
					
					case 3:
					Shrink_Geralt(1.059999760000048);
					PlayerPlayAnimation( 'attack_fast_03_ACS');
					break;
					
					case 2:
					Shrink_Geralt(0.2599999880000024);
					PlayerPlayAnimation( 'attack_fast_01_ACS');
					break;
					
					case 1:
					Shrink_Geralt(1.419999916000017);
					PlayerPlayAnimation( 'attack_front_03_ACS');
					break;
					
					default:
					Shrink_Geralt(1.779999844000031);
					PlayerPlayAnimation( 'attack_front_02_ACS');
					break;
				}

				this.previous_imlerith_attack_index_3 = imlerith_attack_index_3;
			}
		}
	}
	
	function geraltRandomImlerithHeavyAttack()
	{	
		//yrden_sword_effect_big();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_heavy_attack == 0)
				{
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_heavy_attack += 1;
				}
				else if (combo_counter_imlerith_heavy_attack == 1)
				{
					Shrink_Geralt(2.5);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack += 1;
				}

				else if (combo_counter_imlerith_heavy_attack == 2)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack -= combo_counter_imlerith_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.5 * 2.5 ) 
				{	
					/*
					imlerith_attack_index_1 = RandDifferent(this.previous_imlerith_attack_index_1 , 2);

					switch (imlerith_attack_index_1) 
					{	
									
						case 7:
						PlayerPlayAnimation( 'attack_counter_right_45_imlerith_ACS');
						break;
						
						case 6:
						PlayerPlayAnimation( 'attack_counter_left_45_imlerith_ACS');
						break;
						
						case 5:
						PlayerPlayAnimation( 'attack_idle_right_45_imlerith_ACS');
						break;
						
						case 4:
						PlayerPlayAnimation( 'attack_idle_left_45_imlerith_ACS');
						break;
							
						case 3:
						PlayerPlayAnimation( 'attack_idle_backhandturn_right_45_imlerith_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'attack_idle_backhandturn_left_45_imlerith_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'attack_guard_right_45_imlerith_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_guard_left_45_imlerith_ACS');
						break;
						

						case 1:
						PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
						break;
					}

					this.previous_imlerith_attack_index_1 = imlerith_attack_index_1;
					*/

					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
				}
				else
				{
					//PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');

					imlerith_attack_index_2 = RandDifferent(this.previous_imlerith_attack_index_2 , 2);

					switch (imlerith_attack_index_2) 
					{	
						case 1:
						Shrink_Geralt(1.799999640000072);
						ACS_Yrden_Sidearm_Summon();
						PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');
						break;
						
						default:
						Shrink_Geralt(2.5);
						ACS_Yrden_Sidearm_Summon();
						PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
						break;
					}

					this.previous_imlerith_attack_index_2 = imlerith_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_heavy_attack == 0)
				{
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_heavy_attack += 1;
				}
				else if (combo_counter_imlerith_heavy_attack == 1)
				{
					Shrink_Geralt(2.5);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack += 1;
				}

				else if (combo_counter_imlerith_heavy_attack == 2)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_heavy_attack -= combo_counter_imlerith_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_3 = RandDifferent(this.previous_imlerith_attack_index_3 , 10);

				switch (imlerith_attack_index_3) 
				{	
					/*
					case 9:
					PlayerPlayAnimation( 'attack_counter_right_45_imlerith_ACS');
					break;
					
					case 8:
					PlayerPlayAnimation( 'attack_counter_left_45_imlerith_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'attack_idle_right_45_imlerith_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'attack_idle_left_45_imlerith_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'attack_idle_backhandturn_right_45_imlerith_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'attack_idle_backhandturn_left_45_imlerith_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'attack_guard_right_45_imlerith_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'attack_guard_left_45_imlerith_ACS');
					break;
					*/
					
					case 2:
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_imlerith_ACS');
					break;
					
					case 1:
					Shrink_Geralt(2.5);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_swing_shield_swing_imlerith_ACS');
					break;

					default:
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'attack_heavy_1_caretaker_ACS');
					break;
				}

				this.previous_imlerith_attack_index_3 = imlerith_attack_index_3;
			}
		}
	}
	
	function geraltRandomImlerithLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_light_attack == 0)
				{
					Shrink_Geralt(1.49999970000006);
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_light_attack += 1;
				}
				else if (combo_counter_imlerith_light_attack == 1)
				{
					Shrink_Geralt(0.909999940000012);
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack += 1;
				}

				else if (combo_counter_imlerith_light_attack == 2)
				{
					Shrink_Geralt(2.85);
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack += 1;
				}

				else if (combo_counter_imlerith_light_attack == 3)
				{
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack -= combo_counter_imlerith_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_1 = RandDifferent(this.previous_imlerith_attack_index_1 , 4);

				switch (imlerith_attack_index_1) 
				{					
					case 3:
					Shrink_Geralt(1.49999970000006);
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');
					break;
					
					/*
					case 4:
					PlayerPlayAnimation( 'hit_guard_attack_left_45_imlerith_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'hit_guard_attack_right_45_imlerith_ACS');
					break;
					*/

					case 2:
					Shrink_Geralt(2.85);
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');
					break;
					
					case 1:
					Shrink_Geralt(0.909999940000012);
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');
					break;
					
					default:
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');
					break;
				}

				this.previous_imlerith_attack_index_1 = imlerith_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_light_attack == 0)
				{
					Shrink_Geralt(1.49999970000006);
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_light_attack += 1;
				}
				else if (combo_counter_imlerith_light_attack == 1)
				{
					Shrink_Geralt(0.909999940000012);
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack += 1;
				}

				else if (combo_counter_imlerith_light_attack == 2)
				{
					Shrink_Geralt(2.85);
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack += 1;
				}

				else if (combo_counter_imlerith_light_attack == 3)
				{
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_light_attack -= combo_counter_imlerith_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_attack_index_3 = RandDifferent(this.previous_imlerith_attack_index_3 , 4);

				switch (imlerith_attack_index_3) 
				{	
					case 3:
					Shrink_Geralt(1.49999970000006);
					PlayerPlayAnimation( 'hit_guard_attack_forward_imlerith_ACS');
					break;
					
					/*
					case 4:
					PlayerPlayAnimation( 'hit_guard_attack_left_45_imlerith_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'hit_guard_attack_right_45_imlerith_ACS');
					break;
					*/

					case 2:
					Shrink_Geralt(2.85);
					PlayerPlayAnimation( 'taunt_after_death_imlerith_ACS');
					break;
					
					case 1:
					Shrink_Geralt(0.909999940000012);
					PlayerPlayAnimation( 'attack_shield_thrust_imlerith_ACS');
					break;
					
					default:
					Shrink_Geralt(1.799999640000072);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_thrust_shield_imlerith_ACS');
					break;
				}

				this.previous_imlerith_attack_index_3 = imlerith_attack_index_3;
			}
		}
	}
	
	function geraltRandomImlerithSpecialAttackAlt()
	{
		//yrden_sword_effect_around();

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_berserk_attack == 0)
				{
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 1)
				{
					Shrink_Geralt(2.125);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack_alt == 2)
				{
					Shrink_Geralt(1.59999940000012);
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}
				else if (combo_counter_imlerith_special_attack_alt == 3)
				{
					Shrink_Geralt(1.599999640000072);
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 4)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 5)
				{
					Shrink_Geralt(1.99999940000012);
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 6)
				{
					Shrink_Geralt(1.679999664000067);
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 7)
				{
					Shrink_Geralt(2.25);
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt -= combo_counter_imlerith_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3.5 * 3.5 ) 
				{	
					imlerith_berserk_attack_index_1 = RandDifferent(this.previous_imlerith_berserk_attack_index_1 , 5);

					switch (imlerith_berserk_attack_index_1) 
					{	
						/*						
						case 7:
						PlayerPlayAnimation( 'berserk_stuck_attack_right_imlerith_ACS');
						break;
						
						case 6:
						PlayerPlayAnimation( 'berserk_stuck_attack_left_imlerith_ACS');
						break;
						*/

						case 4:
						Shrink_Geralt(1.99999940000012);
						PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');
						break;
						
						case 3:
						Shrink_Geralt(1.599999640000072);
						PlayerPlayAnimation( 'berserk_start_imlerith_ACS');
						break;
						
						case 2:
						Shrink_Geralt(0.5);
						PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						break;				
						
						case 1:
						Shrink_Geralt(2.25);
						PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');
						break;

						default:
						Shrink_Geralt(1.679999664000067);
						PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');
						break;		
					}
					
					this.previous_imlerith_berserk_attack_index_1 = imlerith_berserk_attack_index_1;
				}
				else
				{
					imlerith_berserk_attack_index_2 = RandDifferent(this.previous_imlerith_berserk_attack_index_2 , 3);

					switch (imlerith_berserk_attack_index_2) 
					{								
						case 2:
						Shrink_Geralt(1.59999940000012);
						PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');
						break;
						
						case 1:
						Shrink_Geralt(1.75);
						PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');
						break;
						
						default:
						Shrink_Geralt(2.125);
						PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');
						break;	
					}
					
					this.previous_imlerith_berserk_attack_index_2 = imlerith_berserk_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_berserk_attack == 0)
				{
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_berserk_attack == 1)
				{
					Shrink_Geralt(2.125);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_berserk_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack_alt == 2)
				{
					Shrink_Geralt(1.59999940000012);
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}
				else if (combo_counter_imlerith_special_attack_alt == 3)
				{
					Shrink_Geralt(1.599999640000072);
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 4)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
						
					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 5)
				{
					Shrink_Geralt(1.99999940000012);
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 6)
				{
					Shrink_Geralt(1.679999664000067);
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt += 1;
				}

				else if (combo_counter_imlerith_special_attack_alt == 7)
				{
					Shrink_Geralt(2.25);
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack_alt -= combo_counter_imlerith_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_berserk_attack_index_3 = RandDifferent(this.previous_imlerith_berserk_attack_index_3 , 8);

				switch (imlerith_berserk_attack_index_3) 
				{	
					/*
					case 10:
					PlayerPlayAnimation( 'berserk_stuck_attack_right_imlerith_ACS');
					break;
						
					case 9:
					PlayerPlayAnimation( 'berserk_stuck_attack_left_imlerith_ACS');
					break;
					*/

					case 7:
					Shrink_Geralt(1.99999940000012);
					PlayerPlayAnimation( 'berserk_stuck_attack_forward_imlerith_ACS');
					break;
						
					case 6:
					Shrink_Geralt(1.599999640000072);
					PlayerPlayAnimation( 'berserk_start_imlerith_ACS');
					break;
						
					case 5:
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_stuck_imlerith_ACS');
					break;
					
					case 4:
					Shrink_Geralt(2.25);
					PlayerPlayAnimation( 'berserk_attack_single_02_imlerith_ACS');
					break;
					
					case 3:
					Shrink_Geralt(1.679999664000067);
					PlayerPlayAnimation( 'berserk_attack_single_01_imlerith_ACS');				
					break;	
						
					case 2:
					Shrink_Geralt(1.59999940000012);
					PlayerPlayAnimation( 'attack_tornado_01_unused_imlerith_ACS');
					break;
						
					case 1:
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_02_imlerith_ACS');
					break;
						
					default:
					Shrink_Geralt(2.125);
					PlayerPlayAnimation( 'berserk_attack_whirlwind_01_imlerith_ACS');
					break;	
				}

				this.previous_imlerith_berserk_attack_index_3 = imlerith_berserk_attack_index_3;
			}
		}
	}
	
	function geraltRandomImlerithSpecialAttack()
	{
		//yrden_sword_effect_around();;

		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_special_attack == 0)
				{
					Shrink_Geralt(3.25);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 1)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 2)
				{
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 3)
				{
					Shrink_Geralt(2.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}

				else if (combo_counter_imlerith_special_attack == 4)
				{
					Shrink_Geralt(2.5);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}

				else if (combo_counter_imlerith_special_attack == 5)
				{
					Shrink_Geralt(4);
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack -= combo_counter_imlerith_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_combo_attack_index_1 = RandDifferent(this.previous_imlerith_combo_attack_index_1 , 6);

				switch (imlerith_combo_attack_index_1) 
				{	
					/*
					case 6:
					PlayerPlayAnimation( 'berserk_attack_combo_7_attacks_01_unused_imlerith_ACS');
					break;
					*/

					case 5:
					Shrink_Geralt(3.25);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');
					break;
					
					case 4:
					Shrink_Geralt(4);
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');
					break;
					
					case 3:
					Shrink_Geralt(2.5);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');
					break;
					
					case 2:
					Shrink_Geralt(2.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					break;
					
					case 1:
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					break;

					default:
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');
					break;
					
					/*
					default:
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_02_imlerith_ACS');
					break;
					*/
				}	
				
				this.previous_imlerith_combo_attack_index_1 = imlerith_combo_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_imlerith_special_attack == 0)
				{
					Shrink_Geralt(3.25);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 1)
				{
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 2)
				{
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}
				else if (combo_counter_imlerith_special_attack == 3)
				{
					Shrink_Geralt(2.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					
					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}

				else if (combo_counter_imlerith_special_attack == 4)
				{
					Shrink_Geralt(2.5);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack += 1;
				}

				else if (combo_counter_imlerith_special_attack == 5)
				{
					Shrink_Geralt(4);
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');

					combo_counter_damage += 1;

					combo_counter_imlerith_special_attack -= combo_counter_imlerith_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				imlerith_combo_attack_index_2 = RandDifferent(this.previous_imlerith_combo_attack_index_2 , 6);

				switch (imlerith_combo_attack_index_2) 
				{	
					/*
					case 6:
					PlayerPlayAnimation( 'berserk_attack_combo_7_attacks_01_unused_imlerith_ACS');
					break;
					*/

					case 5:
					Shrink_Geralt(3.25);
					ACS_Yrden_Sidearm_Summon();
					PlayerPlayAnimation( 'attack_combo_01_imlerith_ACS');
					break;
					
					case 4:
					Shrink_Geralt(4);
					PlayerPlayAnimation( 'berserk_attack_combo_4_attacks_01_imlerith_ACS');
					break;
					
					case 3:
					Shrink_Geralt(2.5);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_03_imlerith_ACS');
					break;
					
					case 2:
					Shrink_Geralt(2.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_02_imlerith_ACS');
					break;
					
					case 1:
					Shrink_Geralt(1.75);
					PlayerPlayAnimation( 'berserk_attack_combo_3_attacks_01_imlerith_ACS');
					break;

					default:
					Shrink_Geralt(0.5);
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_03_imlerith_ACS');
					break;
					
					/*
					default:
					PlayerPlayAnimation( 'berserk_attack_combo_2_attacks_02_imlerith_ACS');
					break;
					*/
				}	
				
				this.previous_imlerith_combo_attack_index_2 = imlerith_combo_attack_index_2;
			}
		}
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Spear Attack Stuff

	function SetSpearWhirlProcess( flag : bool )
	{
		ACS_SpearWhirlProcess = flag;
	}

	timer function SpearAttackRepeatWhirl(deltaTime : float , id : int)
	{
		geraltRandomSpearAttackAlt();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	
					
		if (thePlayer.IsGuarded()||thePlayer.HasBuff(EET_SlowdownFrost)||thePlayer.HasBuff(EET_Slowdown)||thePlayer.HasBuff(EET_Blizzard)){thePlayer.SetAnimationSpeedMultiplier( 1  ); }else{thePlayer.SetAnimationSpeedMultiplier(1.75  ); }	

		RemoveTimer('ACS_ResetAnimation');				

		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.5  , false);	

		if (!ACS_SpearWhirlProcess)
		{
			PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');

			SetSpearWhirlProcess(true);
		}
		else
		{
			PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');

			SetSpearWhirlProcess(false);
		}

		ACS_StaminaDrain(3);
	}
	
	function geraltRandomSpearAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 8)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 10)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 11)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack -= combo_counter_spear_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.5*2.5 ) 
				{	
					spear_attack_index_1 = RandDifferent(this.previous_spear_attack_index_1 , 5);

					switch (spear_attack_index_1) 
					{	
						case 4:
						PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');
						break;
					
						case 2:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');
						break;
					}
			
					this.previous_spear_attack_index_1 = spear_attack_index_1;
				}
				else
				{
					spear_attack_index_2 = RandDifferent(this.previous_spear_attack_index_2 , 7);

					switch (spear_attack_index_2) 
					{						
						case 6:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
						break;
						
						case 5:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
						break;
						
						case 4:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
						break;
					
						case 2:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');
						break;
					}
					
					this.previous_spear_attack_index_2 = spear_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}
				else if (combo_counter_spear_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 8)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 10)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack += 1;
				}

				else if (combo_counter_spear_attack == 11)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack -= combo_counter_spear_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_index_3 = RandDifferent(this.previous_spear_attack_index_3 , 12);

				switch (spear_attack_index_3) 
				{	
					case 11:
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');
					break;
						
					case 10:
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');
					break;
						
					case 9:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
					break;
						
					case 8:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
					break;
						
					case 7:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
					break;
						
					case 6:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_index_3 = spear_attack_index_3;
			}
		}	
	}
	
	function geraltRandomSpearAttackAlt() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt -= combo_counter_spear_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.5*2.5 ) 
				{	
					spear_attack_alt_index_1 = RandDifferent(this.previous_spear_attack_alt_index_1 , 7);

					switch (spear_attack_alt_index_1) 
					{	
						case 6:
						PlayerPlayAnimation( 'man_mage_lightning_01_ACS');
						break;	
						
						case 5:
						PlayerPlayAnimation( 'man_mage_lightning_02_ACS');
						break;	
						
						case 4:
						PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
						break;	
						
						case 3:
						PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');
						break;
					
						case 1:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
						break;
						
						default:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
						break;
					}
			
					this.previous_spear_attack_alt_index_1 = spear_attack_alt_index_1;
				}
				else
				{
					spear_attack_alt_index_2 = RandDifferent(this.previous_spear_attack_alt_index_2 , 2);

					switch (spear_attack_alt_index_2) 
					{
						case 1:
						PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');
						break;		
						
						default:
						PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
						break;					
					}
					
					this.previous_spear_attack_alt_index_2 = spear_attack_alt_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}
				else if (combo_counter_spear_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt += 1;
				}

				else if (combo_counter_spear_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_attack_alt -= combo_counter_spear_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_alt_index_3 = RandDifferent(this.previous_spear_attack_alt_index_3 , 9);

				switch (spear_attack_alt_index_3) 
				{	
					case 8:
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					break;
						
					case 7:
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');
					break;	
						
					case 6:
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');
					break;	
						
					case 5:
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
					break;	
						
					case 4:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_alt_index_3 = spear_attack_alt_index_3;
			}
		}		
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomSpearLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt -= combo_counter_spear_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3.5 * 3.5 ) 
				{	
					spear_attack_index_1 = RandDifferent(this.previous_spear_attack_index_1 , 2);

					switch (spear_attack_index_1) 
					{	
						case 1:
						PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');
						break;
					}
			
					this.previous_spear_attack_index_1 = spear_attack_index_1;
				}
				else
				{
					spear_attack_index_2 = RandDifferent(this.previous_spear_attack_index_2 , 2);

					switch (spear_attack_index_2) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');
						break;
					}
					
					this.previous_spear_attack_index_2 = spear_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt += 1;
				}
				else if (combo_counter_spear_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack_alt -= combo_counter_spear_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_index_3 = RandDifferent(this.previous_spear_attack_index_3 , 4);

				switch (spear_attack_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_mage_fireball_02_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_mage_melee_attack_02_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_mage_melee_attack_01_ACS');
					break;
				}
				
				this.previous_spear_attack_index_3 = spear_attack_index_3;
			}
		}	
	}
	
	function geraltRandomSpearLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_light_attack += 1;
				}
				else if (combo_counter_spear_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack -= combo_counter_spear_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.75 * 1.75 ) 
				{		
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
				}
				else
				{
					spear_attack_index_2 = RandDifferent(this.previous_spear_attack_index_2 , 4);

					switch (spear_attack_index_2) 
					{	
						case 3:
						PlayerPlayAnimation( 'man_mage_lightning_01_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');
						break;
					}
					
					this.previous_spear_attack_index_2 = spear_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_light_attack += 1;
				}
				else if (combo_counter_spear_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_light_attack += 1;
				}

				else if (combo_counter_spear_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_light_attack -= combo_counter_spear_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_index_3 = RandDifferent(this.previous_spear_attack_index_3 , 5);

				switch (spear_attack_index_3) 
				{	
					case 4:
					PlayerPlayAnimation( 'man_mage_lightning_01_ACS');
					break;
						
					case 3:
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_01_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_index_3 = spear_attack_index_3;
			}
		}	
	}
	
	function geraltRandomSpearHeavyAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_heavy_attack_alt += 1;
				}
				else if (combo_counter_spear_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack_alt += 1;
				}
				else if (combo_counter_spear_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack_alt -= combo_counter_spear_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3.5 * 3.5 ) 
				{	
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
				}
				else
				{
					spear_attack_index_2 = RandDifferent(this.previous_spear_attack_index_2 , 2);

					switch (spear_attack_index_2) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
						break;
					}
					
					this.previous_spear_attack_index_2 = spear_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_heavy_attack_alt += 1;
				}
				else if (combo_counter_spear_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack_alt += 1;
				}
				else if (combo_counter_spear_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack_alt -= combo_counter_spear_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_index_3 = RandDifferent(this.previous_spear_attack_index_3 , 3);

				switch (spear_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_02_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_04_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_01_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_index_3 = spear_attack_index_3;
			}
		}
	}
	
	function geraltRandomSpearHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_heavy_attack += 1;
				}
				else if (combo_counter_spear_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack += 1;
				}
				else if (combo_counter_spear_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack -= combo_counter_spear_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 3.5 * 3.5 ) 
				{	
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
				}
				else
				{
					spear_attack_index_2 = RandDifferent(this.previous_spear_attack_index_2 , 2);

					switch (spear_attack_index_2) 
					{						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
						break;
					}
					
					this.previous_spear_attack_index_2 = spear_attack_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_heavy_attack += 1;
				}
				else if (combo_counter_spear_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack += 1;
				}
				else if (combo_counter_spear_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_heavy_attack -= combo_counter_spear_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_index_3 = RandDifferent(this.previous_spear_attack_index_3 , 3);

				switch (spear_attack_index_3) 
				{	
					case 2:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_03_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hspear_attack_special_02_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_index_3 = spear_attack_index_3;
			}
		}	
	}
	
	function geraltRandomSpearSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			AddTimer('SpearAttackRepeatWhirl', 1.25, true);

			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_special_attack_alt += 1;
				}
				else if (combo_counter_spear_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack_alt += 1;
				}
				else if (combo_counter_spear_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_special_attack_alt -= combo_counter_spear_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.5*2.5 ) 
				{	
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');
				}
				else
				{
					spear_attack_alt_index_2 = RandDifferent(this.previous_spear_attack_alt_index_2 , 2);

					switch (spear_attack_alt_index_2) 
					{
						case 1:
						PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');
						break;		
						
						default:
						PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
						break;					
					}
					
					this.previous_spear_attack_alt_index_2 = spear_attack_alt_index_2;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}

			AddTimer('SpearAttackRepeatWhirl', 1.25, true);
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_special_attack_alt += 1;
				}
				else if (combo_counter_spear_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack_alt += 1;
				}
				else if (combo_counter_spear_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_special_attack_alt -= combo_counter_spear_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_alt_index_3 = RandDifferent(this.previous_spear_attack_alt_index_3 , 3);

				switch (spear_attack_alt_index_3) 
				{		
					case 2:
					PlayerPlayAnimation( 'man_mage_lightning_02_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_mage_melee_attack_04_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_mage_melee_attack_03_ACS');
					break;
				}
				
				this.previous_spear_attack_alt_index_3 = spear_attack_alt_index_3;
			}
		}
	}
	
	function geraltRandomSpearSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_special_attack += 1;
				}
				else if (combo_counter_spear_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack += 1;
				}

				else if (combo_counter_spear_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack += 1;
				}

				else if (combo_counter_spear_special_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_special_attack -= combo_counter_spear_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 2.5*2.5 ) 
				{	
					spear_attack_index_1 = RandDifferent(this.previous_spear_attack_index_1 , 5);

					switch (spear_attack_index_1) 
					{	
						case 2:
						PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
						break;
					}
			
					this.previous_spear_attack_index_1 = spear_attack_index_1;
				}
				else
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_spear_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_spear_special_attack += 1;
				}
				else if (combo_counter_spear_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack += 1;
				}

				else if (combo_counter_spear_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_spear_special_attack += 1;
				}

				else if (combo_counter_spear_special_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_spear_special_attack -= combo_counter_spear_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				spear_attack_alt_index_3 = RandDifferent(this.previous_spear_attack_alt_index_3 , 4);

				switch (spear_attack_alt_index_3) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_mage_force_blast_03_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
					break;
				}
				
				this.previous_spear_attack_alt_index_3 = spear_attack_alt_index_3;
			}
		}	
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Hammer Attack Stuff
	
	function geraltRandomHammerAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_attack += 1;
				}
				else if (combo_counter_hammer_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack += 1;
				}
				else if (combo_counter_hammer_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack -= combo_counter_hammer_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 3);

				switch (hammer_attack_index_1) 
				{								
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_attack += 1;
				}
				else if (combo_counter_hammer_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack += 1;
				}
				else if (combo_counter_hammer_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack -= combo_counter_hammer_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 3);

				switch (hammer_attack_index_1) 
				{								
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}	
	}
	
	function geraltRandomHammerSpecialAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_attack_alt += 1;
				}
				else if (combo_counter_hammer_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack_alt += 1;
				}
				else if (combo_counter_hammer_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack_alt -= combo_counter_hammer_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_1 = RandDifferent(this.previous_hammer_attack_alt_index_1 , 3);

				switch (hammer_attack_alt_index_1) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_alt_index_1 = hammer_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_attack_alt += 1;
				}
				else if (combo_counter_hammer_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack_alt += 1;
				}
				else if (combo_counter_hammer_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_attack_alt -= combo_counter_hammer_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_2 = RandDifferent(this.previous_hammer_attack_alt_index_2 , 3);

				switch (hammer_attack_alt_index_2) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_alt_index_2 = hammer_attack_alt_index_2;
			}
		}				
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomMaceAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt -= combo_counter_hammer_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');
					break;
				}

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt -= combo_counter_hammer_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomMaceAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack -= combo_counter_hammer_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack -= combo_counter_hammer_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomGiantAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt -= combo_counter_hammer_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_1 = RandDifferent(this.previous_hammer_attack_alt_index_1 , 3);

				switch (hammer_attack_alt_index_1) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}	

				this.previous_hammer_attack_alt_index_1 = hammer_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt -= combo_counter_hammer_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_2 = RandDifferent(this.previous_hammer_attack_alt_index_2 , 3);

				switch (hammer_attack_alt_index_2) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_2 = hammer_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomGiantAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack -= combo_counter_hammer_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_1 = RandDifferent(this.previous_hammer_attack_alt_index_1 , 3);

				switch (hammer_attack_alt_index_1) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_1 = hammer_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack -= combo_counter_hammer_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_2 = RandDifferent(this.previous_hammer_attack_alt_index_2 , 3);

				switch (hammer_attack_alt_index_2) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_2 = hammer_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomGiantSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt -= combo_counter_hammer_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt -= combo_counter_hammer_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomGiantSpecialAttack()
	{			
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack += 1;
				}

				else if (combo_counter_hammer_special_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack -= combo_counter_hammer_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack += 1;
				}

				else if (combo_counter_hammer_special_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack -= combo_counter_hammer_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Mace Attack Stuff
	
	function geraltRandomMaceLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt -= combo_counter_hammer_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');
					break;
				}

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt += 1;
				}
				else if (combo_counter_hammer_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack_alt -= combo_counter_hammer_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_05_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_04_rp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomMaceLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack -= combo_counter_hammer_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack += 1;
				}
				else if (combo_counter_hammer_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_light_attack -= combo_counter_hammer_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomMaceHeavyAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt -= combo_counter_hammer_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_1 = RandDifferent(this.previous_hammer_attack_alt_index_1 , 3);

				switch (hammer_attack_alt_index_1) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}	

				this.previous_hammer_attack_alt_index_1 = hammer_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt += 1;
				}
				else if (combo_counter_hammer_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack_alt -= combo_counter_hammer_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_2 = RandDifferent(this.previous_hammer_attack_alt_index_2 , 3);

				switch (hammer_attack_alt_index_2) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_02_rp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_2 = hammer_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomMaceHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack -= combo_counter_hammer_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_1 = RandDifferent(this.previous_hammer_attack_alt_index_1 , 3);

				switch (hammer_attack_alt_index_1) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_1 = hammer_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack += 1;
				}
				else if (combo_counter_hammer_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_heavy_attack -= combo_counter_hammer_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_alt_index_2 = RandDifferent(this.previous_hammer_attack_alt_index_2 , 3);

				switch (hammer_attack_alt_index_2) 
				{					
					case 2:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_03_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_2hhammer_attack_01_lp_ACS');
					break;
				}

				this.previous_hammer_attack_alt_index_2 = hammer_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomMaceSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt -= combo_counter_hammer_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt += 1;
				}

				else if (combo_counter_hammer_special_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack_alt -= combo_counter_hammer_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_h_02_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	function geraltRandomMaceSpecialAttack()
	{			
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack += 1;
				}

				else if (combo_counter_hammer_special_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack -= combo_counter_hammer_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{										
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');
					break;
				}	

				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_hammer_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_hammer_special_attack += 1;
				}

				else if (combo_counter_hammer_special_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_hammer_special_attack -= combo_counter_hammer_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				hammer_attack_index_1 = RandDifferent(this.previous_hammer_attack_index_1 , 4);

				switch (hammer_attack_index_1) 
				{								
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_special_01_lp_ACS');
					break;
				}	
				
				this.previous_hammer_attack_index_1 = hammer_attack_index_1;
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Axe Attack Stuff
	
	function geraltRandom1hAxeAttack_Armiger() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack -= combo_counter_axe_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_1 = RandDifferent(this.previous_axe_attack_index_1 , 7);

				switch (axe_attack_index_1) 
				{						
					case 6:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');
					break;
				}	

				this.previous_axe_attack_index_1 = axe_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}
				else if (combo_counter_axe_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack += 1;
				}

				else if (combo_counter_axe_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack -= combo_counter_axe_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_2 = RandDifferent(this.previous_axe_attack_index_2 , 7);

				switch (axe_attack_index_2) 
				{						
					case 6:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');
					break;
				}	
				
				this.previous_axe_attack_index_2 = axe_attack_index_2;
			}
		}				
	}
	
	function geraltRandom2hAxeAttack_Armiger() 
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt -= combo_counter_axe_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_1 = RandDifferent(this.previous_axe_attack_alt_index_1 , 7);

				switch (axe_attack_alt_index_1) 
				{								
					case 6:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');
					break;
				}	

				this.previous_axe_attack_alt_index_1 = axe_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}
				else if (combo_counter_axe_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt += 1;
				}

				else if (combo_counter_axe_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_attack_alt -= combo_counter_axe_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_2 = RandDifferent(this.previous_axe_attack_alt_index_2 , 7);

				switch (axe_attack_alt_index_2) 
				{								
					case 6:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');
					break;
				}	
				
				this.previous_axe_attack_alt_index_2 = axe_attack_alt_index_2;
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandom1hAxeAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt -= combo_counter_axe_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_1 = RandDifferent(this.previous_axe_attack_index_1 , 4);

				switch (axe_attack_index_1) 
				{						
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}	

				this.previous_axe_attack_index_1 = axe_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					
					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt += 1;
				}

				else if (combo_counter_axe_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack_alt -= combo_counter_axe_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_2 = RandDifferent(this.previous_axe_attack_index_2 , 4);

				switch (axe_attack_index_2) 
				{						
					case 3:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_mace_1hand_attack_l_02_lp_ACS');
					break;
				}	
				
				this.previous_axe_attack_index_2 = axe_attack_index_2;
			}
		}	
	}
	
	function geraltRandom1hAxeAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_light_attack += 1;
				}

				else if (combo_counter_axe_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack += 1;
				}

				else if (combo_counter_axe_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack -= combo_counter_axe_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_1 = RandDifferent(this.previous_axe_attack_index_1 , 3);

				switch (axe_attack_index_1) 
				{						
					case 2:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');
					break;
				}	

				this.previous_axe_attack_index_1 = axe_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_light_attack += 1;
				}

				else if (combo_counter_axe_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack += 1;
				}

				else if (combo_counter_axe_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_light_attack -= combo_counter_axe_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_2 = RandDifferent(this.previous_axe_attack_index_2 , 3);

				switch (axe_attack_index_2) 
				{						
					case 2:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_03_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_l_01_rp_ACS');
					break;
				}	

				this.previous_axe_attack_index_2 = axe_attack_index_2;
			}
		}	
	}
	
	function geraltRandom2hAxeAttackAlt()
	{	
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_heavy_attack_alt += 1;
				}

				else if (combo_counter_axe_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack_alt += 1;
				}

				else if (combo_counter_axe_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack_alt -= combo_counter_axe_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_1 = RandDifferent(this.previous_axe_attack_alt_index_1 , 3);

				switch (axe_attack_alt_index_1) 
				{									
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');
					break;
				}

				this.previous_axe_attack_alt_index_1 = axe_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_heavy_attack_alt += 1;
				}

				else if (combo_counter_axe_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack_alt += 1;
				}

				else if (combo_counter_axe_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack_alt -= combo_counter_axe_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_2 = RandDifferent(this.previous_axe_attack_alt_index_2 , 3);

				switch (axe_attack_alt_index_2) 
				{								
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_04_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_03_lp_ACS');
					break;
				}

				this.previous_axe_attack_alt_index_2 = axe_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandom2hAxeAttack()
	{
		MovementAdjust();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack -= combo_counter_axe_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_1 = RandDifferent(this.previous_axe_attack_alt_index_1 , 4);

				switch (axe_attack_alt_index_1) 
				{									
					case 3:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');
					break;
				}

				this.previous_axe_attack_alt_index_1 = axe_attack_alt_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack += 1;
				}

				else if (combo_counter_axe_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_heavy_attack -= combo_counter_axe_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_alt_index_2 = RandDifferent(this.previous_axe_attack_alt_index_2 , 4);

				switch (axe_attack_alt_index_2) 
				{								
					case 3:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_2haxe_attack_01_lp_ACS');
					break;
				}	
				
				this.previous_axe_attack_alt_index_2 = axe_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomAxeSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_special_attack_alt += 1;
				}

				else if (combo_counter_axe_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_special_attack_alt -= combo_counter_axe_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_1 = RandDifferent(this.previous_axe_attack_index_1 , 2);

				switch (axe_attack_index_1) 
				{						
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');
					break;
					
				}	

				this.previous_axe_attack_index_1 = axe_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_special_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_special_attack_alt += 1;
				}

				else if (combo_counter_axe_special_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_special_attack_alt -= combo_counter_axe_special_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_2 = RandDifferent(this.previous_axe_attack_index_2 , 2);

				switch (axe_attack_index_2) 
				{						
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_01_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_03_rp_ACS');
					break;
				}	
				
				this.previous_axe_attack_index_2 = axe_attack_index_2;
			}
		}
	}
	
	function geraltRandomAxeSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_special_attack += 1;
				}

				else if (combo_counter_axe_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_special_attack -= combo_counter_axe_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_1 = RandDifferent(this.previous_axe_attack_index_1 , 2);

				switch (axe_attack_index_1) 
				{						
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');
					break;
					
				}	

				this.previous_axe_attack_index_1 = axe_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_axe_special_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_axe_special_attack += 1;
				}

				else if (combo_counter_axe_special_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_axe_special_attack -= combo_counter_axe_special_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				axe_attack_index_2 = RandDifferent(this.previous_axe_attack_index_2 , 2);

				switch (axe_attack_index_2) 
				{						
					case 1:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_rp_ACS');
					break;
					
					default:
					PlayerPlayAnimation( 'man_npc_axe_1hand_attack_special_02_lp_ACS');
					break;
				}	
				
				this.previous_axe_attack_index_2 = axe_attack_index_2;
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Greg Attack Stuff

	function geraltRandomGregAttack() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{	
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 8)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 9)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 10)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 11)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 12)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt -= combo_counter_greg_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5 * 1.5 ) 
				{		
					//PlayerPlayAnimation( 'gregoire_attack_punch_ACS');

					punch_index_1 = RandDifferent(this.previous_punch_index_1 , 2);

					switch (punch_index_1) 
					{														
						case 1:
						PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');
						break;
					}
						
					this.previous_punch_index_1 = punch_index_1;

					AddTimer('ACS_HeadbuttDamage', 0.5, false);
				}
				else if( targetDistance > 1.5 * 1.5 
				&& targetDistance <= 4.5*4.5 ) 
				{			
					greg_attack_alt_index_1 = RandDifferent(this.previous_greg_attack_alt_index_1 , 10);

					switch (greg_attack_alt_index_1) 
					{	
						case 9:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
						break;

						case 8:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
						break;

						case 1:
						PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
						break;
					}

					this.previous_greg_attack_alt_index_1 = greg_attack_alt_index_1;	
				}	
				else
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
				}
			}	
		}	
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}
				else if (combo_counter_greg_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 8)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 9)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 10)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 11)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt += 1;
				}

				else if (combo_counter_greg_attack_alt == 12)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage += 1;

					combo_counter_greg_attack_alt -= combo_counter_greg_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_alt_index_2 = RandDifferent(this.previous_greg_attack_alt_index_2, 11);

				switch (greg_attack_alt_index_2) 
				{	
					case 10:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					break;

					case 9:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
					break;
				}	
				
				this.previous_greg_attack_alt_index_2 = greg_attack_alt_index_2;
			}
		}
	}
	
	function geraltRandomGregAttackAlt() 
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 10)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack -= combo_counter_greg_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5*1.5 ) 
				{
					greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 7);

					switch (greg_attack_index_1) 
					{				
						case 6:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
						break;
						
						case 5:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
						break;
						
						case 4:
						PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
						break;
						
						case 3:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
						break;
					}	
					this.previous_greg_attack_index_1 = greg_attack_index_1;
				}
				else
				{
					greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 4);

					switch (greg_attack_index_1) 
					{				
						case 3:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
						break;
						
						case 2:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
						break;
						
						case 1:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
						break;
					}

					this.previous_greg_attack_index_1 = greg_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}
				else if (combo_counter_greg_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 5)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 6)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 7)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 8)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 9)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack += 1;
				}

				else if (combo_counter_greg_attack == 10)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_attack -= combo_counter_greg_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_2 = RandDifferent(this.previous_greg_attack_index_2, 12);

				switch (greg_attack_index_2) 
				{				
					case 11:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
					
					case 10:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;
					
					case 9:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
					
					case 7:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
					break;
					
					case 6:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
					break;
					
					case 5:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
					break;
					
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;
				}

				this.previous_greg_attack_index_2 = greg_attack_index_2;
			}
		}			
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function geraltRandomGregLightAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_light_attack_alt += 1;
				}
				else if (combo_counter_greg_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt += 1;
				}
				else if (combo_counter_greg_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt += 1;
				}

				else if (combo_counter_greg_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt -= combo_counter_greg_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 4);

				switch (greg_attack_index_1) 
				{				
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
					break;
				}	
				
				this.previous_greg_attack_index_1 = greg_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_light_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_light_attack_alt += 1;
				}
				else if (combo_counter_greg_light_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt += 1;
				}
				else if (combo_counter_greg_light_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt += 1;
				}

				else if (combo_counter_greg_light_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack_alt -= combo_counter_greg_light_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_2 = RandDifferent(this.previous_greg_attack_index_2, 4);

				switch (greg_attack_index_2) 
				{	
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_04_lp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_03_rp_ACS');
					break;
				}

				this.previous_greg_attack_index_2 = greg_attack_index_2;
			}
		}
	}
	
	function geraltRandomGregLightAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_light_attack += 1;
				}
				else if (combo_counter_greg_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}
				else if (combo_counter_greg_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}

				else if (combo_counter_greg_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}

				else if (combo_counter_greg_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack -= combo_counter_greg_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 5);

				switch (greg_attack_index_1) 
				{				
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;
						
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;
						
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
				}	
					
				this.previous_greg_attack_index_1 = greg_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_light_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_light_attack += 1;
				}
				else if (combo_counter_greg_light_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}
				else if (combo_counter_greg_light_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}

				else if (combo_counter_greg_light_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack += 1;
				}

				else if (combo_counter_greg_light_attack == 4)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_light_attack -= combo_counter_greg_light_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_2 = RandDifferent(this.previous_greg_attack_index_2, 5);

				switch (greg_attack_index_2) 
				{				
					case 4:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;
					
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_lp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_04_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_06_lp_ACS');
					break;
				}

				this.previous_greg_attack_index_2 = greg_attack_index_2;
			}
		}
	}
	
	function geraltRandomGregHeavyAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_heavy_attack_alt += 1;
				}
				else if (combo_counter_greg_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}
				else if (combo_counter_greg_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 8)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 9)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 10)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt -= combo_counter_greg_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				if( targetDistance <= 1.5 * 1.5 ) 
				{
					//PlayerPlayAnimation( 'gregoire_attack_punch_ACS');

					punch_index_1 = RandDifferent(this.previous_punch_index_1 , 2);

					switch (punch_index_1) 
					{														
						case 1:
						PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');
						break;
					}
						
					this.previous_punch_index_1 = punch_index_1;

					AddTimer('ACS_HeadbuttDamage', 0.5, false);
				}
				else
				{
					greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 9);

					switch (greg_attack_index_1) 
					{				
						case 8:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
						break;

						case 7:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
						break;

						case 6:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
						break;

						case 5:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
						break;

						case 4:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
						break;

						case 3:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
						break;

						case 2:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
						break;

						case 1:
						PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
						break;

						default:
						PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
						break;
					}	
						
					this.previous_greg_attack_index_1 = greg_attack_index_1;
				}
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_heavy_attack_alt == 0)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_heavy_attack_alt += 1;
				}
				else if (combo_counter_greg_heavy_attack_alt == 1)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}
				else if (combo_counter_greg_heavy_attack_alt == 2)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 3)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 4)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 5)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 6)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 7)
				{
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					
					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 8)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_rp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 9)
				{
					PlayerPlayAnimation( 'man_finisher_head_01_lp_ACS');

					AddTimer('ACS_HeadbuttDamage', 0.5, false);

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt += 1;
				}

				else if (combo_counter_greg_heavy_attack_alt == 10)
				{
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack_alt -= combo_counter_greg_heavy_attack_alt;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_2 = RandDifferent(this.previous_greg_attack_index_2, 10);

				switch (greg_attack_index_2) 
				{	
					case 9:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
					break;

					case 8:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
					break;

					case 7:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
					break;

					case 6:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
					break;

					case 5:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
					break;

					case 4:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
					break;

					case 3:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
					break;

					case 2:
					PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
					break;

					case 1:
					PlayerPlayAnimation( 'combat_locomotion_sucker_punch_40ms_close');
					break;

					default:
					PlayerPlayAnimation( 'man_geralt_sword_attack_heavy_special_rp_end');
					break;
				}

				this.previous_greg_attack_index_2 = greg_attack_index_2;
			}
		}
	}
	
	function geraltRandomGregHeavyAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_heavy_attack += 1;
				}
				else if (combo_counter_greg_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack += 1;
				}
				else if (combo_counter_greg_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack += 1;
				}

				else if (combo_counter_greg_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack -= combo_counter_greg_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_1 = RandDifferent(this.previous_greg_attack_index_1 , 4);

				switch (greg_attack_index_1) 
				{				
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;
						
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;
						
					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
					break;
				}	
					
				this.previous_greg_attack_index_1 = greg_attack_index_1;
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			if (ACS_ComboMode() == 0)
			{
				ACS_Combo_Mode_Reset();
				
				if (combo_counter_greg_heavy_attack == 0)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');

					combo_counter_damage -= combo_counter_damage;

					combo_counter_greg_heavy_attack += 1;
				}
				else if (combo_counter_greg_heavy_attack == 1)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack += 1;
				}
				else if (combo_counter_greg_heavy_attack == 2)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack += 1;
				}

				else if (combo_counter_greg_heavy_attack == 3)
				{
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');

					combo_counter_damage += 1;

					combo_counter_greg_heavy_attack -= combo_counter_greg_heavy_attack;
				}
			}
			else if (ACS_ComboMode() == 1)
			{
				greg_attack_index_2 = RandDifferent(this.previous_greg_attack_index_2, 4);

				switch (greg_attack_index_2) 
				{				
					case 3:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_01_rp_ACS');
					break;
					
					case 2:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_02_lp_ACS');
					break;
					
					case 1:
					PlayerPlayAnimation( 'man_npc_longsword_attack_l_01_rp_ACS');
					break;

					default:
					PlayerPlayAnimation( 'man_npc_longsword_attack_h_05_rp_ACS');
					break;
				}

				this.previous_greg_attack_index_2 = greg_attack_index_2;
			}
		}
	}
	
	function geraltRandomGregSpecialAttackAlt()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'man_geralt_sword_approach_attack_1');
		}
	}
	
	function geraltRandomGregSpecialAttack()
	{
		MovementAdjust();
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}

			PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
			
			PlayerPlayAnimation( 'man_npc_longsword_attack_special_01_rp_ACS');
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Bow & Crossbow Stuff

	function geraltShootBowStationary()
	{
		MovementAdjust();

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		PlayerPlayAnimation( 'man_npc_bow_idle_aiming_01_ACS');

		PlayBowAnim_IdleAiming();

		ACS_Arrow_Create_Ready();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
				}
				else
				{
					movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
				}	
			}
		}
		else
		{
			movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
		}

		AddTimer('ACS_ShootBowToIdle', 0.75, false);
	}

	function geraltShootBowMoving()
	{
		MovementAdjust();

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		PlayerPlayAnimation( 'man_npc_bow_idle_aiming_01_ACS');

		PlayBowAnim_IdleAiming();

		ACS_Arrow_Create_Ready();

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
				}
				else
				{
					movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
				}	
			}
		}
		else
		{
			movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
		}

		AddTimer('ACS_ShootBowToIdle', 0.25, false);
	}

	function geraltShootCrossbowStationary()
	{
		MovementAdjust();

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
				}
				else
				{
					movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
				}	
			}
		}
		else
		{
			movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
		}

		PlayerPlayAnimation( 'man_npc_crossbow_idle_aiming_01_ACS');

		PlayCrossbowAnim_IdleAiming();

		AddTimer('ACS_ShootCrossbowToIdle', 0.25, false);
	}

	function geraltShootCrossbowMoving()
	{
		MovementAdjust();

		if(thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.RemoveTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove');
		
		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}   
				}
				else
				{
					movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
				}	
			}
		}
		else
		{
			movementAdjustor.RotateTo( ticket, theCamera.GetCameraHeading() );
		}

		PlayerPlayAnimation( 'man_npc_crossbow_idle_aiming_01_ACS');

		PlayCrossbowAnim_IdleAiming();

		AddTimer('ACS_ShootCrossbowToAim', 0.25, false);
	}

	function PlayBowAnim_IdleAiming()
	{
		igni_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
	}

	function PlayBowAnim_Reset()
	{
		igni_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		axii_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		aard_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		quen_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		yrden_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );

		igni_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		axii_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		aard_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		quen_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		yrden_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );

		igni_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		axii_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		aard_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		quen_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		yrden_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );

		igni_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		axii_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		aard_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		quen_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
		yrden_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_lp_01' );
	}

	function PlayBowAnim_ShootToIdle()
	{
		//PlayerPlayAnimation( 'man_npc_bow_shoot_to_idle_lp_ACS');

		PlayerPlayAnimation( 'man_npc_bow_shoot_to_idle_lp_ACS');

		igni_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_bow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		AddTimer('ACS_Arrow_Shoot_Delay', 0.125, false);

		AddTimer('ACS_Arrow_Create_Delay', 0.5, false);
	}

	function PlayCrossbowAnim_IdleAiming()
	{
		igni_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );

		igni_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		axii_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		aard_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		quen_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
		yrden_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_idle_aiming_01' );
	}

	function PlayCrossbowAnim_ShootToIdle()
	{
		PlayerPlayAnimation( 'man_npc_crossbow_shoot_to_idle_lp_ACS');

		igni_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
	}

	function PlayCrossbowAnim_ShootToAim()
	{
		PlayerPlayAnimation( 'man_npc_crossbow_shoot_to_aim_ACS');

		igni_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_1().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_2().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_3().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );

		igni_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		axii_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		aard_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		quen_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
		yrden_crossbow_4().GetRootAnimatedComponent().PlaySkeletalAnimationAsync( 'man_npc_bow_shoot_to_idle_lp' );
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// Wraith Stuff
	
	function wraith_actual()
	{
		thePlayer.PlayEffectSingle('wraith_fx');

		camera.StopAnimation('camera_shake_loop_lvl1_1');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_1' );

		camera.StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_5' );

		thePlayer.EnableCharacterCollisions( false );

		MovementAdjustWraith();
		
		movementAdjustor.ScaleAnimation( ticket, true, false, true );
		
		//movementAdjustor.MatchMoveRotation( ticket );
		
		if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
		{
			PlayerPlayAnimationWraith( 'swim_slow_f_ACS' );
			
			if (thePlayer.IsInInterior())
			{
				if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5;
				}
			}
			else
			{
				if (thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25;
				}
				else if (theGame.IsFocusModeActive())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 5;
				}
				else if (thePlayer.IsInCombat())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 10;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 20;
				}
			}
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}
		else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5 )
		{
			PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );

			if (thePlayer.IsInInterior())
			{
				if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -1.25;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -2.5;
				}
			}
			else
			{
				if (thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -1.25;
				}
				else if (theGame.IsFocusModeActive())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -2.5;
				}
				else if (thePlayer.IsInCombat())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -7;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * -10;
				}
			}
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}	
		else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			PlayerPlayAnimationWraith( 'swim_slow_f_ACS' );

			if (thePlayer.IsInInterior())
			{
				if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * 1.25;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * 2.5;
				}
			}
			else
			{
				if (thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * 1.25;
				}
				else if (theGame.IsFocusModeActive())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * 2.5;
				}
				else if (thePlayer.IsInCombat())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 7 + theCamera.GetCameraRight() * 7;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 10 + theCamera.GetCameraRight() * 10;
				}
			}
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}	
		else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			PlayerPlayAnimationWraith( 'swim_slow_f_ACS' );

			if (thePlayer.IsInInterior())
			{
				if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * -1.25;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * -2.5;
				}
			}
			else
			{
				if (thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * -1.25;
				}
				else if (theGame.IsFocusModeActive())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * -2.5;
				}
				else if (thePlayer.IsInCombat())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 7 + theCamera.GetCameraRight() * -7;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 10 + theCamera.GetCameraRight() * -10;
				}
			}
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}	
		else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5 && theInput.GetActionValue('GI_AxisLeftY') > 0.5)
		{
			PlayerPlayAnimationWraith( 'swim_slow_f_ACS' );

			if (thePlayer.IsInInterior())
			{
				if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * 1.25;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * 2.5;
				}
			}
			else
			{
				if (thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * 1.25;
				}
				else if (theGame.IsFocusModeActive())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * 2.5;
				}
				else if (thePlayer.IsInCombat())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 7 + theCamera.GetCameraRight() * 7;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 10 + theCamera.GetCameraRight() * 10;
				}
			}
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}	
		else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5 && theInput.GetActionValue('GI_AxisLeftY') > 0.5)
		{
			PlayerPlayAnimationWraith( 'swim_slow_f_ACS' );

			if (thePlayer.IsInInterior())
			{
				if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * -1.25;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * -2.5;
				}
			}
			else
			{
				if (thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 1.25 + theCamera.GetCameraRight() * -1.25;
				}
				else if (theGame.IsFocusModeActive())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 2.5 + theCamera.GetCameraRight() * -2.5;
				}
				else if (thePlayer.IsInCombat())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 7 + theCamera.GetCameraRight() * -7;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 10 + theCamera.GetCameraRight() * -10;
				}
			}
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}
		/*
		else if (theInput.GetActionValue('Jump') > 0.5)
		{
			PlayerPlayAnimation( 'swim_underwater_idle_ACS' );
			
			dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraUp() * 10 + theCamera.GetCameraDirection() * 5.5;
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}
		*/
		else if (
		theInput.GetActionValue('Jump') > 0.5
		|| theInput.GetActionValue('Dodge') > 0.5
		|| theInput.GetActionValue('CbtRoll') > 0.5
		|| theInput.GetActionValue('WalkToggle') > 0.5
		|| theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene()
		|| thePlayer.IsUsingVehicle()
		|| thePlayer.IsUsingHorse()
		)
		{			
			WraithModeDeactivate();
		}
		else
		{
			PlayerPlayAnimationWraith( 'swim_underwater_idle_ACS' );
			
			if (thePlayer.IsInInterior())
			{
				if (theGame.IsFocusModeActive() || thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 0.0125;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 0.25;
				}
			}
			else
			{
				if (thePlayer.IsInsideInteraction())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 0.0125;
				}
				else if (theGame.IsFocusModeActive())
				{
					dest1 = thePlayer.GetWorldPosition() + theCamera.GetCameraDirection() * 0.25;
				}
				else if (thePlayer.IsInCombat())
				{
					dest1 = thePlayer.GetWorldPosition() + thePlayer.GetWorldUp() * -0.03125 + theCamera.GetCameraDirection() * 0.25;
				}
				else
				{
					dest1 = thePlayer.GetWorldPosition() + thePlayer.GetWorldUp() * -0.03125 + theCamera.GetCameraDirection() * 0.5;
				}
			}
			
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}
				
		movementAdjustor.SlideTo( ticket, dest1 );
	}

	function gliding_actual()
	{
		camera.StopAnimation('camera_shake_loop_lvl1_1');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_1' );

		camera.StopAnimation('camera_shake_loop_lvl1_5');

		theGame.GetGameCamera().StopAnimation( 'camera_shake_loop_lvl1_5' );

		thePlayer.EnableCharacterCollisions( false );

		MovementAdjustWraith();
		
		movementAdjustor.ScaleAnimation( ticket, true, false, true );
		
		//PlayerPlayAnimationGlide( 'swim_underwater_f_fast' );
			
		dest1 = thePlayer.GetWorldPosition() + thePlayer.GetWorldUp() * -0.5 + thePlayer.GetWorldForward() * 1.25 + theCamera.GetCameraDirection() * 1.25;
		
		if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				
		movementAdjustor.SlideTo( ticket, dest1 );
	}

	function Umbral_Slash_Single()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffect('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		quen_sword_glow();

		ACS_Fast_Attack_Buff();

		ACS_Fast_Attack_Buff_Hit();

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		thePlayer.SetAnimationSpeedMultiplier( 4  );

		RemoveTimer('ACS_ResetAnimation'); AddTimer('ACS_ResetAnimation', 0.25  , false);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		umbral_slash_index = RandDifferent(this.previous_umbral_slash_index, 2);

		switch (umbral_slash_index) 
		{	
			case 1:
			PlayerPlayAnimation( 'attack_strong_down_left_with_step_back_ACS');
			break;

			default:
			PlayerPlayAnimation( 'attack_strong_up_right_with_step_back_ACS');
			break;
		}	

		this.previous_umbral_slash_index = umbral_slash_index;

		//thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");

		//thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");

		ACS_Umbral_Slash_Single();
	}

	function Sparagmos()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffect('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		RemoveTimer('Sparagmos_Deactivate');

		thePlayer.PlayEffectSingle('hit_lightning');
		thePlayer.StopEffect('hit_lightning');

		ACS_Fast_Attack_Buff();

		ACS_Fast_Attack_Buff_Hit();

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		thePlayer.SetAnimationSpeedMultiplier( 0.25 );

		AddTimer('ACS_ResetAnimation', 1 , false);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		sparagmos_index = RandDifferent(this.previous_sparagmos_index, 9);

		switch (sparagmos_index) 
		{
			case 8:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_left_1_ACS');
			break;

			case 7:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_up_1_ACS');
			break;

			case 6:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_left_1_ACS');
			break;

			case 5:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_2_ACS');
			break;

			case 4:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_1_ACS');
			break;

			case 3:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_1_ACS');
			break;

			case 2:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_h_2_ACS');
			break;

			case 1:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_l_up_1_ACS');
			break;

			default:
			PlayerPlayAnimation( 'man_npc_sword_2hand_attack_combo_stop_lll_1_ACS');
			break;
		}	

		this.previous_sparagmos_index = sparagmos_index;

		//thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_01");

		//thePlayer.SoundEvent("monster_dettlaff_monster_combat_geralt_deathblow_02");

		ACS_Sparagmos_Effect();

		ACS_Light_Attack_Extended_Trail();

		//AddTimer('ACS_Sparagmos_Electric_Effect', 0.1, true);

		//AddTimer('ACS_Sparagmos_Damage_Delay', 0.2, false);

		thePlayer.AddTag('ACS_Sparagmos_Active');

		AddTimer('Sparagmos_Deactivate', 2, false);
	}

	function fill_lightning_array()
	{
		eff_names.Clear();

		eff_names.PushBack('diagonal_up_left');
		eff_names.PushBack('diagonal_down_left');
		eff_names.PushBack('down');
		eff_names.PushBack('up');
		eff_names.PushBack('diagonal_up_right');
		eff_names.PushBack('diagonal_down_right');
		eff_names.PushBack('right');
		eff_names.PushBack('left');
	}

	timer function ACS_Sparagmos_Electric_Effect(deltaTime : float , id : int)
	{
		fill_lightning_array();

		if (GetACSSparagmosEffect()
		&& GetACSSparagmosEffect_1()
		&& GetACSSparagmosEffect_2()
		&& GetACSSparagmosEffect_3()
		&& GetACSSparagmosEffect_4()
		&& GetACSSparagmosEffect_5()
		)
		{
			//GetACSSparagmosEffect().StopEffect('sword_slash_blue_large');
			//GetACSSparagmosEffect().PlayEffect('sword_slash_blue_large');

			GetACSSparagmosEffect_2().PlayEffect(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_2().PlayEffect(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_2().PlayEffect(eff_names[RandRange(eff_names.Size())]);

			GetACSSparagmosEffect_2().StopAllEffects();

			GetACSSparagmosEffect_3().PlayEffect(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_3().PlayEffect(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_3().PlayEffect(eff_names[RandRange(eff_names.Size())]);

			GetACSSparagmosEffect_3().StopAllEffects();

			GetACSSparagmosEffect_4().PlayEffect(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_4().PlayEffect(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_4().PlayEffect(eff_names[RandRange(eff_names.Size())]);

			GetACSSparagmosEffect_4().StopAllEffects();

			GetACSSparagmosEffect_5().PlayEffect(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_5().PlayEffect(eff_names[RandRange(eff_names.Size())]);
			GetACSSparagmosEffect_5().PlayEffect(eff_names[RandRange(eff_names.Size())]);

			GetACSSparagmosEffect_5().StopAllEffects();
		}
		else 
		{
			GetACSSparagmosEffect().Destroy();

			GetACSSparagmosEffect_1().Destroy();

			GetACSSparagmosEffect_2().Destroy();

			GetACSSparagmosEffect_3().Destroy();

			GetACSSparagmosEffect_4().Destroy();

			GetACSSparagmosEffect_5().Destroy();

			thePlayer.RemoveTag('ACS_Sparagmos_Active');

			RemoveTimer('ACS_Sparagmos_Electric_Effect');
		}

		if (!thePlayer.HasTag('axii_sword_equipped'))
		{
			GetACSSparagmosEffect().Destroy();

			GetACSSparagmosEffect_1().Destroy();

			GetACSSparagmosEffect_2().Destroy();

			GetACSSparagmosEffect_3().Destroy();

			GetACSSparagmosEffect_4().Destroy();

			GetACSSparagmosEffect_5().Destroy();

			thePlayer.RemoveTag('ACS_Sparagmos_Active');

			RemoveTimer('ACS_Sparagmos_Electric_Effect');
		}
	}

	timer function Sparagmos_Deactivate (deltaTime : float , id : int)
	{
		thePlayer.RemoveTag('ACS_Sparagmos_Active');

		GetACSSparagmosEffect().Destroy();

		GetACSSparagmosEffect_1().Destroy();

		GetACSSparagmosEffect_2().Destroy();

		GetACSSparagmosEffect_3().Destroy();

		GetACSSparagmosEffect_4().Destroy();

		GetACSSparagmosEffect_5().Destroy();

		RemoveTimer('ACS_Sparagmos_Electric_Effect');
	}

	timer function ACS_Sparagmos_Damage_Delay (deltaTime : float , id : int)
	{
		ACS_Sparagmos_Damage();
	}

	function Bruxa_Scream()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		if (thePlayer.HasTag('vampire_claws_equipped'))
		{
			if ( thePlayer.HasBuff(EET_BlackBlood) )
			{
				thePlayer.PlayEffect('special_attack_break'); thePlayer.StopEffect('special_attack_break');
				PlayerPlayAnimation ( 'bruxa_taunt_02_ACS');
			}
			else	
			{
				PlayerPlayAnimation ( 'bruxa_taunt_01_ACS');
			}
		}
		else if (thePlayer.HasTag('aard_sword_equipped'))
		{
			thePlayer.PlayEffect('special_attack_break'); thePlayer.StopEffect('special_attack_break');

			PlayerPlayAnimation ( 'bruxa_taunt_02_ACS');
		}
		
		ACS_Bruxa_Scream();
	}

	function Water_Aard()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffect('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		axe_attack_alt_index_1 = RandDifferent(this.previous_axe_attack_alt_index_1 , 7);

		switch (axe_attack_alt_index_1) 
		{	
			case 6:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_03_rp_ACS');
			break;
			
			case 5:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_03_lp_ACS');
			break;
			
			case 4:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_02_rp_ACS');
			break;
			
			case 3:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_02_lp_ACS');
			break;
			
			case 2:
			PlayerPlayAnimation( 'man_npc_2haxe_attack_02_lp_ACS');
			break;
			
			case 1:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_01_rp_ACS');
			break;
			
			default:
			PlayerPlayAnimation( 'man_npc_2haxe_taunt_01_lp_ACS');
			break;
		}	

		this.previous_axe_attack_alt_index_1 = axe_attack_alt_index_1;	
		
		AddTimer('ACS_Water_Aard_Release_Repeat', 0.3, true);

		AddTimer('ACS_Water_Aard_Release_Stop', 1, false);
	}

	function Giant_Stomp()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffect('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		PlayerPlayAnimation( 'man_mage_teleport_in_ACS');

		ACS_Giant_Stomp();
	}

	function Storm_Spear()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffect('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		RemoveTimer('Storm_Spear_Deactivate');

		ACS_Fast_Attack_Buff();

		ACS_Fast_Attack_Buff_Hit();

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		thePlayer.SetAnimationSpeedMultiplier( 0.25 );

		AddTimer('ACS_ResetAnimation', 1 , false);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		storm_spear_index = RandDifferent(this.previous_storm_spear_index, 5);

		switch (storm_spear_index) 
		{
			case 4:
			PlayerPlayAnimation( 'man_npc_2hhalberd_attack_05_rp_ACS');
			break;
			
			case 3:
			PlayerPlayAnimation( 'man_npc_2hhalberd_attack_02_rp_ACS');

			case 2:
			PlayerPlayAnimation( 'man_npc_2hhalberd_attack_04_rp_ACS');
			break;
		
			case 1:
			PlayerPlayAnimation( 'man_npc_2hhalberd_attack_03_rp_ACS');
			break;
			
			default:
			PlayerPlayAnimation( 'man_npc_2hhalberd_attack_special_01_rp_ACS');
			break;
		}	

		this.previous_storm_spear_index = storm_spear_index;

		ACS_Storm_Spear_Effect();

		ACS_Light_Attack_Extended_Trail();

		thePlayer.AddTag('ACS_Storm_Spear_Active');

		AddTimer('Storm_Spear_Check', 0.0001, true);

		AddTimer('Storm_Spear_Deactivate', 3.5, false);
	}

	timer function Storm_Spear_Deactivate (deltaTime : float , id : int)
	{
		thePlayer.RemoveTag('ACS_Storm_Spear_Active');

		ACS_Storm_Spear_Array_Destroy();

		RemoveTimer('Storm_Spear_Check');
	}

	timer function Storm_Spear_Check (deltaTime : float , id : int)
	{
		if (!thePlayer.HasTag('quen_secondary_sword_equipped'))
		{
			thePlayer.RemoveTag('ACS_Storm_Spear_Active');

			ACS_Storm_Spear_Array_Destroy();

			RemoveTimer('Storm_Spear_Check');
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function Giant_Sword()
	{
		if (!thePlayer.IsActionAllowed(EIAB_Signs))
		{
			return;
		}

		//thePlayer.PlayBattleCry( 'BattleCryAttack', 1, true, false );
		thePlayer.PlayEffect('special_attack_break'); thePlayer.StopEffect('special_attack_break');

		ACS_Fast_Attack_Buff();

		ACS_Fast_Attack_Buff_Hit();

		MovementAdjust();

		if( thePlayer.IsAlive()) {thePlayer.ClearAnimationSpeedMultipliers();}	

		thePlayer.SetAnimationSpeedMultiplier( 2 );

		AddTimer('ACS_ResetAnimation', 0.5 , false);

		if( actor && ACS_AttitudeCheck ( actor ) && thePlayer.IsInCombat())
		{
			if ( ACS_GetTargetMode() == 0 || ACS_GetTargetMode() == 1 )
			{
				if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
			}
			else if ( ACS_GetTargetMode() == 2 )
			{
				if (thePlayer.IsHardLockEnabled())
				{
					if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTowards( ticket, actor );}  
				}
				else
				{
					if(!thePlayer.HasTag('ACS_Manual_Combat_Control')){thePlayer.AddTag('ACS_Manual_Combat_Control');} RemoveTimer('Manual_Combat_Control_Remove'); AddTimer('Manual_Combat_Control_Remove', 2, false);//if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
				}	
			}
		}
		else
		{
			if (!thePlayer.IsUsingHorse() && !thePlayer.IsUsingVehicle() && !thePlayer.IsPerformingFinisher()) {movementAdjustor.RotateTo( ticket, VecHeading( theCamera.GetCameraDirection() ) );}
		}

		PlayerPlayAnimation( 'dialogue_witcher_combat_pose_ready');

		ACS_Giant_Sword_Fall();
	}

	function ACSFlyingAnimActual()
	{
		PlayerPlayAnimationInterrupt( 'swim_slow_f_ACS' );
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private var specialAttackSphere 																		: CMeshComponent;

	private var specialAttackSphereScale 																	: float;

	default specialAttackSphereScale 																		= 0;

	public function ResetCiriSpecialSphereSize()
	{
		specialAttackSphereScale -= specialAttackSphereScale;
		//specialAttackSphereScale += 1;
	}

	public timer function GrowCiriSpecialSphereTimer ( dt : float, id : int)
	{ 
		if (specialAttackSphereScale >= 15)
		{
			ResetCiriSpecialSphereSize();
			RemoveTimer('GrowCiriSpecialSphereTimer');
		}
		else
		{
			GrowCiriSpecialSphereActual();
		}	
	} 

	function GrowCiriSpecialSphereActual()
	{
		specialAttackSphere = (CMeshComponent)(ACSCiriSpecialSphere().GetComponentByClassName('CMeshComponent'));

		if (specialAttackSphereScale >= 15)
		{
			ResetCiriSpecialSphereSize();
			RemoveTimer('GrowCiriSpecialSphereTimer');
		}
		else
		{
			specialAttackSphere.SetScale(Vector(
				
				specialAttackSphereScale += 0.0625,
				specialAttackSphereScale += 0.0625,
				specialAttackSphereScale += 0.0625
		
				));
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function WerewolfBiteDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 2.5;

			attackAngle = 40;
		}
		else
		{
			attackRange = 2;

			attackAngle = 20;
		}

		actors.Clear();

		actors = GetACSTransfomrationWerewolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransfomrationWerewolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransfomrationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					damageMax = maxTargetVitality * 0.125; 

					damageMin = maxTargetVitality * 0.0625; 
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						damageMax = maxTargetEssence * 0.0625; 
					
						damageMin = maxTargetEssence * 0.0625; 
					}
					else
					{
						damageMax = maxTargetEssence * 0.125; 
					
						damageMin = maxTargetEssence * 0.0625; 
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

				thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.1 );

				thePlayer.SoundEvent("cmb_play_dismemberment_gore");

				thePlayer.SoundEvent("monster_dettlaff_monster_vein_hit_blood");

				actortarget.PlayEffect('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffect('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffect('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffect('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffect('blood_spill');
				actortarget.StopEffect('blood_spill');		

				actortarget.PlayEffect('critical_poison');
				actortarget.StopEffect('critical_poison');	
				

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(100 + damageMax,100 + damageMin) );

				dmg.AddEffectInfo( EET_Poison, 3 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw_black');
					} 
					else
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw_black');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_green_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw_green');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						thePlayer.PlayEffect('covered_blood_yellow_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw_yellow');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							thePlayer.PlayEffect('covered_blood_black_ACS');

							GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw_black');
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');

							GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw');
						}
					}
					else
					{
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw_black');
					}
				}
				else
				{
					thePlayer.PlayEffect('covered_blood_red_ACS');

					GetACSTransfomrationWerewolf().PlayEffect('blood_effect_jaw');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	public timer function WerewolfBiteDamage(deltaTime : float , id : int)
	{
		WerewolfBiteDamageActual();
	}

	function WerewolfLightAttackDamageActualLeft()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3;

			attackAngle = 60;
		}
		else
		{
			attackRange = 2.5;

			attackAngle = 45;
		}

		actors.Clear();

		actors = GetACSTransfomrationWerewolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransfomrationWerewolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransfomrationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

				thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.00625 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffect('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffect('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffect('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffect('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffect('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
					} 
					else
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_green_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_green');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						thePlayer.PlayEffect('covered_blood_yellow_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_yellow');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							thePlayer.PlayEffect('covered_blood_black_ACS');

							GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');

							GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
						}
					}
					else
					{
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
					}
				}
				else
				{
					thePlayer.PlayEffect('covered_blood_red_ACS');

					GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	function WerewolfLightAttackDamageActualRight()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3;

			attackAngle = 60;
		}
		else
		{
			attackRange = 2.5;

			attackAngle = 45;
		}

		actors.Clear();

		actors = GetACSTransfomrationWerewolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransfomrationWerewolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransfomrationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 

						damageMin = actortarget.GetStat( BCS_Vitality ) * 0.125; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 

						damageMin = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.125; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.0625; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.0625; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 

							damageMin = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 

							damageMin = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				if (actortarget.HasTag('ACS_Swapped_To_Shield')
				|| ((CNewNPC)actortarget).IsShielded( NULL ) )
				{
					movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
					dmg.AddEffectInfo( EET_Stagger, 0.1 );
				}
				else
				{
					if( RandF() < 0.25 ) 
					{
						movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );
						dmg.AddEffectInfo( EET_Stagger, 0.1 );
					}
				}

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

				thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.00625 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffect('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffect('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffect('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffect('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffect('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, RandRangeF(50 + damageMax,50 + damageMin) );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right_black');
					} 
					else
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right_black');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_green_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right_green');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						thePlayer.PlayEffect('covered_blood_yellow_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right_yellow');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							thePlayer.PlayEffect('covered_blood_black_ACS');

							GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right_black');
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');

							GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right');
						}
					}
					else
					{
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right_black');
					}
				}
				else
				{
					thePlayer.PlayEffect('covered_blood_red_ACS');

					GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_right');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	public timer function WerewolfLightAttackDamageLeft(deltaTime : float , id : int)
	{
		GetACSTransfomrationWerewolf().PlayEffectSingle('l_claw_trail');
		GetACSTransfomrationWerewolf().StopEffect('l_claw_trail');

		WerewolfLightAttackDamageActualLeft();
	}

	public timer function WerewolfLightAttackDamageRight(deltaTime : float , id : int)
	{
		GetACSTransfomrationWerewolf().PlayEffectSingle('r_claw_trail');
		GetACSTransfomrationWerewolf().StopEffect('r_claw_trail');

		WerewolfLightAttackDamageActualRight();
	}

	function WerewolfHeavyAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		if (GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3;

			attackAngle = 60;
		}
		else
		{
			attackRange = 2.5;

			attackAngle = 45;
		}

		actors.Clear();

		actors = GetACSTransfomrationWerewolf().GetNPCsAndPlayersInCone(attackRange, VecHeading(GetACSTransfomrationWerewolf().GetHeadingVector()), attackAngle, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransfomrationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				dmg.AddEffectInfo( EET_Stagger, 3 );

				dmg.AddEffectInfo( EET_Bleeding, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffect('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffect('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffect('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffect('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffect('blood_spill');
				actortarget.StopEffect('blood_spill');		

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 100 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 100 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					} 
					else
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_green_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('PlayEffectSingle');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						thePlayer.PlayEffect('covered_blood_yellow_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test_yellow');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							thePlayer.PlayEffect('covered_blood_black_ACS');

							GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');

							GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test');
						}
					}
					else
					{
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					}
				}
				else
				{
					thePlayer.PlayEffect('covered_blood_red_ACS');

					GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	public timer function WerewolfHeavyAttackDamage(deltaTime : float , id : int)
	{
		GetACSTransfomrationWerewolf().PlayEffectSingle('r_claw_trail');
		GetACSTransfomrationWerewolf().StopEffect('r_claw_trail');

		GetACSTransfomrationWerewolf().PlayEffectSingle('l_claw_trail');
		GetACSTransfomrationWerewolf().StopEffect('l_claw_trail');

		WerewolfHeavyAttackDamageActual();
	}

	function WerewolfSpecialLightAttackDamageActual()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		GetACSTransfomrationWerewolf().PlayEffectSingle('attack_special_forward');
		GetACSTransfomrationWerewolf().StopEffect('attack_special_forward');

		GetACSTransfomrationWerewolf().PlayEffectSingle('attack_special');
		GetACSTransfomrationWerewolf().StopEffect('attack_special');

		if (GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3.5;

			attackAngle = 360;
		}
		else
		{
			attackRange = 3;

			attackAngle = 360;
		}

		actors.Clear();

		actors = GetACSTransfomrationWerewolf().GetNPCsAndPlayersInRange(attackRange, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransfomrationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

				//thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.05 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffect('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffect('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffect('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffect('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffect('blood_spill');
				actortarget.StopEffect('blood_spill');

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 200 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 200 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					} 
					else
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_green_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('PlayEffectSingle');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						thePlayer.PlayEffect('covered_blood_yellow_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test_yellow');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							thePlayer.PlayEffect('covered_blood_black_ACS');

							GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');

							GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test');
						}
					}
					else
					{
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test_black');
					}
				}
				else
				{
					thePlayer.PlayEffect('covered_blood_red_ACS');

					GetACSTransfomrationWerewolf().PlayEffectSingle('blood_effect_claws_test');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	function WerewolfSpecialLightAttackDamageActualLeft()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		GetACSTransfomrationWerewolf().PlayEffectSingle('attack_special_forward');
		GetACSTransfomrationWerewolf().StopEffect('attack_special_forward');

		GetACSTransfomrationWerewolf().PlayEffectSingle('attack_special');
		GetACSTransfomrationWerewolf().StopEffect('attack_special');

		if (GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3.5;

			attackAngle = 360;
		}
		else
		{
			attackRange = 3;

			attackAngle = 360;
		}

		actors.Clear();

		actors = GetACSTransfomrationWerewolf().GetNPCsAndPlayersInRange(attackRange, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransfomrationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

				//thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.05 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffect('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffect('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffect('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffect('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffect('blood_spill');
				actortarget.StopEffect('blood_spill');

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 200 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 200 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
					} 
					else
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_green_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_green');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						thePlayer.PlayEffect('covered_blood_yellow_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_yellow');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							thePlayer.PlayEffect('covered_blood_black_ACS');

							GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');

							GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
						}
					}
					else
					{
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
					}
				}
				else
				{
					thePlayer.PlayEffect('covered_blood_red_ACS');

					GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	function WerewolfSpecialLightAttackDamageActualRight()
	{
		var attackRange, attackAngle 	: float;
		var tmpBool 					: bool;
		var mc 							: EMonsterCategory;
		var tmpName 					: name;

		GetACSTransfomrationWerewolf().PlayEffectSingle('attack_special_forward');
		GetACSTransfomrationWerewolf().StopEffect('attack_special_forward');

		GetACSTransfomrationWerewolf().PlayEffectSingle('attack_special');
		GetACSTransfomrationWerewolf().StopEffect('attack_special');

		if (GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			attackRange = 3.5;

			attackAngle = 360;
		}
		else
		{
			attackRange = 3;

			attackAngle = 360;
		}

		actors.Clear();

		actors = GetACSTransfomrationWerewolf().GetNPCsAndPlayersInRange(attackRange, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransfomrationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				)
				continue;

				actortarget.IsAttacked();

				actortarget.SignalGameplayEventParamInt('Time2Dodge', (int)EDT_Attack_Light );

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				if (actortarget.UsesVitality()) 
				{ 
					maxTargetVitality = actortarget.GetStatMax( BCS_Vitality );

					if ( actortarget.GetStat( BCS_Vitality ) >= maxTargetVitality * 0.25 )
					{
						damageMax = actortarget.GetStat( BCS_Vitality ) * 0.25; 
					}
					else if ( actortarget.GetStat( BCS_Vitality ) < maxTargetVitality * 0.25 )
					{
						damageMax = ( maxTargetVitality - actortarget.GetStat( BCS_Vitality ) ) * 0.25; 
					}
				} 
				else if (actortarget.UsesEssence()) 
				{ 
					maxTargetEssence = actortarget.GetStatMax( BCS_Essence );

					if (((CMovingPhysicalAgentComponent)(actortarget.GetMovingAgentComponent())).GetCapsuleHeight() >= 2
					|| actortarget.GetRadius() >= 0.7
					)
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.125; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.125; 
						}
					}
					else
					{
						if ( actortarget.GetStat( BCS_Essence ) >= maxTargetEssence * 0.25 )
						{
							damageMax = actortarget.GetStat( BCS_Essence ) * 0.25; 
						}
						else if ( actortarget.GetStat( BCS_Essence ) < maxTargetEssence * 0.25 )
						{
							damageMax = ( maxTargetEssence - actortarget.GetStat( BCS_Essence ) ) * 0.25; 
						}
					}
				}

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );

				thePlayer.GainStat( BCS_Focus, thePlayer.GetStatMax( BCS_Focus) * 0.05 );

				//thePlayer.GainStat( BCS_Vitality, thePlayer.GetStatMax( BCS_Vitality) * 0.05 );

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_large");

				thePlayer.SoundEvent("monster_dettlaff_vampire_movement_whoosh_claws_small");

				actortarget.PlayEffect('blood');
				actortarget.StopEffect('blood');

				actortarget.PlayEffect('death_blood');
				actortarget.StopEffect('death_blood');

				actortarget.PlayEffect('heavy_hit');
				actortarget.StopEffect('heavy_hit');

				actortarget.PlayEffect('light_hit');
				actortarget.StopEffect('light_hit');

				actortarget.PlayEffect('blood_spill');
				actortarget.StopEffect('blood_spill');

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 200 + damageMax );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 200 + damageMax );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	

				theGame.GetMonsterParamsForActor(actortarget, mc, tmpName, tmpBool, tmpBool, tmpBool);

				RemoveAllCoveredBlood();

				if( ((CNewNPC)actortarget).GetBloodType() == BT_Red) 
				{
					if (actortarget.HasAbility('mon_lessog_base')
					|| actortarget.HasAbility('mon_sprigan_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
					} 
					else
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Green) 
				{
					if (actortarget.HasAbility('mon_kikimore_base')
					|| actortarget.HasAbility('mon_black_spider_base')
					|| actortarget.HasAbility('mon_black_spider_ep2_base')
					)
					{						
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_green_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_green');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Yellow) 
				{
					if (actortarget.HasAbility('mon_archespor_base'))
					{
						thePlayer.PlayEffect('covered_blood_yellow_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_yellow');
					} 
					else 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
					}
				}
				else if( ((CNewNPC)actortarget).GetBloodType() == BT_Black) 
				{
					if ( mc == MC_Vampire ) 
					{
						thePlayer.PlayEffect('covered_blood_red_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
					}
					else if ( mc == MC_Magicals ) 
					{
						if (actortarget.HasAbility('mon_golem_base')
						|| actortarget.HasAbility('mon_djinn')
						|| actortarget.HasAbility('mon_gargoyle')
						)
						{
							thePlayer.PlayEffect('covered_blood_black_ACS');

							GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
						}
						else
						{
							thePlayer.PlayEffect('covered_blood_red_ACS');

							GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
						}
					}
					else
					{
						thePlayer.PlayEffect('covered_blood_black_ACS');

						GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left_black');
					}
				}
				else
				{
					thePlayer.PlayEffect('covered_blood_red_ACS');

					GetACSTransfomrationWerewolf().PlayEffect('blood_effect_claws_left');
				}

				RemoveTimer('ACS_RemoveCoveredBlood');
				AddTimer('ACS_RemoveCoveredBlood', RandRangeF(30.0f, 20), false);
			}
		}
	}

	public timer function WerewolfSpecialLightAttackDamage(deltaTime : float , id : int)
	{
		GetACSTransfomrationWerewolf().PlayEffectSingle('r_claw_trail');
		GetACSTransfomrationWerewolf().StopEffect('r_claw_trail');

		GetACSTransfomrationWerewolf().PlayEffectSingle('l_claw_trail');
		GetACSTransfomrationWerewolf().StopEffect('l_claw_trail');

		WerewolfSpecialLightAttackDamageActual();
	}

	public timer function WerewolfSpecialLightAttackDamageLeft(deltaTime : float , id : int)
	{
		GetACSTransfomrationWerewolf().PlayEffectSingle('l_claw_trail');
		GetACSTransfomrationWerewolf().StopEffect('l_claw_trail');

		WerewolfSpecialLightAttackDamageActualLeft();
	}

	public timer function WerewolfSpecialLightAttackDamageRight(deltaTime : float , id : int)
	{
		GetACSTransfomrationWerewolf().PlayEffectSingle('r_claw_trail');
		GetACSTransfomrationWerewolf().StopEffect('r_claw_trail');

		WerewolfSpecialLightAttackDamageActualRight();
	}

	public timer function WerewolfBerserkModeDeactivate(deltaTime : float , id : int)
	{
		if (GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			GetACSTransfomrationWerewolf().RemoveTag('ACS_Werewolf_Berserk_Mode');

			GetACSTransfomrationWerewolf().DestroyEffect('glow');

			GetACSTransfomrationWerewolf().StopEffect('him_smoke_swirl_black');

			GetACSTransfomrationWerewolf().DestroyEffect('morph_fx');
			GetACSTransfomrationWerewolf().PlayEffectSingle('morph_fx');

			GetACSWatcher().AddTimer('ShrinkTransformationWolfTimer', 0.02, true);
		}
	}

	private var transformationWolfMeshComp 																		: CComponent;
	private var transformationWolfAnimComp 																		: CAnimatedComponent;

	private var transformationWolfScale 																		: float;

	default transformationWolfScale 																			= 1.1875;

	public function ResetTransformationWolfSize()
	{
		transformationWolfScale -= transformationWolfScale;
		transformationWolfScale = 1.1875;
	}

	public timer function GrowTransformationWolfTimer ( dt : float, id : int)
	{ 
		if (transformationWolfScale >= 1.5)
		{
			GetACSTransfomrationWerewolf().AddTag('ACS_Transformation_Werewolf_Mega_Sized');
			RemoveTimer('GrowTransformationWolfTimer');

			GetACSTransfomrationWerewolf().DestroyEffect('morph_fx');
				
			GetACSTransfomrationWerewolf().DestroyEffect('glow');
			GetACSTransfomrationWerewolf().PlayEffect('glow');
		}
		else
		{
			GrowTransformationWolfActual();
		}	
	} 

	public timer function ShrinkTransformationWolfTimer ( dt : float, id : int)
	{ 
		if (transformationWolfScale <= 1.1875)
		{
			GetACSTransfomrationWerewolf().RemoveTag('ACS_Transformation_Werewolf_Mega_Sized');
			RemoveTimer('ShrinkTransformationWolfTimer');
		}
		else
		{
			ShrinkTransformationWolfActual();
		}	
	} 

	function GrowTransformationWolfActual()
	{
		transformationWolfMeshComp = GetACSTransfomrationWerewolf().GetComponentByClassName('CMeshComponent');

		transformationWolfAnimComp = (CAnimatedComponent)GetACSTransfomrationWerewolf().GetComponentByClassName('CAnimatedComponent');

		if (transformationWolfScale >= 1.5)
		{
			GetACSTransfomrationWerewolf().AddTag('ACS_Transformation_Werewolf_Mega_Sized');
			RemoveTimer('GrowTransformationWolfTimer');

			GetACSTransfomrationWerewolf().DestroyEffect('morph_fx');
				
			GetACSTransfomrationWerewolf().DestroyEffect('glow');
			GetACSTransfomrationWerewolf().PlayEffect('glow');
		}
		else
		{
			transformationWolfMeshComp.SetScale(Vector(
				
			transformationWolfScale += 0.00078125,
			transformationWolfScale += 0.00078125,
			transformationWolfScale += 0.00078125
	
			));

			transformationWolfAnimComp.SetScale(Vector(
				
			transformationWolfScale += 0.00078125,
			transformationWolfScale += 0.00078125,
			transformationWolfScale += 0.00078125
	
			));
		}
	}

	function ShrinkTransformationWolfActual()
	{
		transformationWolfMeshComp = GetACSTransfomrationWerewolf().GetComponentByClassName('CMeshComponent');

		transformationWolfAnimComp = (CAnimatedComponent)GetACSTransfomrationWerewolf().GetComponentByClassName('CAnimatedComponent');

		if (transformationWolfScale <= 1.1875)
		{
			GetACSTransfomrationWerewolf().RemoveTag('ACS_Transformation_Werewolf_Mega_Sized');
			RemoveTimer('ShrinkTransformationWolfTimer');
		}
		else
		{
			transformationWolfMeshComp.SetScale(Vector(
				
			transformationWolfScale -= 0.00078125,
			transformationWolfScale -= 0.00078125,
			transformationWolfScale -= 0.00078125
	
			));

			transformationWolfAnimComp.SetScale(Vector(
				
			transformationWolfScale -= 0.00078125,
			transformationWolfScale -= 0.00078125,
			transformationWolfScale -= 0.00078125
	
			));
		}
	}

	private var werewolf_roar_index_1																									: int;
	default werewolf_roar_index_1 																										= 0;

	private var previous_werewolf_roar_index_1																							: int;
	default previous_werewolf_roar_index_1 																								= 0;

	function Transformation_Werewolf_Roar()
	{
		werewolf_roar_index_1 = RandDifferent(this.previous_werewolf_roar_index_1 , 3);

		switch (werewolf_roar_index_1) 
		{	
			case 2:
			ACSTransformWerewolfPlayAnim( 'monster_werewolf_taunt_counter', 0.25f, 0.325f);
			break;
			
			case 1:
			ACSTransformWerewolfPlayAnim( 'monster_werewolf_taunt_02', 0.25f, 0.325f);
			break;
			
			default:
			ACSTransformWerewolfPlayAnim( 'monster_werewolf_taunt_01', 0.25f, 0.325f);
			break;
		}

		this.previous_werewolf_roar_index_1 = werewolf_roar_index_1;

		RemoveTimer('WerewolfBerserkModeDeactivate');
		AddTimer('WerewolfBerserkModeDeactivate', 20, false);

		GetACSWatcher().AddTimer('GrowTransformationWolfTimer', 0.02, true);

		GetACSTransfomrationWerewolf().PlayEffectSingle('pre_sonar');
		GetACSTransfomrationWerewolf().StopEffect('pre_sonar');

		GetACSTransfomrationWerewolf().PlayEffectSingle('sonar_ready');
		GetACSTransfomrationWerewolf().StopEffect('sonar_ready');

		GetACSTransfomrationWerewolf().PlayEffect('sonar');
		GetACSTransfomrationWerewolf().StopEffect('sonar');

		GetACSTransfomrationWerewolf().PlayEffectSingle('special_force_l');
		GetACSTransfomrationWerewolf().StopEffect('special_force_l');

		GetACSTransfomrationWerewolf().PlayEffectSingle('special_force_r');
		GetACSTransfomrationWerewolf().StopEffect('special_force_r');

		GetACSTransfomrationWerewolf().PlayEffectSingle('attack_special');
		GetACSTransfomrationWerewolf().StopEffect('attack_special');
		
		GetACSTransfomrationWerewolf().PlayEffectSingle('smash_ground');
		GetACSTransfomrationWerewolf().StopEffect('smash_ground');

		GetACSTransfomrationWerewolf().DestroyEffect('glow');

		GetACSTransfomrationWerewolf().StopEffect('him_smoke_swirl_black');
		GetACSTransfomrationWerewolf().PlayEffect('him_smoke_swirl_black');
		GetACSTransfomrationWerewolf().PlayEffect('him_smoke_swirl_black');
		GetACSTransfomrationWerewolf().PlayEffect('him_smoke_swirl_black');

		GetACSTransfomrationWerewolf().DestroyEffect('morph_fx');
		GetACSTransfomrationWerewolf().PlayEffectSingle('morph_fx');

		if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Berserk_Mode'))
		{
			GetACSTransfomrationWerewolf().AddTag('ACS_Werewolf_Berserk_Mode');
		}

		thePlayer.SoundEvent("animals_wolf_howl");
		thePlayer.SoundEvent("animals_wolf_howl");
		thePlayer.SoundEvent("animals_wolf_howl");
		thePlayer.SoundEvent("animals_wolf_howl");
		thePlayer.SoundEvent("animals_wolf_howl");

		thePlayer.SoundEvent("monster_wild_dog_howl");
		thePlayer.SoundEvent("monster_wild_dog_howl");
		thePlayer.SoundEvent("monster_wild_dog_howl");
		thePlayer.SoundEvent("monster_wild_dog_howl");
		thePlayer.SoundEvent("monster_wild_dog_howl");

		thePlayer.SoundEvent("monster_werewolf_vo_taunt1");
		thePlayer.SoundEvent("monster_werewolf_vo_taunt1");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt1");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt1");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt1");

		thePlayer.SoundEvent("monster_werewolf_vo_taunt2");
		thePlayer.SoundEvent("monster_werewolf_vo_taunt2");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt2");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt2");
		//thePlayer.SoundEvent("monster_werewolf_vo_taunt2");

		thePlayer.DrainFocus( thePlayer.GetStatMax( BCS_Focus ) );

		thePlayer.DrainVitality( thePlayer.GetStat( BCS_Vitality ) * 0.5 );

		actors.Clear();

		actors = GetACSTransfomrationWerewolf().GetNPCsAndPlayersInRange(15, 20, , FLAG_ExcludePlayer + FLAG_OnlyAliveActors );

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				actortarget = (CActor)actors[i];

				if (actortarget == GetACSTransfomrationWerewolf()
				|| actortarget.HasTag('acs_snow_entity')
				)
				continue;

				movementAdjustorNPC = actortarget.GetMovingAgentComponent().GetMovementAdjustor();

				ticketNPC = movementAdjustorNPC.GetRequest( 'ACS_NPC_Werewolf_Attacked_Rotate');
				movementAdjustorNPC.CancelByName( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.CancelAll();

				ticketNPC = movementAdjustorNPC.CreateNewRequest( 'ACS_NPC_Werewolf_Attacked_Rotate' );
				movementAdjustorNPC.AdjustmentDuration( ticketNPC, 0.5 );
				movementAdjustorNPC.MaxRotationAdjustmentSpeed( ticketNPC, 50000 );

				dmg = new W3DamageAction in theGame.damageMgr;
				
				dmg.Initialize(thePlayer, actortarget, NULL, thePlayer.GetName(), EHRT_Heavy, CPS_Undefined, false, false, true, false);
				
				dmg.SetProcessBuffsIfNoDamage(true);
				
				dmg.SetIgnoreImmortalityMode(false);

				dmg.SetHitAnimationPlayType(EAHA_ForceYes);

				dmg.SetHitReactionType( EHRT_Heavy, true);

				movementAdjustorNPC.RotateTowards( ticketNPC, thePlayer );

				dmg.AddEffectInfo( EET_Stagger, 3 );	

				dmg.AddEffectInfo( EET_Blindness, 6 );	

				dmg.AddDamage( theGame.params.DAMAGE_NAME_PHYSICAL, 1 );

				dmg.AddDamage( theGame.params.DAMAGE_NAME_SILVER, 1 );

				dmg.SetForceExplosionDismemberment();
					
				theGame.damageMgr.ProcessAction( dmg );
					
				delete dmg;	
			}
		}
	}

	private var werewolf_light_attack_index_1																									: int;
	default werewolf_light_attack_index_1 																										= -1;

	private var previous_werewolf_light_attack_index_1																							: int;
	default previous_werewolf_light_attack_index_1 																								= -1;

	function ACS_Transformation_Werewolf_Light_Attacks()
	{
		if (ACS_can_perform_transformation_light_attack())
		{
			ACS_refresh_transformation_light_attack_cooldown();

			ACSWerewolfRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Werewolf_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformWerewolfMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformWerewolfMovementAdjustForward();
			}

			if (theInput.GetActionValue('GI_AxisLeftY') < -0.5
			&& thePlayer.GetStat( BCS_Focus ) >= thePlayer.GetStatMax( BCS_Focus ) * 0.9
			&& thePlayer.IsInCombat()
			&& !GetACSTransfomrationWerewolf().HasTag('ACS_Transformation_Werewolf_Mega_Sized')
			)
			{
				Transformation_Werewolf_Roar();
			}
			else
			{
				werewolf_light_attack_index_1 = RandDifferent(this.previous_werewolf_light_attack_index_1 , 5);

				switch (werewolf_light_attack_index_1) 
				{	
					case 4:
					ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack_counter_near', 0.25f, 0.325f);
					AddTimer('WerewolfLightAttackDamageRight', 0.5, false);
					break;

					case 3:
					ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack06', 0.25f, 0.325f);
					AddTimer('WerewolfLightAttackDamageLeft', 0.5, false);
					break;	
					
					case 2:
					ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack04', 0.25f, 0.325f);
					AddTimer('WerewolfLightAttackDamageLeft', 0.5, false);
					break;
					
					case 1:
					ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack03', 0.25f, 0.325f);
					AddTimer('WerewolfLightAttackDamageRight', 0.5, false);
					break;
					
					default:
					ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack01', 0.25f, 0.325f);
					AddTimer('WerewolfBiteDamage', 0.5, false);
					break;
				}
		
				this.previous_werewolf_light_attack_index_1 = werewolf_light_attack_index_1;
			}
		}
	}

	private var werewolf_special_light_attack_index_1																							: int;
	default werewolf_special_light_attack_index_1 																								= -1;

	private var previous_werewolf_special_light_attack_index_1																					: int;
	default previous_werewolf_special_light_attack_index_1 																						= -1;


	public timer function WerewolfReturnCollision ( dt : float, id : int)
	{
		GetACSTransfomrationWerewolf().EnableCharacterCollisions(true);
	}

	function ACS_Transformation_Werewolf_Special_Light_Attacks()
	{
		if (ACS_can_perform_transformation_special_attack())
		{
			ACS_refresh_transformation_special_attack_cooldown();

			ACSWerewolfRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Werewolf_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformWerewolfMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformWerewolfMovementAdjustForward();
			}

			//GetACSTransfomrationWerewolf().EnableCharacterCollisions(false);

			werewolf_special_light_attack_index_1 = RandDifferent(this.previous_werewolf_special_light_attack_index_1 , 4);

			switch (werewolf_special_light_attack_index_1) 
			{	
				case 3:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_run_attack02', 0.25f, 0.325f);
				AddTimer('WerewolfSpecialAttackSlide', 0.7, false);
				AddTimer('WerewolfSpecialLightAttackDamageLeft', 1.25, false);
				//AddTimer('WerewolfReturnCollision', 0.9, false);
				break;
			
				case 2:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_run_attack01', 0.25f, 0.325f);
				AddTimer('WerewolfSpecialAttackSlide', 0.7, false);
				AddTimer('WerewolfSpecialLightAttackDamageLeft', 1.25, false);
				//AddTimer('WerewolfReturnCollision', 1.15, false);
				break;

				case 1:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack_counter_far', 0.25f, 0.325f);
				AddTimer('WerewolfSpecialAttackSlide', 0.125, false);
				AddTimer('WerewolfSpecialLightAttackDamageLeft', 0.5, false);
				//AddTimer('WerewolfReturnCollision', 0.4, false);
				break;
				
				default:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_run_attack', 0.25f, 0.325f);
				AddTimer('WerewolfSpecialAttackSlide', 0.125, false);
				AddTimer('WerewolfSpecialLightAttackDamage', 0.5, false);
				//AddTimer('WerewolfReturnCollision', 0.4, false);
				break;
			}
	
			this.previous_werewolf_special_light_attack_index_1 = werewolf_special_light_attack_index_1;
		}
	}

	private var werewolf_heavy_attack_index_1																									: int;
	default werewolf_heavy_attack_index_1 																										= -1;

	private var previous_werewolf_heavy_attack_index_1																							: int;
	default previous_werewolf_heavy_attack_index_1 																								= -1;

	function ACS_Transformation_Werewolf_Heavy_Attacks()
	{
		if (ACS_can_perform_transformation_heavy_attack())
		{
			ACS_refresh_transformation_heavy_attack_cooldown();

			ACSWerewolfRemoveMoveTimers();

			thePlayer.RemoveTag('ACS_Transformation_Werewolf_Is_Moving');

			if (thePlayer.IsInCombat())
			{
				ACSTransformWerewolfMovementAdjustRotateTowardsEnemy();
			}
			else
			{
				ACSTransformWerewolfMovementAdjustForward();
			}

			werewolf_heavy_attack_index_1 = RandDifferent(this.previous_werewolf_heavy_attack_index_1 , 2);

			switch (werewolf_heavy_attack_index_1) 
			{	
				case 1:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack05', 0.25f, 0.325f);
				AddTimer('WerewolfHeavyAttackDamage', 0.5, false);
				break;

				default:
				ACSTransformWerewolfPlayAnim( 'monster_werewolf_attack02', 0.25f, 0.325f);
				AddTimer('WerewolfHeavyAttackDamage', 0.5, false);
				break;
			}
	
			this.previous_werewolf_heavy_attack_index_1 = werewolf_heavy_attack_index_1;
		}
	}

	function werewolf_dodge_timer_actual() 
	{
		RemoveTimer('ACS_werewolf_dodge_timer_end');

		GetACSTransfomrationWerewolf().PlayEffectSingle('r_claw_trail');
		GetACSTransfomrationWerewolf().StopEffect('r_claw_trail');

		GetACSTransfomrationWerewolf().PlayEffectSingle('l_claw_trail');
		GetACSTransfomrationWerewolf().StopEffect('l_claw_trail');

		GetACSTransfomrationWerewolf().DestroyEffect('jump_ground_fx1');
		GetACSTransfomrationWerewolf().PlayEffectSingle('jump_ground_fx1');

		GetACSTransfomrationWerewolf().DestroyEffect('jump_ground_fx2');
		GetACSTransfomrationWerewolf().PlayEffectSingle('jump_ground_fx2');

		GetACSTransfomrationWerewolf().StopEffect('move_fx');
		GetACSTransfomrationWerewolf().PlayEffectSingle('move_fx');

		thePlayer.SetImmortalityMode( AIM_Invulnerable, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(true);
	
		AddTimer('ACS_werewolf_dodge_timer_end', 0.875  , false);
	}
	
	function werewolf_dodge_timer_end_actual() 
	{ 
		thePlayer.SetImmortalityMode( AIM_None, AIC_Combat ); 

		thePlayer.SetIsCurrentlyDodging(false);
	}

	public timer function ground_hand_sparks ( dt : float, id : int) 
	{ 
		GetACSTransfomrationWerewolf().DestroyEffect('ground_hand_fx');		
		GetACSTransfomrationWerewolf().PlayEffectSingle('ground_hand_fx');

		thePlayer.SoundEvent("monster_fleder_mv_claw_scratch_ground");
	}

	public timer function ACS_werewolf_dodge_timer_end ( dt : float, id : int) 
	{ 
		werewolf_dodge_timer_end_actual();
	} 

	function ACS_Transformation_Werewolf_Dodge()
	{
		if (ACS_can_transformation_dodge())
		{
			ACS_refresh_transformation_dodge_cooldown();

			thePlayer.RemoveTag('ACS_Transformation_Werewolf_Is_Moving');

			ACSWerewolfRemoveMoveTimers();

			werewolf_dodge_timer_actual();

			if (thePlayer.IsInCombat())
			{
				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
				{
					ACSTransformWerewolfMovementAdjustForwardDodge();
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5)
				{
					ACSTransformWerewolfMovementAdjustCounterDodge();
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5)
				{
					ACSTransformWerewolfMovementAdjustSlideRight();
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_back_right', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5)
				{
					ACSTransformWerewolfMovementAdjustSlideLeft();
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_back_left', 0.25f, 0.325f);
				}
				else
				{
					ACSTransformWerewolfMovementAdjustNormalDodge();
				}
			}
			else
			{
				ACSTransformWerewolfMovementAdjustForward();

				if (theInput.GetActionValue('GI_AxisLeftY') > 0.5)
				{
					ACSTransformWerewolfPlayAnim('monster_werewolf_run_to_idle', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftY') < -0.5)
				{
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_front', 0.25f, 0.875f);

					RemoveTimer('ground_hand_sparks');
					GetACSTransfomrationWerewolf().DestroyEffect('ground_hand_fx');	

					AddTimer('ground_hand_sparks', 0.5  , false);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') > 0.5)
				{
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_back_right', 0.25f, 0.325f);
				}
				else if (theInput.GetActionValue('GI_AxisLeftX') < -0.5)
				{
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_back_left', 0.25f, 0.325f);
				}
				else
				{
					ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_b01', 0.25f, 0.325f);
				}
			}
		}
	}

	public timer function Werewolf_Change_Stance_Backward ( dt : float, id : int) 
	{ 
		((CNewNPC)GetACSTransfomrationWerewolf()).SetBehaviorVariable( 'npcStance', 2 , true );
	} 

	public timer function Werewolf_Change_Stance_Forward ( dt : float, id : int) 
	{ 
		((CNewNPC)GetACSTransfomrationWerewolf()).SetBehaviorVariable( 'npcStance', 3 , true );
	}

	function RemoveChangeStanceTimers()
	{
		RemoveTimer('Werewolf_Change_Stance_Backward');

		RemoveTimer('Werewolf_Change_Stance_Forward');
	}

	public timer function Werewolf_Remove_Stationary_Tag ( dt : float, id : int) 
	{ 
		GetACSTransfomrationWerewolf().RemoveTag('ACS_Werewolf_Stationary_Transition');
	}

	function RemoveStationaryTag()
	{
		RemoveTimer('Werewolf_Remove_Stationary_Tag');
	}

	function WerewolfRestoreRotation()
	{
		if (GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Stopped_Moving'))
		{
			RemoveTimer('Werewolf_Remove_Stationary_Tag');
			AddTimer('Werewolf_Remove_Stationary_Tag', 1, false);

			GetACSTransfomrationWerewolf().RemoveTag('ACS_Werewolf_Stopped_Moving');
		}
	}

	function WerewolfChangeStance()
	{
		if (GetACSTransfomrationWerewolf().HasTag('ACS_Directional_Change_Anim'))
		{
			RemoveChangeStanceTimers();
			AddTimer('Werewolf_Change_Stance_Forward', 0.25f, false);

			ACSTransformWerewolfPlayAnim('monster_werewolf_run_f', 0.5f, 0.5f);

			GetACSTransfomrationWerewolf().RemoveTag('ACS_Directional_Change_Anim');
		}
	}

	function ACS_Werewolf_Move_Controls()
	{
		GetACSTransfomrationWerewolf().GetMovingAgentComponent().EnableCombatMode( true );

		GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetVirtualRadius( 'CombatCharacterRadius' );

		if (!GetACSTransfomrationWerewolf().IsEffectActive('blood', false))
		{
			GetACSTransfomrationWerewolf().PlayEffectSingle( 'blood' );
		}

		((CNewNPC)GetACSTransfomrationWerewolf()).SetBehaviorVariable( 'additiveTauntOn', 1, true );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				((CNewNPC)GetACSTransfomrationWerewolf()).SetBehaviorVectorVariable( 'lookAtTarget', ((CActor)(thePlayer.GetTarget())).GetWorldPosition() );

				((CNewNPC)GetACSTransfomrationWerewolf()).SetBehaviorVariable( 'lookatOn', 1, true );
			}
			else
			{
				((CNewNPC)GetACSTransfomrationWerewolf()).SetBehaviorVariable( 'lookatOn', 0, true );
			}
		}
		else
		{
			((CNewNPC)GetACSTransfomrationWerewolf()).SetBehaviorVariable( 'lookatOn', 0, true );
		}

		if (GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetRelativeMoveSpeed() <= 0.1 )
		{
			if
			(
				theInput.GetLastActivationTime( 'GI_AxisLeftX' ) > 1.25f 
				|| theInput.GetLastActivationTime( 'GI_AxisLeftY' ) > 1.25f 
			)	
			{
				GetACSTransfomrationWerewolf().RemoveTag('ACS_Werewolf_Stationary_Transition');
			}
			else
			{
				RemoveTimer('Werewolf_Remove_Stationary_Tag');

				if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Stopped_Moving'))
				{
					GetACSTransfomrationWerewolf().AddTag('ACS_Werewolf_Stationary_Transition');

					GetACSTransfomrationWerewolf().AddTag('ACS_Werewolf_Stopped_Moving');
				}
			}
		}

		if (thePlayer.IsDodgeTimerRunning()
		|| thePlayer.IsCurrentlyDodging() )
		{
			return;
		}

		if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			GetACSTransfomrationWerewolf().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0.1 );
			GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0.1 );
		}
		else
		{
			if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustForward();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') == 0 )
			{
				WerewolfRestoreRotation();

				if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					if (thePlayer.IsInCombat())
					{
						ACSTransformWerewolfMovementAdjustForward();
					}
					else
					{
						ACSTransformWerewolfMovementAdjustBackward();
					}
				}

				if (thePlayer.IsInCombat())
				{
					if (!GetACSTransfomrationWerewolf().HasTag('ACS_Directional_Change_Anim'))
					{
						RemoveChangeStanceTimers();
						AddTimer('Werewolf_Change_Stance_Backward', 0.25f, false);

						ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_b01', 0.5f, 0.5f);

						GetACSTransfomrationWerewolf().AddTag('ACS_Directional_Change_Anim');
					}

					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
				else
				{
					WerewolfChangeStance();

					if (
					theInput.IsActionPressed('Sprint')
					)
					{
						GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
					}
					else
					{
						GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
					}
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') > 0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustRight();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustLeft();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustForwardRight();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') > 0.1 && theInput.GetActionValue('GI_AxisLeftX') < -0.1 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustForwardLeft();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftY') < -0.1 && theInput.GetActionValue('GI_AxisLeftX') > 0.1 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustBackwardRight();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
			else if (theInput.GetActionValue('GI_AxisLeftX') < -0.1 && theInput.GetActionValue('GI_AxisLeftY') < -0.1 )
			{
				WerewolfRestoreRotation();

				WerewolfChangeStance();

				if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Stationary_Transition')
				)
				{
					ACSTransformWerewolfMovementAdjustBackwardLeft();
				}

				if (
				theInput.IsActionPressed('Sprint')
				)
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(2); 
				}
				else
				{
					GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed(1); 
				}
			}
		}
	}

	function ACS_Transformation_Werewolf_Stop_Moving()
	{
		if (theInput.GetActionValue('GI_AxisLeftX') == 0 && theInput.GetActionValue('GI_AxisLeftY') == 0 )
		{
			ACSTransformWerewolfMovementAdjustCancel();
			
			GetACSTransfomrationWerewolf().GetMovingAgentComponent().ForceSetRelativeMoveSpeed( 0.1f );
			GetACSTransfomrationWerewolf().GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( 0.1f );
		}
	}

	function ACSWerewolfRemoveMoveTimers()
	{
		GetACSTransfomrationWerewolf().EnableCharacterCollisions(true);

		RemoveTimer('WerewolfSpecialAttackSlide');

		RemoveTimer('WerewolfReturnCollision');

		RemoveTimer('WerewolfBiteDamage');

		RemoveTimer('WerewolfLightAttackDamage');

		RemoveTimer('WerewolfLightAttackDamageLeft');

		RemoveTimer('WerewolfLightAttackDamageRight');

		RemoveTimer('WerewolfSpecialLightAttackDamage');

		RemoveTimer('WerewolfSpecialLightAttackDamageLeft');

		RemoveTimer('WerewolfSpecialLightAttackDamageRight');

		RemoveTimer('WerewolfHeavyAttackDamage');

		RemoveTimer('ground_hand_sparks');

		GetACSTransfomrationWerewolf().DestroyEffect('ground_hand_fx');	

		((CAnimatedComponent)((CNewNPC)GetACSTransfomrationWerewolf()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('Taunt');
	}

	function ACSWerewolfRemoveAttackTimers()
	{
		GetACSTransfomrationWerewolf().EnableCharacterCollisions(true);

		RemoveTimer('WerewolfSpecialAttackSlide');

		RemoveTimer('WerewolfReturnCollision');
			
		RemoveTimer('WerewolfBiteDamage');

		RemoveTimer('WerewolfLightAttackDamage');

		RemoveTimer('WerewolfLightAttackDamageLeft');

		RemoveTimer('WerewolfLightAttackDamageRight');

		RemoveTimer('WerewolfSpecialLightAttackDamage');

		RemoveTimer('WerewolfSpecialLightAttackDamageLeft');

		RemoveTimer('WerewolfSpecialLightAttackDamageRight');

		RemoveTimer('WerewolfHeavyAttackDamage');

		RemoveTimer('ground_hand_sparks');

		GetACSTransfomrationWerewolf().DestroyEffect('ground_hand_fx');	

		((CAnimatedComponent)((CNewNPC)GetACSTransfomrationWerewolf()).GetComponentByClassName( 'CAnimatedComponent' )).RaiseBehaviorForceEvent('Taunt');
	}

	function ACSTransformWerewolfMovementAdjustForward()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.5 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 0.5 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACSTransformWerewolfMovementAdjustForwardDodge()
	{
		var targetactor 									: CActor;

		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.25 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if ( thePlayer.IsHardLockEnabled() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			if (thePlayer.IsEnemyInCone( targetactor, GetACSTransfomrationWerewolf().GetHeadingVector(), 50, 180, targetactor ))
			{
				movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

				ACSTransformWerewolfPlayAnim('monster_werewolf_run_to_idle', 0.25f, 0.325f);
			}
			else
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );

				ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_back', 0.25f, 0.875f);

				RemoveTimer('ground_hand_sparks');
				GetACSTransfomrationWerewolf().DestroyEffect('ground_hand_fx');	

				AddTimer('ground_hand_sparks', 0.75  , false);
			}
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

			ACSTransformWerewolfPlayAnim('monster_werewolf_run_to_idle', 0.25f, 0.325f);
		}
	}

	function ACSTransformWerewolfMovementAdjustCounterDodge()
	{
		var targetactor 									: CActor;

		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.25 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			if (thePlayer.IsEnemyInCone( targetactor, GetACSTransfomrationWerewolf().GetHeadingVector(), 50, 180, targetactor ))
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );

				ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_front', 0.25f, 0.875f);

				RemoveTimer('ground_hand_sparks');
				GetACSTransfomrationWerewolf().DestroyEffect('ground_hand_fx');	

				AddTimer('ground_hand_sparks', 0.5  , false);
			}
			else
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );

				ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_back', 0.25f, 0.875f);

				RemoveTimer('ground_hand_sparks');
				GetACSTransfomrationWerewolf().DestroyEffect('ground_hand_fx');	

				AddTimer('ground_hand_sparks', 0.75  , false);
			}
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

			ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_front', 0.25f, 0.325f);

			RemoveTimer('ground_hand_sparks');
			GetACSTransfomrationWerewolf().DestroyEffect('ground_hand_fx');	

			AddTimer('ground_hand_sparks', 0.5  , false);
		}
	}

	function ACSTransformWerewolfMovementAdjustNormalDodge()
	{
		var targetactor 									: CActor;

		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.25 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			if (thePlayer.IsEnemyInCone( targetactor, GetACSTransfomrationWerewolf().GetHeadingVector(), 50, 180, targetactor ))
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );

				ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_b01', 0.25f, 0.875f);
			}
			else
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );

				ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_counter_back', 0.25f, 0.875f);

				RemoveTimer('ground_hand_sparks');
				GetACSTransfomrationWerewolf().DestroyEffect('ground_hand_fx');	

				AddTimer('ground_hand_sparks', 0.75  , false);
			}
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

			ACSTransformWerewolfPlayAnim('monster_werewolf_dodge_b01', 0.25f, 0.325f);
		}
	}

	function ACSTransformWerewolfMovementAdjustBackward()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.5 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() * -5 ) );

		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 0.5 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() * -5 ) );
	}

	function ACSTransformWerewolfMovementAdjustRight()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.5 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );




		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 0.5 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 5 ) );
	}

	function ACSTransformWerewolfMovementAdjustLeft()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.5 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );



		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 0.5 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -5 ) );
	}

	function ACSTransformWerewolfMovementAdjustForwardRight()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		//movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 1 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		//movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformWerewolfMovementAdjustForwardLeft()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		//movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * 5)  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 1 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		//movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * 5) + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformWerewolfMovementAdjustBackwardRight()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		//movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );



		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 1 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		//movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * 5) ) );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * 5) ) );
	}

	function ACSTransformWerewolfMovementAdjustBackwardLeft()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		//movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraForward() * -5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( (theCamera.GetCameraDirection() * -5) + (theCamera.GetCameraRight() * -5) ) );



		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 1 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		//movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection()  + (theCamera.GetCameraForward() * 5) + (theCamera.GetCameraRight() * -5) ) );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() + (theCamera.GetCameraRight() * -5) ) );
	}

	function ACSTransformWerewolfMovementAdjustRotateTowardsEnemy()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.25 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if (thePlayer.GetTarget())
		{
			movementAdjustorWerewolf.RotateTowards( ticketWerewolf, thePlayer.GetTarget() );
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	public timer function WerewolfSpecialAttackSlide(deltaTime : float , id : int)
	{
		ACSTransformWerewolfMovementAdjustRotateTowardsEnemyAndSlide();
	}

	function ACSTransformWerewolfMovementAdjustRotateTowardsEnemyAndSlide()
	{
		var distWerewolfJump							: float;

		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.5 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if (thePlayer.IsInCombat())
		{
			if (thePlayer.GetTarget())
			{
				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, ((CActor)(thePlayer.GetTarget())) );

				distWerewolfJump = (((CMovingPhysicalAgentComponent)((CActor)(thePlayer.GetTarget())).GetMovingAgentComponent()).GetCapsuleRadius() 
				+ ((CMovingPhysicalAgentComponent)GetACSTransfomrationWerewolf().GetMovingAgentComponent()).GetCapsuleRadius());

				movementAdjustorWerewolf.RotateTowards( ticketWerewolf, ((CActor)(thePlayer.GetTarget())) );

				movementAdjustorWerewolf.SlideTowards( ticketWerewolf, ((CActor)(thePlayer.GetTarget())), distWerewolfJump, distWerewolfJump );
			}
			else
			{
				movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );
			}
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACSTransformWerewolfMovementAdjustRotateTowardsMovetarget()
	{
		var targetactor 									: CActor;

		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 0.25 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		if ( thePlayer.IsHardLockEnabled() && thePlayer.GetTarget() )
		{
			targetactor = (CActor)( thePlayer.GetDisplayTarget() );	
		}
		else
		{
			thePlayer.FindMoveTarget();
			targetactor = (CActor)( thePlayer.moveTarget );		
		}

		if (targetactor)
		{
			movementAdjustorWerewolf.RotateTowards( ticketWerewolf, targetactor );
		}
		else
		{
			movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );
		}
	}

	function ACSTransformWerewolfMovementAdjustSlideRight()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorWerewolf.SlideTo( ticketWerewolf, ( TraceFloor(GetACSTransfomrationWerewolf().GetWorldPosition() + GetACSTransfomrationWerewolf().GetWorldRight() * 1.5 ) + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * 1.5) );
	}

	function ACSTransformWerewolfMovementAdjustSlideLeft()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorWerewolf.SlideTo( ticketWerewolf, ( TraceFloor(GetACSTransfomrationWerewolf().GetWorldPosition() + GetACSTransfomrationWerewolf().GetWorldRight() * -1.5 ) + theCamera.GetCameraDirection() + theCamera.GetCameraRight() * -1.5) );
	}

	function ACSTransformWerewolfMovementAdjustCancel()
	{
		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();
	}

	function ACSTransformWerewolfMovementAdjustJump()
	{
		var dest			 											: Vector;

		werewolf_dodge_timer_actual();

		movementAdjustorWerewolf = GetACSTransfomrationWerewolf().GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolf = movementAdjustorWerewolf.GetRequest( 'ACS_Transformation_Werewolf_Rotate');
		movementAdjustorWerewolf.CancelByName( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.CancelAll();

		ticketWerewolf = movementAdjustorWerewolf.CreateNewRequest( 'ACS_Transformation_Werewolf_Rotate' );
		movementAdjustorWerewolf.AdjustmentDuration( ticketWerewolf, 1 );
		movementAdjustorWerewolf.MaxRotationAdjustmentSpeed( ticketWerewolf, 500000 );

		movementAdjustorWerewolf.DontUseSourceAnimation(ticketWerewolf, true);

		movementAdjustorWerewolf.ScaleAnimationLocationVertically( ticketWerewolf, true );
		movementAdjustorWerewolf.AdjustLocationVertically( ticketWerewolf, true );

		dest = GetACSTransfomrationWerewolf().PredictWorldPosition(1.0) + (GetACSTransfomrationWerewolf().GetHeadingVector() * (ACS_Normal_JumpExtend_GetDistance() ));
			
		dest.Z += ACS_Normal_JumpExtend_GetHeight() ;
			
		//movementAdjustorWerewolf.MaxLocationAdjustmentDistance(ticketWerewolf, true, 20 + 5, 20 + 5);

		movementAdjustorWerewolf.RotateTo( ticketWerewolf, VecHeading( theCamera.GetCameraDirection() ) );

		movementAdjustorWerewolf.SlideTo(ticketWerewolf, dest);




		

		movementAdjustorWerewolfWitcher = thePlayer.GetMovingAgentComponent().GetMovementAdjustor();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.GetRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate');
		movementAdjustorWerewolfWitcher.CancelByName( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.CancelAll();

		ticketWerewolfWitcher = movementAdjustorWerewolfWitcher.CreateNewRequest( 'ACS_Transformation_Werewolf_Witcher_Rotate' );
		movementAdjustorWerewolfWitcher.AdjustmentDuration( ticketWerewolfWitcher, 0.5 );
		movementAdjustorWerewolfWitcher.MaxRotationAdjustmentSpeed( ticketWerewolfWitcher, 500000 );

		movementAdjustorWerewolfWitcher.RotateTo( ticketWerewolfWitcher, VecHeading( theCamera.GetCameraDirection() ) );
	}

	function ACSTransformWerewolfPlayAnim(animation_name: name, blendIn, blendout : float)
	{
		var animatedComponentA			: CAnimatedComponent;

		animatedComponentA = (CAnimatedComponent)((CNewNPC)GetACSTransfomrationWerewolf()).GetComponentByClassName( 'CAnimatedComponent' );	

		animatedComponentA.PlaySlotAnimationAsync ( animation_name, 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(blendIn, blendout) );
	}

	public timer function Transformation_Werewolf_Fear(deltaTime : float , id : int)
	{
		if (
		FactsQuerySum("acs_transformation_activated") > 0
		&& FactsQuerySum("acs_wolven_curse_activated") > 0
		)
		{
			theGame.GetBehTreeReactionManager().CreateReactionEventIfPossible( thePlayer, 'CastSignAction', -1, 20.0f, -1.f, -1, true );
		}
	}

	public timer function DisableWerewolfStart(deltaTime : float , id : int)
	{
		DisableWerewolf_Actual();
	}

	function DisableWerewolf()
	{
		if ( theGame.IsDialogOrCutscenePlaying() 
		|| thePlayer.IsInNonGameplayCutscene() 
		|| thePlayer.IsInGameplayScene() 
		|| theGame.IsCurrentlyPlayingNonGameplayScene()
		|| thePlayer.IsInCutsceneIntro()
		)
		{
			DisableWerewolf_Actual();
		}
		else
		{
			if (!GetACSTransfomrationWerewolf().HasTag('ACS_Werewolf_Disable_Anim_Played'))
			{
				GetACSTransfomrationWerewolf().DestroyEffect('morph_fx');
				GetACSTransfomrationWerewolf().PlayEffectSingle('morph_fx');

				GetACSTransfomrationWerewolf().DestroyEffect('special_force_l');
				GetACSTransfomrationWerewolf().PlayEffectSingle('special_force_l');

				GetACSTransfomrationWerewolf().DestroyEffect('special_force_r');
				GetACSTransfomrationWerewolf().PlayEffectSingle('special_force_r');

				GetACSTransfomrationWerewolf().DestroyEffect('attack_special');
				GetACSTransfomrationWerewolf().PlayEffectSingle('attack_special');

				ACSTransformWerewolfPlayAnim('monster_werewolf_die02', 0.25f, 0.25f);

				GetACSTransfomrationWerewolf().AddTag('ACS_Werewolf_Disable_Anim_Played');
			}

			RemoveTimer('DisableWerewolfStart');
			AddTimer('DisableWerewolfStart', 0.5, false);
		}
	}

	function ACS_Transformation_Create_Savelock()
	{
		theGame.CreateNoSaveLock( "ACS_Transformation_Active", ACS_Transformation_Savelock_ID, false, false );
	}

	function DisableWerewolf_Actual()
	{
		var playerAnimcomp					 : CAnimatedComponent;

		var playerPos, newPlayerPos			: Vector;

		playerAnimcomp = (CAnimatedComponent)thePlayer.GetComponentByClassName('CAnimatedComponent');

		if (
		FactsQuerySum("acs_transformation_activated") > 0
		&& FactsQuerySum("acs_wolven_curse_activated") > 0
		)
		{
			GetTransformationCamera().GoBack();

			theGame.ReleaseNoSaveLock( ACS_Transformation_Savelock_ID );

			RemoveTimer('Transformation_Werewolf_Fear');

			RemoveTimer('WerewolfBerserkModeDeactivate');

			RemoveTimer('ShrinkTransformationWolfTimer');

			RemoveTimer('GrowTransformationWolfTimer');

			ResetTransformationWolfSize();
			
			ACSWerewolfRemoveMoveTimers();

			thePlayer.BreakAttachment();

			FactsRemove("acs_transformation_activated");

			FactsRemove("acs_wolven_curse_activated");
			
			thePlayer.PlayEffectSingle('smoke_explosion');
			thePlayer.StopEffect('smoke_explosion');

			thePlayer.PlayEffectSingle('teleport');
			thePlayer.StopEffect('teleport');

			thePlayer.RemoveBuffImmunity_AllNegative('ACS_Transformation_Immunity_Negative'); 
			thePlayer.RemoveBuffImmunity_AllCritical('ACS_Transformation_Immunity_Critical'); 

			thePlayer.SetVisibility(true);

			thePlayer.EnableCollisions(true);

			thePlayer.SetCanPlayHitAnim(true); 

			thePlayer.EnableCharacterCollisions(true);

			playerAnimcomp.UnfreezePose();

			//thePlayer.SetAnimationSpeedMultiplier( 1  );

			GetACSTransfomrationWerewolf().Destroy();

			FactsRemove("ACS_Transformation_Attached");

			thePlayer.UnblockAction(EIAB_CallHorse,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_DrawWeapon, 			'ACS_Transformation'); 
			thePlayer.UnblockAction(EIAB_FastTravel, 			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_InteractionAction, 	'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Crossbow,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_UsableItem,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_ThrowBomb,				'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Parry,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_MeditationWaiting,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_OpenMeditation,		'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_RadialMenu,			'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_Jump,					'ACS_Transformation');
			thePlayer.UnblockAction(EIAB_QuickSlots, 			'ACS_Transformation');

			playerPos = TraceFloor(thePlayer.GetWorldPosition());

			if( !theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 0.3 , newPlayerPos ) )
			{
				theGame.GetWorld().NavigationFindSafeSpot( playerPos, 0.3, 4 , newPlayerPos );
				playerPos = newPlayerPos;
			}

			thePlayer.TeleportWithRotation(TraceFloor(playerPos), thePlayer.GetWorldRotation());
		}
	}

	public timer function ACS_Fall_Up_Timer ( dt : float, id : int){ ACS_Fall_Up(); } 

	function ACS_Fall_Up()
	{
		var actor							: CActor; 
		var enemyAnimatedComponent 			: CAnimatedComponent;
		var actors		    				: array<CActor>;
		var i								: int;
		var npc								: CNewNPC;

		actors.Clear();

		actors = thePlayer.GetNPCsAndPlayersInRange( 999, 999, , FLAG_OnlyAliveActors + FLAG_ExcludePlayer);

		if( actors.Size() > 0 )
		{
			for( i = 0; i < actors.Size(); i += 1 )
			{
				npc = (CNewNPC)actors[i];

				actor = actors[i];

				enemyAnimatedComponent = (CAnimatedComponent)actor.GetComponentByClassName( 'CAnimatedComponent' );		
				
				enemyAnimatedComponent.PlaySlotAnimationAsync( 'fall_up_idle_ACS', 'NPC_ANIM_SLOT', SAnimatedComponentSlotAnimationSettings(0.25f, 0.875f));
			}
		}
	}


	function Spawn_Transformation_Werewolf()
	{
		var vACS_Spawn_Transformation_Werewolf: cACS_Spawn_Transformation_Werewolf;
		vACS_Spawn_Transformation_Werewolf = new cACS_Spawn_Transformation_Werewolf in this;
				
		vACS_Spawn_Transformation_Werewolf.Spawn_Transformation_Werewolf_Engage();
	}

	private var transformationCamera 						: ACSTransformationCamera;

	public function SetTransformationCamera( a : ACSTransformationCamera )
	{
		this.transformationCamera = a;
	}

	public function GetTransformationCamera() : ACSTransformationCamera
	{
		return this.transformationCamera;
	}

	function TransformationCustomCamera()
	{
		var template	: CEntityTemplate;
		var ent			: CEntity;

		template = (CEntityTemplate)LoadResource("dlc\dlc_acs\data\entities\other\transformation_camera.w2ent", true);

		ent = theGame.CreateEntity(template, theCamera.GetCameraPosition(), theCamera.GetCameraRotation());	
	}

	function ACS_Quen()
	{
		var newQuen						: W3QuenEntity;
		var signOwner					: W3SignOwnerPlayer;

		signOwner = new W3SignOwnerPlayer in this;
		signOwner.Init( GetWitcherPlayer() );
		
		newQuen = (W3QuenEntity)theGame.CreateEntity( GetWitcherPlayer().GetSignTemplate( ST_Quen ), GetWitcherPlayer().GetWorldPosition(), GetWitcherPlayer().GetWorldRotation() );
		newQuen.Init( signOwner, GetWitcherPlayer().GetSignEntity( ST_Quen ), true );
		newQuen.OnStarted();
		newQuen.OnThrowing();
		newQuen.OnEnded();
	}

	function ACS_Igni()
	{
		var newIgni						: W3SignEntity;
		var signOwner					: W3SignOwnerPlayer;

		signOwner = new W3SignOwnerPlayer in this;
		signOwner.Init( GetWitcherPlayer() );
		
		newIgni = (W3SignEntity)theGame.CreateEntity( GetWitcherPlayer().GetSignTemplate( ST_Igni ), GetWitcherPlayer().GetWorldPosition(), VecToRotation(GetWitcherPlayer().GetHeadingVector()) );

		newIgni.Init( signOwner, GetWitcherPlayer().GetSignEntity( ST_Igni ), true );
		newIgni.OnStarted();
		newIgni.OnThrowing();
		newIgni.OnEnded();
		
	}

	function ACS_Aard()
	{
		var newAard						: W3SignEntity;
		var signOwner					: W3SignOwnerPlayer;

		signOwner = new W3SignOwnerPlayer in this;
		signOwner.Init( GetWitcherPlayer() );
		
		newAard = (W3SignEntity)theGame.CreateEntity( GetWitcherPlayer().GetSignTemplate( ST_Aard ), GetWitcherPlayer().GetWorldPosition(), VecToRotation(GetWitcherPlayer().GetHeadingVector()) );
		newAard.SetAlternateCast( S_Magic_s01 );
		newAard.Init( signOwner, GetWitcherPlayer().GetSignEntity( ST_Aard ), true );
		newAard.OnStarted();
		newAard.OnThrowing();
		newAard.OnEnded();
	}

	public timer function RemoveACSSlowmo ( dt : float, id : int)
	{ 
		theGame.RemoveTimeScale( theGame.GetTimescaleSource(ETS_ThrowingAim) );
	} 

	function ACS_SlowMo()
	{
		theGame.RemoveTimeScale( theGame.GetTimescaleSource(ETS_ThrowingAim) );
		theGame.SetTimeScale( 0.6, theGame.GetTimescaleSource( ETS_ThrowingAim ), theGame.GetTimescalePriority( ETS_ThrowingAim ), false, true );

		RemoveTimer('RemoveACSSlowmo');
		AddTimer('RemoveACSSlowmo', 0.6, false);
	}

	public timer function ACS_Armor_Weapon_Whoosh_Timer ( dt : float, id : int)
	{ 
		thePlayer.SoundEvent( "monster_caretaker_mv_cloth_hard" );

		thePlayer.SoundEvent( "monster_caretaker_cmb_whoosh_heavy2" );
	}

	function ACS_Armor_Weapon_Whoosh()
	{
		RemoveTimer('ACS_Armor_Weapon_Whoosh_Timer');
		AddTimer('ACS_Armor_Weapon_Whoosh_Timer', 0.25, false);
	}
}

state ACS_BARADDUR in W3ACSWatcher 
{
	event OnEnterState(previous_state_name: name) 
	{
    	super.OnEnterState(previous_state_name);
	
    	this.ACS_BARADDUR_ENTRY();
	}

	entry function ACS_BARADDUR_ENTRY() 
	{
		while (true) 
		{
			parent.THE_EYE();

			BestiaryDisplayToggle();

			TutorialDisplayToggle();

      		SleepOneFrame();
    	}
	}

	latent function BestiaryDisplayToggle()
	{
		BestiaryDisplayToggleOn();

		BestiaryDisplayToggleOff();
	}

	function BestiaryDisplayToggleOn()
	{
		AlexanderBestiaryDisplayToggle();

		BerstukBestiaryDisplayToggle();

		BladeOfTheUnseenBestiaryDisplayToggle();

		BruxaeBestiaryDisplayToggle();

		DrownersBestiaryDisplayToggle();

		FireWyrmBestiaryDisplayToggle();

		ForestGodShadowsBestiaryDisplayToggle();

		GhoulsBestiaryDisplayToggle();

		IceTitanBestiaryDisplayToggle();

		KhagmarBestiaryDisplayToggle();

		KnightmareBestiaryDisplayToggle();

		LoviatarBestiaryDisplayToggle();

		NekkerGuardianBestiaryDisplayToggle();

		NightHunterBestiaryDisplayToggle();

		NovigradVampiresBestiaryDisplayToggle();

		RogueMagesBestiaryDisplayToggle();

		VolosBestiaryDisplayToggle();

		WerewolvesBestiaryDisplayToggle();

		WildHuntHoundsBestiaryDisplayToggle();

		WildHuntWarriorsBestiaryDisplayToggle();

		XenoSwarmSoldiersBestiaryDisplayToggle();

		XenoSwarmTyrantBestiaryDisplayToggle();

		XenoSwarmWorkersBestiaryDisplayToggle();
	}

	function AlexanderBestiaryDisplayToggle()
	{
		if (ACSAlexanderBestiaryEnabled() && FactsQuerySum("alexander_bestiary_toggle") <= 0 )
		{
			FactsAdd("alexander_bestiary_toggle");
		}
	}

	function BerstukBestiaryDisplayToggle()
	{
		if (ACSBerstukBestiaryEnabled() && FactsQuerySum("berstuk_bestiary_toggle") <= 0 )
		{
			FactsAdd("berstuk_bestiary_toggle");
		}
	}

	function BladeOfTheUnseenBestiaryDisplayToggle()
	{
		if (ACSBladeOfTheUnseenBestiaryEnabled() && FactsQuerySum("blade_of_the_unseen_bestiary_toggle") <= 0 )
		{
			FactsAdd("blade_of_the_unseen_bestiary_toggle");
		}
	}

	function BruxaeBestiaryDisplayToggle()
	{
		if (ACSBruxaeBestiaryEnabled() && FactsQuerySum("bruxae_bestiary_toggle") <= 0 )
		{
			FactsAdd("bruxae_bestiary_toggle");
		}
	}

	function DrownersBestiaryDisplayToggle()
	{
		if (ACSDrownersBestiaryEnabled() && FactsQuerySum("drowners_bestiary_toggle") <= 0 )
		{
			FactsAdd("drowners_bestiary_toggle");
		}
	}

	function FireWyrmBestiaryDisplayToggle()
	{
		if (ACSFireWyrmBestiaryEnabled() && FactsQuerySum("fire_wyrm_bestiary_toggle") <= 0 )
		{
			FactsAdd("fire_wyrm_bestiary_toggle");
		}
	}

	function ForestGodShadowsBestiaryDisplayToggle()
	{
		if (ACSForestGodShadowsBestiaryEnabled() && FactsQuerySum("forest_god_shadows_bestiary_toggle") <= 0 )
		{
			FactsAdd("forest_god_shadows_bestiary_toggle");
		}
	}

	function GhoulsBestiaryDisplayToggle()
	{
		if (ACSGhoulsBestiaryEnabled() && FactsQuerySum("ghouls_bestiary_toggle") <= 0 )
		{
			FactsAdd("ghouls_bestiary_toggle");
		}
	}

	function IceTitanBestiaryDisplayToggle()
	{
		if (ACSIceTitanBestiaryEnabled() && FactsQuerySum("ice_titan_bestiary_toggle") <= 0 )
		{
			FactsAdd("ice_titan_bestiary_toggle");
		}
	}

	function KhagmarBestiaryDisplayToggle()
	{
		if (ACSKhagmarBestiaryEnabled() && FactsQuerySum("khagmar_bestiary_toggle") <= 0 )
		{
			FactsAdd("khagmar_bestiary_toggle");
		}
	}

	function KnightmareBestiaryDisplayToggle()
	{
		if (ACSKnightmareBestiaryEnabled() && FactsQuerySum("knightmare_bestiary_toggle") <= 0 )
		{
			FactsAdd("knightmare_bestiary_toggle");
		}
	}

	function LoviatarBestiaryDisplayToggle()
	{
		if (ACSLoviatarBestiaryEnabled() && FactsQuerySum("loviatar_bestiary_toggle") <= 0 )
		{
			FactsAdd("loviatar_bestiary_toggle");
		}
	}

	function NekkerGuardianBestiaryDisplayToggle()
	{
		if (ACSNekkerGuardianBestiaryEnabled() && FactsQuerySum("nekker_guardian_bestiary_toggle") <= 0 )
		{
			FactsAdd("nekker_guardian_bestiary_toggle");
		}
	}

	function NightHunterBestiaryDisplayToggle()
	{
		if (ACSNightHunterBestiaryEnabled() && FactsQuerySum("night_hunter_bestiary_toggle") <= 0 )
		{
			FactsAdd("night_hunter_bestiary_toggle");
		}
	}

	function NovigradVampiresBestiaryDisplayToggle()
	{
		if (ACSNovigradVampiresBestiaryEnabled() && FactsQuerySum("novigrad_vampires_bestiary_toggle") <= 0 )
		{
			FactsAdd("novigrad_vampires_bestiary_toggle");
		}
	}

	function RogueMagesBestiaryDisplayToggle()
	{
		if (ACSRogueMagesBestiaryEnabled() && FactsQuerySum("rogue_mages_bestiary_toggle") <= 0 )
		{
			FactsAdd("rogue_mages_bestiary_toggle");
		}
	}

	function VolosBestiaryDisplayToggle()
	{
		if (ACSVolosBestiaryEnabled() && FactsQuerySum("volos_bestiary_toggle") <= 0 )
		{
			FactsAdd("volos_bestiary_toggle");
		}
	}

	function WildHuntHoundsBestiaryDisplayToggle()
	{
		if (ACSWildHuntHoundsBestiaryEnabled() && FactsQuerySum("wild_hunt_hounds_bestiary_toggle") <= 0 )
		{
			FactsAdd("wild_hunt_hounds_bestiary_toggle");
		}
	}

	function WerewolvesBestiaryDisplayToggle()
	{
		if (ACSWerewolvesBestiaryEnabled() && FactsQuerySum("werewolves_bestiary_toggle") <= 0 )
		{
			FactsAdd("werewolves_bestiary_toggle");
		}
	}

	function WildHuntWarriorsBestiaryDisplayToggle()
	{
		if (ACSWildHuntWarriorsBestiaryEnabled() && FactsQuerySum("wild_hunt_warriors_bestiary_toggle") <= 0 )
		{
			FactsAdd("wild_hunt_warriors_bestiary_toggle");
		}
	}

	function XenoSwarmSoldiersBestiaryDisplayToggle()
	{
		if (ACSXenoSwarmSoldierBestiaryEnabled() && FactsQuerySum("xeno_swarm_soldiers_bestiary_toggle") <= 0 )
		{
			FactsAdd("xeno_swarm_soldiers_bestiary_toggle");
		}
	}

	function XenoSwarmTyrantBestiaryDisplayToggle()
	{
		if (ACSXenoSwarmTyrantBestiaryEnabled() && FactsQuerySum("xeno_swarm_tyrant_bestiary_toggle") <= 0 )
		{
			FactsAdd("xeno_swarm_tyrant_bestiary_toggle");
		}
	}

	function XenoSwarmWorkersBestiaryDisplayToggle()
	{
		if (ACSXenoSwarmWorkerBestiaryEnabled() && FactsQuerySum("xeno_swarm_workers_bestiary_toggle") <= 0 )
		{
			FactsAdd("xeno_swarm_workers_bestiary_toggle");
		}
	}


	function BestiaryDisplayToggleOff()
	{
		AlexanderBestiaryDisplay();

		BerstukBestiaryDisplay();

		BladeOfTheUnseenBestiaryDisplay();

		BruxaeBestiaryDisplay();

		DrownersBestiaryDisplay();

		FireWyrmBestiaryDisplay();

		ForestGodShadowsBestiaryDisplay();

		GhoulsBestiaryDisplay();

		IceTitanBestiaryDisplay();

		KhagmarBestiaryDisplay();

		KnightmareBestiaryDisplay();

		LoviatarBestiaryDisplay();

		NekkerGuardianBestiaryDisplay();

		NightHunterBestiaryDisplay();

		NovigradVampiresBestiaryDisplay();

		RogueMagesBestiaryDisplay();

		VolosBestiaryDisplay();

		WerewolvesBestiaryDisplay();

		WildHuntHoundsBestiaryDisplay();

		WildHuntWarriorsBestiaryDisplay();

		XenoSwarmSoldiersBestiaryDisplay();

		XenoSwarmTyrantBestiaryDisplay();

		XenoSwarmWorkersBestiaryDisplay();
	}



	function AlexanderBestiaryDisplay()
	{
		if ( FactsQuerySum("alexander_bestiary_toggle") > 0 )
		{
			ACS_Alexander_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodAlexanderBestiaryEnabled', "false");
			FactsRemove("alexander_bestiary_toggle");
		}
	}

	function BerstukBestiaryDisplay()
	{
		if ( FactsQuerySum("berstuk_bestiary_toggle") > 0 )
		{
			ACS_Berstuk_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodBerstukBestiaryEnabled', "false");
			FactsRemove("berstuk_bestiary_toggle");
		}
	}

	function BladeOfTheUnseenBestiaryDisplay()
	{
		if ( FactsQuerySum("blade_of_the_unseen_bestiary_toggle") > 0 )
		{
			ACS_BladeOfTheUnseenn_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodBladeOfTheUnseenBestiaryEnabled', "false");
			FactsRemove("blade_of_the_unseen_bestiary_toggle");
		}
	}

	function BruxaeBestiaryDisplay()
	{
		if ( FactsQuerySum("bruxae_bestiary_toggle") > 0 )
		{
			ACS_Bruxae_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodBruxaeBestiaryEnabled', "false");
			FactsRemove("bruxae_bestiary_toggle");
		}
	}

	function DrownersBestiaryDisplay()
	{
		if ( FactsQuerySum("drowners_bestiary_toggle") > 0 )
		{
			ACS_Drowners_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodDrownersBestiaryEnabled', "false");
			FactsRemove("drowners_bestiary_toggle");
		}
	}

	function FireWyrmBestiaryDisplay()
	{
		if ( FactsQuerySum("fire_wyrm_bestiary_toggle") > 0 )
		{
			ACS_FireWyrm_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodFireWyrmBestiaryEnabled', "false");
			FactsRemove("fire_wyrm_bestiary_toggle");
		}
	}

	function ForestGodShadowsBestiaryDisplay()
	{
		if ( FactsQuerySum("forest_god_shadows_bestiary_toggle") > 0 )
		{
			ACS_ForestGodShadows_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodForestGodShadowsBestiaryEnabled', "false");
			FactsRemove("forest_god_shadows_bestiary_toggle");
		}
	}

	function GhoulsBestiaryDisplay()
	{
		if ( FactsQuerySum("ghouls_bestiary_toggle") > 0 )
		{
			ACS_Ghouls_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodGhoulsBestiaryEnabled', "false");
			FactsRemove("ghouls_bestiary_toggle");
		}
	}

	function IceTitanBestiaryDisplay()
	{
		if ( FactsQuerySum("ice_titan_bestiary_toggle") > 0 )
		{
			ACS_IceTitan_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodIceTitanBestiaryEnabled', "false");
			FactsRemove("ice_titan_bestiary_toggle");
		}
	}

	function KhagmarBestiaryDisplay()
	{
		if ( FactsQuerySum("khagmar_bestiary_toggle") > 0 )
		{
			ACS_Khagmar_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodKhagmarBestiaryEnabled', "false");
			FactsRemove("khagmar_bestiary_toggle");
		}
	}

	function KnightmareBestiaryDisplay()
	{
		if ( FactsQuerySum("knightmare_bestiary_toggle") > 0 )
		{
			ACS_Knightmare_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodKnightmareBestiaryEnabled', "false");
			FactsRemove("knightmare_bestiary_toggle");
		}
	}

	function LoviatarBestiaryDisplay()
	{
		if ( FactsQuerySum("loviatar_bestiary_toggle") > 0 )
		{
			ACS_Loviatar_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodLoviatarBestiaryEnabled', "false");
			FactsRemove("loviatar_bestiary_toggle");
		}
	}

	function NekkerGuardianBestiaryDisplay()
	{
		if ( FactsQuerySum("nekker_guardian_bestiary_toggle") > 0 )
		{
			ACS_NekkerGuardian_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodNekkerGuardianBestiaryEnabled', "false");
			FactsRemove("nekker_guardian_bestiary_toggle");
		}
	}

	function NightHunterBestiaryDisplay()
	{
		if ( FactsQuerySum("night_hunter_bestiary_toggle") > 0 )
		{
			ACS_NightHunter_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodNightHunterBestiaryEnabled', "false");
			FactsRemove("night_hunter_bestiary_toggle");
		}
	}

	function NovigradVampiresBestiaryDisplay()
	{
		if ( FactsQuerySum("novigrad_vampires_bestiary_toggle") > 0 )
		{
			ACS_NovigradVampires_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodNovigradVampiresBestiaryEnabled', "false");
			FactsRemove("novigrad_vampires_bestiary_toggle");
		}
	}

	function RogueMagesBestiaryDisplay()
	{
		if ( FactsQuerySum("rogue_mages_bestiary_toggle") > 0 )
		{
			ACS_RogueMages_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodRogueMagesBestiaryEnabled', "false");
			FactsRemove("rogue_mages_bestiary_toggle");
		}
	}

	function VolosBestiaryDisplay()
	{
		if ( FactsQuerySum("volos_bestiary_toggle") > 0 )
		{
			ACS_Volos_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodVolosBestiaryEnabled', "false");
			FactsRemove("volos_bestiary_toggle");
		}
	}

	function WerewolvesBestiaryDisplay()
	{
		if ( FactsQuerySum("werewolves_bestiary_toggle") > 0 )
		{
			ACS_Werewolves_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodWerewolvesBestiaryEnabled', "false");
			FactsRemove("werewolves_bestiary_toggle");
		}
	}

	function WildHuntHoundsBestiaryDisplay()
	{
		if ( FactsQuerySum("wild_hunt_hounds_bestiary_toggle") > 0 )
		{
			ACS_WildHuntHounds_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodWildHuntHoundsBestiaryEnabled', "false");
			FactsRemove("wild_hunt_hounds_bestiary_toggle");
		}
	}

	function WildHuntWarriorsBestiaryDisplay()
	{
		if ( FactsQuerySum("wild_hunt_warriors_bestiary_toggle") > 0 )
		{
			ACS_WildHuntWarriors_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodWildHuntWarriorsBestiaryEnabled', "false");
			FactsRemove("wild_hunt_warriors_bestiary_toggle");
		}
	}

	function XenoSwarmSoldiersBestiaryDisplay()
	{
		if ( FactsQuerySum("xeno_swarm_soldiers_bestiary_toggle") > 0 )
		{
			ACS_XenoSwarmSoldiers_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodXenoSwarmSoldierBestiaryEnabled', "false");
			FactsRemove("xeno_swarm_soldiers_bestiary_toggle");
		}
	}

	function XenoSwarmTyrantBestiaryDisplay()
	{
		if ( FactsQuerySum("xeno_swarm_tyrant_bestiary_toggle") > 0 )
		{
			ACS_XenoSwarmTyrant_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodXenoSwarmTyrantBestiaryEnabled', "false");
			FactsRemove("xeno_swarm_tyrant_bestiary_toggle");
		}
	}

	function XenoSwarmWorkersBestiaryDisplay()
	{
		if ( FactsQuerySum("xeno_swarm_workers_bestiary_toggle") > 0 )
		{
			ACS_XenoSwarmWorkers_Bestiary();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodBestiary', 'ACSmodXenoSwarmWorkerBestiaryEnabled', "false");
			FactsRemove("xeno_swarm_workers_bestiary_toggle");
		}
	}


	latent function TutorialDisplayToggle()
	{
		TutorialDisplayToggleOn();

		TutorialDisplayToggleOff();
	}


	function TutorialDisplayToggleOn()
	{
		ACSRageTutorialDisplayToggle();

		ACSDynamicEnemyBehaviorSystemTutorialDisplayToggle();

		ACSGuardsTutorialDisplayToggle();

		ACSTransformationWerewolfTutorialDisplayToggle();
		
		ACSGlideTutorialDisplayToggle();

		ACSBruxaDashTutorialDisplayToggle();

		ACSWraithModeTutorialDisplayToggle();

		ACSLightsTutorialDisplayToggle();

		ACSQuickMeditationTutorialDisplayToggle();

		ACSPerfectDodgesCountersTutorialDisplayToggle();

		ACSArmorSystemTutorialDisplayToggle();

		ACSElementalComboSystemTutorialDisplayToggle();

		ACSQuestTrackingSwapTutorialDisplayToggle();

		ACSCloakWeaponHideTutorialDisplayToggle();



	}

	function ACSRageTutorialDisplayToggle()
	{
		if (ACSRageTutorialEnabled() && FactsQuerySum("acs_rage_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_rage_tutorial_toggle");
		}
	}

	function ACSDynamicEnemyBehaviorSystemTutorialDisplayToggle()
	{
		if (ACSDynamicEnemyBehaviorSystemTutorialEnabled() && FactsQuerySum("acs_dynamic_enemy_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_dynamic_enemy_tutorial_toggle");
		}
	}

	function ACSGuardsTutorialDisplayToggle()
	{
		if (ACSGuardsTutorialEnabled() && FactsQuerySum("acs_guards_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_guards_tutorial_toggle");
		}
	}

	function ACSTransformationWerewolfTutorialDisplayToggle()
	{
		if (ACSTransformationWerewolfTutorialEnabled() && FactsQuerySum("acs_transformation_werewolf_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_transformation_werewolf_tutorial_toggle");
		}
	}

	function ACSGlideTutorialDisplayToggle()
	{
		if (ACSGlideTutorialEnabled() && FactsQuerySum("acs_glide_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_glide_tutorial_toggle");
		}
	}

	function ACSBruxaDashTutorialDisplayToggle()
	{
		if (ACSBruxaDashTutorialEnabled() && FactsQuerySum("acs_bruxa_dash_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_bruxa_dash_tutorial_toggle");
		}
	}

	function ACSWraithModeTutorialDisplayToggle()
	{
		if (ACSWraithModeTutorialEnabled() && FactsQuerySum("acs_wraith_mode_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_wraith_mode_tutorial_toggle");
		}
	}

	function ACSLightsTutorialDisplayToggle()
	{
		if (ACSLightsTutorialEnabled() && FactsQuerySum("acs_lights_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_lights_tutorial_toggle");
		}
	}

	function ACSQuickMeditationTutorialDisplayToggle()
	{
		if (ACSQuickMeditationTutorialEnabled() && FactsQuerySum("acs_quick_meditation_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_quick_meditation_tutorial_toggle");
		}
	}

	function ACSPerfectDodgesCountersTutorialDisplayToggle()
	{
		if (ACSPerfectDodgesCountersTutorialEnabled() && FactsQuerySum("acs_perfect_dodges_counters_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_perfect_dodges_counters_tutorial_toggle");
		}
	}

	function ACSArmorSystemTutorialDisplayToggle()
	{
		if (ACSArmorSystemTutorialEnabled() && FactsQuerySum("acs_armor_system_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_armor_system_tutorial_toggle");
		}
	}

	function ACSElementalComboSystemTutorialDisplayToggle()
	{
		if (ACSElementalComboSystemTutorialEnabled() && FactsQuerySum("acs_elemental_combo_system_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_elemental_combo_system_tutorial_toggle");
		}
	}

	function ACSQuestTrackingSwapTutorialDisplayToggle()
	{
		if (ACSQuestTrackingSwapTutorialEnabled() && FactsQuerySum("acs_quest_tracking_swap_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_quest_tracking_swap_tutorial_toggle");
		}
	}

	function ACSCloakWeaponHideTutorialDisplayToggle()
	{
		if (ACSCloakWeaponHideTutorialEnabled() && FactsQuerySum("acs_cloak_weapon_hide_tutorial_toggle") <= 0 )
		{
			FactsAdd("acs_cloak_weapon_hide_tutorial_toggle");
		}
	}







	function TutorialDisplayToggleOff()
	{
		ACSRageTutorialDisplay();

		ACSDynamicEnemyBehaviorSystemTutorialDisplay();

		ACSGuardsTutorialDisplay();

		ACSTransformationWerewolfTutorialDisplay();

		ACSGlideTutorialDisplay();

		ACSBruxaDashTutorialDisplay();

		ACSWraithModeTutorialDisplay();

		ACSLightsTutorialDisplay();

		ACSQuickMeditationTutorialDisplay();

		ACSPerfectDodgesCountersTutorialDisplay();

		ACSArmorSystemTutorialDisplay();

		ACSElementalComboSystemTutorialDisplay();

		ACSQuestTrackingSwapTutorialDisplay();

		ACSCloakWeaponHideTutorialDisplay();

	}


	function ACSRageTutorialDisplay()
	{
		if ( FactsQuerySum("acs_rage_tutorial_toggle") > 0 )
		{
			ACS_Rage_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodRageTutorialEnabled', "false");
			FactsRemove("acs_rage_tutorial_toggle");
		}
	}

	function ACSDynamicEnemyBehaviorSystemTutorialDisplay()
	{
		if ( FactsQuerySum("acs_dynamic_enemy_tutorial_toggle") > 0 )
		{
			ACS_Dynamic_Enemy_Behavior_System_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodDynamicEnemyBehaviorSystemTutorialEnabled', "false");
			FactsRemove("acs_dynamic_enemy_tutorial_toggle");
		}
	}

	function ACSGuardsTutorialDisplay()
	{
		if ( FactsQuerySum("acs_guards_tutorial_toggle") > 0 )
		{
			ACS_Guards_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodGuardsTutorialEnabled', "false");
			FactsRemove("acs_guards_tutorial_toggle");
		}
	}

	function ACSTransformationWerewolfTutorialDisplay()
	{
		if ( FactsQuerySum("acs_transformation_werewolf_tutorial_toggle") > 0 )
		{
			ACS_TransformationWerewolf_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodTransformationWerewolfTutorialEnabled', "false");
			FactsRemove("acs_transformation_werewolf_tutorial_toggle");
		}
	}

	function ACSGlideTutorialDisplay()
	{
		if ( FactsQuerySum("acs_glide_tutorial_toggle") > 0 )
		{
			ACS_Glide_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodGlideTutorialEnabled', "false");
			FactsRemove("acs_glide_tutorial_toggle");
		}
	}

	function ACSBruxaDashTutorialDisplay()
	{
		if ( FactsQuerySum("acs_bruxa_dash_tutorial_toggle") > 0 )
		{
			ACS_Bruxa_Dash_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodBruxaDashTutorialEnabled', "false");
			FactsRemove("acs_bruxa_dash_tutorial_toggle");
		}
	}

	function ACSWraithModeTutorialDisplay()
	{
		if ( FactsQuerySum("acs_wraith_mode_tutorial_toggle") > 0 )
		{
			ACS_Wraith_Mode_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodWraithModeTutorialEnabled', "false");
			FactsRemove("acs_wraith_mode_tutorial_toggle");
		}
	}

	function ACSLightsTutorialDisplay()
	{
		if ( FactsQuerySum("acs_lights_tutorial_toggle") > 0 )
		{
			ACS_Lights_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodLightsTutorialEnabled', "false");
			FactsRemove("acs_lights_tutorial_toggle");
		}
	}

	function ACSQuickMeditationTutorialDisplay()
	{
		if ( FactsQuerySum("acs_quick_meditation_tutorial_toggle") > 0 )
		{
			ACS_QuickMeditation_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodQuickMeditationTutorialEnabled', "false");
			FactsRemove("acs_quick_meditation_tutorial_toggle");
		}
	}

	function ACSPerfectDodgesCountersTutorialDisplay()
	{
		if ( FactsQuerySum("acs_perfect_dodges_counters_tutorial_toggle") > 0 )
		{
			ACS_PerfectDodgesCounters_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodPerfectDodgesCountersTutorialEnabled', "false");
			FactsRemove("acs_perfect_dodges_counters_tutorial_toggle");
		}
	}

	function ACSArmorSystemTutorialDisplay()
	{
		if ( FactsQuerySum("acs_armor_system_tutorial_toggle") > 0 )
		{
			ACS_ArmorSystem_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodArmorSystemTutorialEnabled', "false");
			FactsRemove("acs_armor_system_tutorial_toggle");
		}
	}

	function ACSElementalComboSystemTutorialDisplay()
	{
		if ( FactsQuerySum("acs_elemental_combo_system_tutorial_toggle") > 0 )
		{
			ACS_ElementalComboSystem_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodElementalComboSystemTutorialEnabled', "false");
			FactsRemove("acs_elemental_combo_system_tutorial_toggle");
		}
	}

	function ACSQuestTrackingSwapTutorialDisplay()
	{
		if ( FactsQuerySum("acs_quest_tracking_swap_tutorial_toggle") > 0 )
		{
			ACS_QuestTrackingSwap_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodQuestTrackingSwapTutorialEnabled', "false");
			FactsRemove("acs_quest_tracking_swap_tutorial_toggle");
		}
	}

	function ACSCloakWeaponHideTutorialDisplay()
	{
		if ( FactsQuerySum("acs_cloak_weapon_hide_tutorial_toggle") > 0 )
		{
			ACS_CloakWeaponHide_Tutorial_Menu();
			theGame.GetInGameConfigWrapper().SetVarValue('ACSmodTutorials', 'ACSmodCloakWeaponHideTutorialEnabled', "false");
			FactsRemove("acs_cloak_weapon_hide_tutorial_toggle");
		}
	}
}